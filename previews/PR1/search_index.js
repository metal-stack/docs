var documenterSearchIndex = {"docs":
[{"location":"external/metalctl/docs/metalctl_machine_identify/#metalctl-machine-identify-1","page":"-","title":"metalctl machine identify","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify/#","page":"-","title":"-","text":"manage machine chassis identify LED power","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify/#","page":"-","title":"-","text":"manage machine chassis identify LED power","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify/#","page":"-","title":"-","text":"  -h, --help   help for identify","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify/#","page":"-","title":"-","text":"metalctl machine\t - manage machines\nmetalctl machine identify off\t - power off the machine chassis identify LED\nmetalctl machine identify on\t - power on the machine chassis identify LED","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_create/#metalctl-partition-create-1","page":"-","title":"metalctl partition create","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_create/#","page":"-","title":"-","text":"create a partition","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_create/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_create/#","page":"-","title":"-","text":"create a partition","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_create/#","page":"-","title":"-","text":"metalctl partition create [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_create/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_create/#","page":"-","title":"-","text":"      --cmdline string       kernel commandline for the metal-hammer in the partition. [required]\n  -d, --description string   Description of the partition. [required]\n  -h, --help                 help for create\n      --id string            ID of the partition. [required]\n      --imageurl string      initrd for the metal-hammer in the partition. [required]\n      --kernelurl string     kernel url for the metal-hammer in the partition. [required]\n      --mgmtserver string    management server address in the partition. [required]\n  -n, --name string          Name of the partition. [optional]","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_create/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_create/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_create/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_create/#","page":"-","title":"-","text":"metalctl partition\t - manage partitions","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_create/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_edit/#metalctl-image-edit-1","page":"-","title":"metalctl image edit","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_edit/#","page":"-","title":"-","text":"edit a image","category":"page"},{"location":"external/metalctl/docs/metalctl_image_edit/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_edit/#","page":"-","title":"-","text":"edit a image","category":"page"},{"location":"external/metalctl/docs/metalctl_image_edit/#","page":"-","title":"-","text":"metalctl image edit <imageID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_image_edit/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_edit/#","page":"-","title":"-","text":"  -h, --help   help for edit","category":"page"},{"location":"external/metalctl/docs/metalctl_image_edit/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_edit/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_image_edit/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_edit/#","page":"-","title":"-","text":"metalctl image\t - manage images","category":"page"},{"location":"external/metalctl/docs/metalctl_image_edit/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl/#metalctl-1","page":"-","title":"metalctl","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl/#","page":"-","title":"-","text":"a cli to manage metal devices.","category":"page"},{"location":"external/metalctl/docs/metalctl/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl/#","page":"-","title":"-","text":"a cli to manage metal devices.","category":"page"},{"location":"external/metalctl/docs/metalctl/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n  -h, --help                   help for metalctl\n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl/#","page":"-","title":"-","text":"metalctl completion\t - Generates bash completion scripts\nmetalctl context\t - manage metalctl context\nmetalctl firewall\t - manage firewalls\nmetalctl image\t - manage images\nmetalctl login\t - login user and receive token\nmetalctl machine\t - manage machines\nmetalctl markdown\t - create markdown documentation\nmetalctl network\t - manage networks\nmetalctl partition\t - manage partitions\nmetalctl project\t - manage projects\nmetalctl size\t - manage sizes\nmetalctl switch\t - manage switches\nmetalctl update\t - update the program\nmetalctl whoami\t - shows current user\nmetalctl zsh-completion\t - Generates Z shell completion scripts","category":"page"},{"location":"external/metalctl/docs/metalctl/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix/#metalctl-network-prefix-1","page":"-","title":"metalctl network prefix","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix/#","page":"-","title":"-","text":"prefix management of a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix/#","page":"-","title":"-","text":"prefix management of a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix/#","page":"-","title":"-","text":"  -h, --help   help for prefix","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix/#","page":"-","title":"-","text":"metalctl network\t - manage networks\nmetalctl network prefix add\t - add a prefix to a network\nmetalctl network prefix remove\t - remove a prefix from a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"installation/monitoring/#Monitoring-the-metal-stack-1","page":"Monitoring","title":"Monitoring the metal-stack","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_describe/#metalctl-image-describe-1","page":"-","title":"metalctl image describe","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_describe/#","page":"-","title":"-","text":"describe a image","category":"page"},{"location":"external/metalctl/docs/metalctl_image_describe/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_describe/#","page":"-","title":"-","text":"describe a image","category":"page"},{"location":"external/metalctl/docs/metalctl_image_describe/#","page":"-","title":"-","text":"metalctl image describe <imageID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_image_describe/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_describe/#","page":"-","title":"-","text":"  -h, --help   help for describe","category":"page"},{"location":"external/metalctl/docs/metalctl_image_describe/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_describe/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_image_describe/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_describe/#","page":"-","title":"-","text":"metalctl image\t - manage images","category":"page"},{"location":"external/metalctl/docs/metalctl_image_describe/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_check/#metalctl-update-check-1","page":"-","title":"metalctl update check","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_check/#","page":"-","title":"-","text":"check for update of the program","category":"page"},{"location":"external/metalctl/docs/metalctl_update_check/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_check/#","page":"-","title":"-","text":"check for update of the program","category":"page"},{"location":"external/metalctl/docs/metalctl_update_check/#","page":"-","title":"-","text":"metalctl update check [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_update_check/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_check/#","page":"-","title":"-","text":"  -h, --help   help for check","category":"page"},{"location":"external/metalctl/docs/metalctl_update_check/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_check/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_update_check/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_check/#","page":"-","title":"-","text":"metalctl update\t - update the program","category":"page"},{"location":"external/metalctl/docs/metalctl_update_check/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_list/#metalctl-partition-list-1","page":"-","title":"metalctl partition list","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_list/#","page":"-","title":"-","text":"list all partitions","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_list/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_list/#","page":"-","title":"-","text":"list all partitions","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_list/#","page":"-","title":"-","text":"metalctl partition list [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_list/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_list/#","page":"-","title":"-","text":"  -h, --help   help for list","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_list/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_list/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_list/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_list/#","page":"-","title":"-","text":"metalctl partition\t - manage partitions","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_list/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_reserve/#metalctl-machine-reserve-1","page":"-","title":"metalctl machine reserve","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_reserve/#","page":"-","title":"-","text":"reserve a machine","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_reserve/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_reserve/#","page":"-","title":"-","text":"reserve a machine for exclusive usage, this machine will no longer be picked by other allocations. This is useful for maintenance of the machine or testing. After the reservation is not needed anymore, the reservation should be removed with –remove.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_reserve/#","page":"-","title":"-","text":"metalctl machine reserve <machine ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_reserve/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_reserve/#","page":"-","title":"-","text":"  -d, --description string   description of the reason for the reservation.\n  -h, --help                 help for reserve\n  -r, --remove               remove the reservation.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_reserve/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_reserve/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_reserve/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_reserve/#","page":"-","title":"-","text":"metalctl machine\t - manage machines","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_reserve/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch/#metalctl-switch-1","page":"-","title":"metalctl switch","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch/#","page":"-","title":"-","text":"manage switches","category":"page"},{"location":"external/metalctl/docs/metalctl_switch/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch/#","page":"-","title":"-","text":"manage switches","category":"page"},{"location":"external/metalctl/docs/metalctl_switch/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch/#","page":"-","title":"-","text":"  -h, --help   help for switch","category":"page"},{"location":"external/metalctl/docs/metalctl_switch/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_switch/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch/#","page":"-","title":"-","text":"metalctl\t - a cli to manage metal devices.\nmetalctl switch detail\t - switch details\nmetalctl switch list\t - list all switches","category":"page"},{"location":"external/metalctl/docs/metalctl_switch/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#metalctl-zsh-completion-1","page":"-","title":"metalctl zsh-completion","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#","page":"-","title":"-","text":"Generates Z shell completion scripts","category":"page"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#","page":"-","title":"-","text":"To load completion run","category":"page"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#","page":"-","title":"-","text":". <(metalctl zsh-completion)","category":"page"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#","page":"-","title":"-","text":"To configure your Z shell (with oh-my-zshell framework) to load completions for each session run","category":"page"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#","page":"-","title":"-","text":"echo -e '#compdef metalctl metalctl\\n. <(metalctl zsh-completion)' > ZSH/completions/metalctl rm -f ~/.zcompdump*","category":"page"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#","page":"-","title":"-","text":"metalctl zsh-completion [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#","page":"-","title":"-","text":"  -h, --help   help for zsh-completion","category":"page"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#","page":"-","title":"-","text":"metalctl\t - a cli to manage metal devices.","category":"page"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"proposals/#Metal-Stack-Enhancement-Proposals-(MEPs)-1","page":"Enhancement Proposals","title":"Metal Stack Enhancement Proposals (MEPs)","text":"","category":"section"},{"location":"proposals/#","page":"Enhancement Proposals","title":"Enhancement Proposals","text":"This directory contains proposals which address substantial modifications to metal-stack and are discussed here. Each Proposal is numbered and raised as a pull request.","category":"page"},{"location":"proposals/#","page":"Enhancement Proposals","title":"Enhancement Proposals","text":"Every proposal has a shortcut name which starts with MEP followed by a unique number. The proposal should be raised as a merge request, if the merge request was excepted everyone can read it. This does not necessarily mean the proposal was accepted or not. The list of proposal and their current state is listed in the table below.","category":"page"},{"location":"proposals/#","page":"Enhancement Proposals","title":"Enhancement Proposals","text":"Possible states are:","category":"page"},{"location":"proposals/#","page":"Enhancement Proposals","title":"Enhancement Proposals","text":"InDiscussion\nAccepted\nDeclined\nInProgress\nCompleted","category":"page"},{"location":"proposals/#","page":"Enhancement Proposals","title":"Enhancement Proposals","text":"Once a proposal was accepted, a issue should be raised and the implementation should be done in a seperate PR.","category":"page"},{"location":"proposals/#","page":"Enhancement Proposals","title":"Enhancement Proposals","text":"Name Description State Issue PR\nMEP-1 Distributed Control Plane Deployment InDiscussion N/A N/A\nMEP-2 Two Factor Authentication InProgress N/A N/A\nMEP-3 Machine Re-Installation to preserve local data Completed N/A N/A\nMEP-4 Multi-tenancy for the metal-api Accepted N/A N/A","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_on/#metalctl-machine-power-on-1","page":"-","title":"metalctl machine power on","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_on/#","page":"-","title":"-","text":"power on a machine","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_on/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_on/#","page":"-","title":"-","text":"set the machine to power on state, if the machine already was on nothing happens.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_on/#","page":"-","title":"-","text":"metalctl machine power on <machine ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_on/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_on/#","page":"-","title":"-","text":"  -h, --help   help for on","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_on/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_on/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_on/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_on/#","page":"-","title":"-","text":"metalctl machine power\t - manage machine power","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_on/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_apply/#metalctl-partition-apply-1","page":"-","title":"metalctl partition apply","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_apply/#","page":"-","title":"-","text":"create/update a partition","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_apply/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_apply/#","page":"-","title":"-","text":"create/update a partition","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_apply/#","page":"-","title":"-","text":"metalctl partition apply [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_apply/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_apply/#","page":"-","title":"-","text":"  -h, --help   help for apply","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_apply/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_apply/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_apply/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_apply/#","page":"-","title":"-","text":"metalctl partition\t - manage partitions","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_apply/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"proposals/MEP1/README/#Distributed-Metal-Control-Plane-1","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"","category":"section"},{"location":"proposals/MEP1/README/#Problem-Statement-1","page":"Distributed Metal Control Plane","title":"Problem Statement","text":"","category":"section"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"We face the situation that we argue for running bare metal on premise because this way the customers can control where and how their software and data are processed and stored. On the other hand, we have currently a hard requirement that our metal-api control plane components need to be running on a kubernetes cluster on some of the available hyperscalers. Running the control plane on kubernetes has the following benefits:","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"Ease of deployment\nGet most, if not all, of the required infrastructure services like (probably incomplete):\nIPs\nDNS\nL7-Loadbalancing\nStorage\nS3 Backup\nHigh Availability","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"Using a kubernetes as a service offering from one of the hyperscalers (actually GKE), enables us to focus on using kubernetes instead of maintaining it as well.","category":"page"},{"location":"proposals/MEP1/README/#Goal-1","page":"Distributed Metal Control Plane","title":"Goal","text":"","category":"section"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"It would be much saner if metal-stack has no, or only minimal dependencies to external services. Imagine a metal-stack deployment in a plant, it would be optimal if we only have to deliver a single rack with servers and networking gear installed and wired, plug that rack to the power supply and a internet uplink and its ready to go.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"Have a second plant which you want to be part of all your plants? Just tell both that they are part of something bigger and metal-api knows of two partitions.","category":"page"},{"location":"proposals/MEP1/README/#Possible-Solutions-1","page":"Distributed Metal Control Plane","title":"Possible Solutions","text":"","category":"section"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"We can think of two different solutions to this vision:","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"Keep the central control plane approach and require some sort of kubernetes deployment accessible from the internet. This has the downside that the user must, provide a managed kubernetes deployment in his own datacenter or uses a hyperscaler. Still not optimal.\nInstall the metal-api and all its dependencies in every partition, replicate or shard the databases to every connected partition, make them know each other. Connect the partitions over the internet with some sort of vpn to make the services visible to each other.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"As we can see, the first approach does not really address the problem, therefore i will describe solution #2 in more details.","category":"page"},{"location":"proposals/MEP1/README/#Central/Current-setup-1","page":"Distributed Metal Control Plane","title":"Central/Current setup","text":"","category":"section"},{"location":"proposals/MEP1/README/#Stateful-services-1","page":"Distributed Metal Control Plane","title":"Stateful services","text":"","category":"section"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"Every distributed system suffer from handling state in a scalable, fast and correct way. To start how to cope with the state, we first must identify which state can be seen as partition local only and which state must be synchronous for read, and synchronous for writes across partitions.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"Affected states:","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"masterdata: e.g. tenant and project must be present in every partition, but these are entities which are read often but updates are rare. A write can therefore be visible with a decent delay in a distinct partition with no consequences.\nipam: the prefixes and ip´s allocated from machines. These entities are also read often and rare updates. But we must differentiate between dirty reads for different types. A machine network is partition local, ips acquired from such a network must by synchronous in the same partition. Ips acquired from global networks such as internet must by synchronous for all partitions, as otherwise a internet ip could be acquired twice.\nvrf ids: they must only be unique in one partition\nimage and size configurations: read often, written seldom, so no high requirements on the storage of these entities.\nimages: os images are already replicated from a central s3 storage to a per partition s3 service. metal-hammer kernel and initrd are small and pull always from the central s3, can be done similar to os images.\nmachine and machine allocation: must be only synchronous in the partition\nswitch: must be only synchronous in the partition\nnsq messages: do not need to cross partition boundaries. No need to keep the messages persistent, even the opposite is true, we don't want to have the messages persist for a longer period.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"Now we can see that the most critical state to held and synchronize are the IPAM data, because these entities must be guaranteed to be synchronously updated, while being updated frequently.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"Datastores:","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"We use three different types of datastores to persist the states of the metal application.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"rethinkdb is the main datastore for almost all entities managed by metal-api\npostgresql is used for masterdata and ipam data.\nnsq uses disk and memory tho store the messages.","category":"page"},{"location":"proposals/MEP1/README/#Stateless-services-1","page":"Distributed Metal Control Plane","title":"Stateless services","text":"","category":"section"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"These are the easy part, all of our services which are stateless can be scaled up and down without any impact on functionality. Even the stateful services like masterdata and metal-api rely fully on the underlying datastore and can therefore also be scaled up and down to meet scalability requirements.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"Albeit, most of these services need to be placed behind a loadbalancer which does the L4/L7 balancing across the started/available replicas of the service for the clients talking to it. This is actually provided by kubernetes with either service type loadbalancer or type clusterip.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"One exception is the metal-console service which must have the partition in it´s dns name now, because there is no direct network connectivity between the management networks of the partitions. See \"Network Setup)","category":"page"},{"location":"proposals/MEP1/README/#Distributed-setup-1","page":"Distributed Metal Control Plane","title":"Distributed setup","text":"","category":"section"},{"location":"proposals/MEP1/README/#State-1","page":"Distributed Metal Control Plane","title":"State","text":"","category":"section"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"In order to replicate certain data which must be available across all partitions we can use on of the existing open source databases which enable such kind of setup. There are a few avaible out there, the following uncomplete list will highlight the pro´s and cons of each.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"RethinkDB\nWe already store most of our data in RethinkDB and it gives already the ability to synchronize the data in a distributed manner with different guarantees for consistency and latency. This is described here: Scaling, Sharding and replication. But because rethinkdb has a rough history and unsure future with the last release took more than a year, we in the team already thought that we eventually must move away from rethinkdb in the future.  \nPostgresql\nPostgres does not have a multi datacenter with replication in both directions, it just can make the remote instance store the same data.\nCockroachDB\nIs a Postgresql compatible database enginge on the wire. CockroachDB gives you both, ACID and geo replication with writes allowed from all connected members. It is even possible to configure Follow the Workload and Geo Partitioning and Replication.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"If we migrate all metal-api entities to be stored the same way we store masterdata, we could use cockroachdb to store all metal entities in one ore more databases spread across all partitions and still ensure consistency and high availability.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"A simple setup how this would look like is shown here.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"(Image: Simple CockroachDB setup)","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"go-ipam was modified in a example PR here: https://github.com/metal-pod/go-ipam/pull/17","category":"page"},{"location":"proposals/MEP1/README/#API-Access-1","page":"Distributed Metal Control Plane","title":"API Access","text":"","category":"section"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"In order to make the metal-api accessible for api users like cloud-api or metalctl as easy at it is today, some effort has to be taken. One possible approach would be to use a external loadbalancer which spread the requests evenly to all metal-api endpoints in all partitions. Because all data are accessible from all partitions, a api request going to partition A with a request to create a machine in partition B, will still work. If on the other hand partition B is not in a connected state because the interconnection between both partitions is broken, then of course the request will fail.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"IMPORTANT The NSQ Message to inform metal-core must end in the correct partition","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"To provide such a external loadbalancer we have several opportunities:","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"Cloudflare or comparable CDN service.\nBGP Anycast from every partition","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"Another setup would place a small gateway behind the metal-api address, which forwards to the metal-api in the partition where the request must be executed. This gateway, metal-api-router must inspect the payload, extract the desired partition, and forward the request without any modifications to the metal-api endpoint in this partition. This can be done for all requests, or if we want to optimize, only for write accesses.","category":"page"},{"location":"proposals/MEP1/README/#Network-setup-1","page":"Distributed Metal Control Plane","title":"Network setup","text":"","category":"section"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"In order to have the impact to the overall security concept as minimal as possible i would not modify the current network setup. The only modifications which has to be made are:","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"Allow https ingress traffic to all metal-api instances.\nAllow ssh ingress traffic to all metal-console instances.\nAllow CockroachDB Replication between all partitions.\nNo NSQ traffic from outside required anymore, except we cant solve the topic above.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"A simple setup how this would look like is shown here, this does not work though because of the forementioned NSQ issue.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"(Image: API and Console Access)","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"Therefore we need the metal-api-router:","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"(Image: Working API and Console Access)","category":"page"},{"location":"proposals/MEP1/README/#Deployment-1","page":"Distributed Metal Control Plane","title":"Deployment","text":"","category":"section"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"The deployment of our components will substantially differ in a partition compared to a the deployment we have actually. Deploying it in kubernetes in the partition would be very difficult to achieve because we have no sane way to deploy kubernetes on physical machines without a underlying API. I would therefore suggest to deploy our components in the same way we do that for the services running on the management server. Use systemd to start docker containers.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"(Image: Deployment)","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_list/#metalctl-firewall-list-1","page":"-","title":"metalctl firewall list","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_list/#","page":"-","title":"-","text":"list all firewalls","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_list/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_list/#","page":"-","title":"-","text":"list all firewalls with almost all properties in tabular form.","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_list/#","page":"-","title":"-","text":"metalctl firewall list [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_list/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_list/#","page":"-","title":"-","text":"  -h, --help               help for list\n      --partition string   partition to filter [optional]\n      --project string     project to filter [optional]","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_list/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_list/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_list/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_list/#","page":"-","title":"-","text":"metalctl firewall\t - manage firewalls","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_list/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix_remove/#metalctl-network-prefix-remove-1","page":"-","title":"metalctl network prefix remove","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix_remove/#","page":"-","title":"-","text":"remove a prefix from a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix_remove/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix_remove/#","page":"-","title":"-","text":"remove a prefix from a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix_remove/#","page":"-","title":"-","text":"metalctl network prefix remove <networkid> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix_remove/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix_remove/#","page":"-","title":"-","text":"  -h, --help            help for remove\n      --prefix string   prefix to remove.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix_remove/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix_remove/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix_remove/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix_remove/#","page":"-","title":"-","text":"metalctl network prefix\t - prefix management of a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix_remove/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_free/#metalctl-network-ip-free-1","page":"-","title":"metalctl network ip free","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_free/#","page":"-","title":"-","text":"free an IP","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_free/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_free/#","page":"-","title":"-","text":"free an IP","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_free/#","page":"-","title":"-","text":"metalctl network ip free <IP> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_free/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_free/#","page":"-","title":"-","text":"  -h, --help   help for free","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_free/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_free/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_free/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_free/#","page":"-","title":"-","text":"metalctl network ip\t - manage IPs","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_free/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project_list/#metalctl-project-list-1","page":"-","title":"metalctl project list","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project_list/#","page":"-","title":"-","text":"list all projects","category":"page"},{"location":"external/metalctl/docs/metalctl_project_list/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project_list/#","page":"-","title":"-","text":"list all projects","category":"page"},{"location":"external/metalctl/docs/metalctl_project_list/#","page":"-","title":"-","text":"metalctl project list [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_project_list/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project_list/#","page":"-","title":"-","text":"  -h, --help            help for list\n      --id string       ID of the project.\n      --name string     Name of the project.\n      --tenant string   tenant of this project.","category":"page"},{"location":"external/metalctl/docs/metalctl_project_list/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project_list/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_project_list/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project_list/#","page":"-","title":"-","text":"metalctl project\t - manage projects","category":"page"},{"location":"external/metalctl/docs/metalctl_project_list/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_free/#metalctl-network-free-1","page":"-","title":"metalctl network free","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_free/#","page":"-","title":"-","text":"free a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_free/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_free/#","page":"-","title":"-","text":"free a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_free/#","page":"-","title":"-","text":"metalctl network free <networkid> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_free/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_free/#","page":"-","title":"-","text":"  -h, --help   help for free","category":"page"},{"location":"external/metalctl/docs/metalctl_network_free/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_free/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_free/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_free/#","page":"-","title":"-","text":"metalctl network\t - manage networks","category":"page"},{"location":"external/metalctl/docs/metalctl_network_free/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_describe/#metalctl-partition-describe-1","page":"-","title":"metalctl partition describe","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_describe/#","page":"-","title":"-","text":"describe a partition","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_describe/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_describe/#","page":"-","title":"-","text":"describe a partition","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_describe/#","page":"-","title":"-","text":"metalctl partition describe <partitionID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_describe/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_describe/#","page":"-","title":"-","text":"  -h, --help   help for describe","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_describe/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_describe/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_describe/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_describe/#","page":"-","title":"-","text":"metalctl partition\t - manage partitions","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_describe/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_bios/#metalctl-machine-power-bios-1","page":"-","title":"metalctl machine power bios","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_bios/#","page":"-","title":"-","text":"boot a machine into BIOS","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_bios/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_bios/#","page":"-","title":"-","text":"the machine will boot into bios after a power cycle/reset.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_bios/#","page":"-","title":"-","text":"metalctl machine power bios <machine ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_bios/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_bios/#","page":"-","title":"-","text":"  -h, --help   help for bios","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_bios/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_bios/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_bios/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_bios/#","page":"-","title":"-","text":"metalctl machine power\t - manage machine power","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_bios/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_list/#metalctl-size-list-1","page":"-","title":"metalctl size list","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_list/#","page":"-","title":"-","text":"list all sizes","category":"page"},{"location":"external/metalctl/docs/metalctl_size_list/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_list/#","page":"-","title":"-","text":"list all sizes","category":"page"},{"location":"external/metalctl/docs/metalctl_size_list/#","page":"-","title":"-","text":"metalctl size list [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_size_list/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_list/#","page":"-","title":"-","text":"  -h, --help   help for list","category":"page"},{"location":"external/metalctl/docs/metalctl_size_list/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_list/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_size_list/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_list/#","page":"-","title":"-","text":"metalctl size\t - manage sizes","category":"page"},{"location":"external/metalctl/docs/metalctl_size_list/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_dump/#metalctl-update-dump-1","page":"-","title":"metalctl update dump","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_dump/#","page":"-","title":"-","text":"dump the version update file","category":"page"},{"location":"external/metalctl/docs/metalctl_update_dump/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_dump/#","page":"-","title":"-","text":"dump the version update file","category":"page"},{"location":"external/metalctl/docs/metalctl_update_dump/#","page":"-","title":"-","text":"metalctl update dump <binary> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_update_dump/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_dump/#","page":"-","title":"-","text":"  -h, --help   help for dump","category":"page"},{"location":"external/metalctl/docs/metalctl_update_dump/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_dump/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_update_dump/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_dump/#","page":"-","title":"-","text":"metalctl update\t - update the program","category":"page"},{"location":"external/metalctl/docs/metalctl_update_dump/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size/#metalctl-size-1","page":"-","title":"metalctl size","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size/#","page":"-","title":"-","text":"manage sizes","category":"page"},{"location":"external/metalctl/docs/metalctl_size/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size/#","page":"-","title":"-","text":"a size is a distinct hardware equipment in terms of cpu cores, ram and storage of a machine.","category":"page"},{"location":"external/metalctl/docs/metalctl_size/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size/#","page":"-","title":"-","text":"  -h, --help   help for size","category":"page"},{"location":"external/metalctl/docs/metalctl_size/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_size/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size/#","page":"-","title":"-","text":"metalctl\t - a cli to manage metal devices.\nmetalctl size apply\t - create/update a size\nmetalctl size create\t - create a size\nmetalctl size delete\t - delete a size\nmetalctl size describe\t - describe a size\nmetalctl size edit\t - edit a size\nmetalctl size list\t - list all sizes\nmetalctl size try\t - try a specific hardware spec and give the chosen size back\nmetalctl size update\t - update a size","category":"page"},{"location":"external/metalctl/docs/metalctl_size/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"overview/os/#Operating-Systems-1","page":"Operating Systems","title":"Operating Systems","text":"","category":"section"},{"location":"overview/os/#","page":"Operating Systems","title":"Operating Systems","text":"Our operating system images are built on regular basis from the metal-images repository.","category":"page"},{"location":"overview/os/#","page":"Operating Systems","title":"Operating Systems","text":"The images are hosted on GKE at images.metal-pod.io. This mirror can be used as an image store for your metal-stack partitions if you want. The metal-stack developers continuously update these images and scan them for vulnerabilities.","category":"page"},{"location":"overview/os/#Supported-OS-Images-1","page":"Operating Systems","title":"Supported OS Images","text":"","category":"section"},{"location":"overview/os/#","page":"Operating Systems","title":"Operating Systems","text":"The operating system images that we build are trimmed down to their bare essentials for serving as Kubernetes worker nodes. Small image sizes make our machine provisioning blazingly fast.","category":"page"},{"location":"overview/os/#","page":"Operating Systems","title":"Operating Systems","text":"The supported images are:","category":"page"},{"location":"overview/os/#","page":"Operating Systems","title":"Operating Systems","text":"Debian 10\nUbuntu 19.10","category":"page"},{"location":"overview/os/#Building-Your-Own-Images-1","page":"Operating Systems","title":"Building Your Own Images","text":"","category":"section"},{"location":"overview/os/#","page":"Operating Systems","title":"Operating Systems","text":"It is fully possible to build your own operating system images and provide them through the metal-stack.","category":"page"},{"location":"overview/os/#","page":"Operating Systems","title":"Operating Systems","text":"There are some conventions though that you need to follow in order to make your image installable through the metal-hammer.","category":"page"},{"location":"overview/os/#","page":"Operating Systems","title":"Operating Systems","text":"TODO: Describe conventions (install.sh, required packages, format, archive, md5 sum, ...)","category":"page"},{"location":"external/metalctl/docs/metalctl_network_allocate/#metalctl-network-allocate-1","page":"-","title":"metalctl network allocate","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_allocate/#","page":"-","title":"-","text":"allocate a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_allocate/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_allocate/#","page":"-","title":"-","text":"allocate a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_allocate/#","page":"-","title":"-","text":"metalctl network allocate [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_allocate/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_allocate/#","page":"-","title":"-","text":"  -d, --description string   description of the network to create. [optional]\n  -h, --help                 help for allocate\n      --labels strings       labels for this network. [optional]\n  -n, --name string          name of the network to create. [required]\n      --partition string     partition where this network should exist. [required]\n      --project string       partition where this network should exist. [required]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_allocate/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_allocate/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_allocate/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_allocate/#","page":"-","title":"-","text":"metalctl network\t - manage networks","category":"page"},{"location":"external/metalctl/docs/metalctl_network_allocate/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/README/#metalctl-1","page":"metalctl","title":"metalctl","text":"","category":"section"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"metalctl is the command line client to access the metal-api.","category":"page"},{"location":"external/metalctl/README/#Installation-1","page":"metalctl","title":"Installation","text":"","category":"section"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"Download locations:","category":"page"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"metalctl-linux-amd64\nmetalctl-darwin-amd64\nmetalctl-windows-amd64","category":"page"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"Via pre-build package:","category":"page"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"sudo curl -fsSL https://images.metal-pod.io/metalctl/metalctl -o /usr/local/bin/metalctl\nsudo chmod +x /usr/local/bin/metalctl","category":"page"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"Self-build:","category":"page"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"make\nsudo ln -sf $(pwd)/bin/metalctl /usr/local/bin/metalctl","category":"page"},{"location":"external/metalctl/README/#Installation-on-Linux-1","page":"metalctl","title":"Installation on Linux","text":"","category":"section"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"sudo curl -fsSL https://images.metal-pod.io/metalctl/metalctl-linux-amd64 -o /usr/local/bin/metalctl\nsudo chmod +x /usr/local/bin/metalctl","category":"page"},{"location":"external/metalctl/README/#Installation-on-MacOS-1","page":"metalctl","title":"Installation on MacOS","text":"","category":"section"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"sudo curl -fsSL https://images.metal-pod.io/metalctl/metalctl-darvin-amd64 -o /usr/local/bin/metalctl\nsudo chmod +x /usr/local/bin/metalctl","category":"page"},{"location":"external/metalctl/README/#Installation-on-Windows-1","page":"metalctl","title":"Installation on Windows","text":"","category":"section"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"curl -LO https://blobstore.fi-ts.io/cloud-native/metalctl/metalctl-windows-amd64\ncopy metalctl-windows-amd64 metalctl.exe","category":"page"},{"location":"external/metalctl/README/#Configuration-1","page":"metalctl","title":"Configuration","text":"","category":"section"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"Set up auto-completion for metalctl, e.g. add to your ~/.bashrc:","category":"page"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"source <(metalctl completion bash)","category":"page"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"Set up metalctl config, by first creating the config folder (mkdir -p ~/.metalctl), then set the metalctl URL within ~/.metalctl/config.yaml:","category":"page"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"---\ncurrent: prod\ncontexts:\n  prod:\n    url: https://api.metal-stack.io/metal\n    issuer_url: https://dex.metal-stack.io/dex\n    client_id: metal_client\n    client_secret: 456","category":"page"},{"location":"external/metalctl/README/#Available-commands-1","page":"metalctl","title":"Available commands","text":"","category":"section"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"Full documentation is generated out of the cobra command implementation with:","category":"page"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"metalctl markdown","category":"page"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"generated markdown is here","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_edit/#metalctl-network-ip-edit-1","page":"-","title":"metalctl network ip edit","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_edit/#","page":"-","title":"-","text":"edit a ip","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_edit/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_edit/#","page":"-","title":"-","text":"edit a ip","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_edit/#","page":"-","title":"-","text":"metalctl network ip edit <IP> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_edit/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_edit/#","page":"-","title":"-","text":"  -h, --help   help for edit","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_edit/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_edit/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_edit/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_edit/#","page":"-","title":"-","text":"metalctl network ip\t - manage IPs","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_edit/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip/#metalctl-network-ip-1","page":"-","title":"metalctl network ip","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip/#","page":"-","title":"-","text":"manage IPs","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip/#","page":"-","title":"-","text":"manage IPs","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip/#","page":"-","title":"-","text":"  -h, --help   help for ip","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip/#","page":"-","title":"-","text":"metalctl network\t - manage networks\nmetalctl network ip allocate\t - allocate an IP, if non given the next free is allocated, otherwise the given IP is checked for availability.\nmetalctl network ip apply\t - create/update an IP\nmetalctl network ip edit\t - edit a ip\nmetalctl network ip free\t - free an IP\nmetalctl network ip list\t - manage IPs","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_reserve/#metalctl-firewall-reserve-1","page":"-","title":"metalctl firewall reserve","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_reserve/#","page":"-","title":"-","text":"reserve a firewall","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_reserve/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_reserve/#","page":"-","title":"-","text":"reserve a firewall for exclusive usage, this firewall will no longer be picked by other allocations. This is useful for maintenance of the firewall or testing. After the reservation is not needed anymore, the reservation should be removed with –remove.","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_reserve/#","page":"-","title":"-","text":"metalctl firewall reserve <firewall ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_reserve/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_reserve/#","page":"-","title":"-","text":"  -h, --help   help for reserve","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_reserve/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_reserve/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_reserve/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_reserve/#","page":"-","title":"-","text":"metalctl firewall\t - manage firewalls","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_reserve/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify_on/#metalctl-machine-identify-on-1","page":"-","title":"metalctl machine identify on","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify_on/#","page":"-","title":"-","text":"power on the machine chassis identify LED","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify_on/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify_on/#","page":"-","title":"-","text":"set the machine chassis identify LED to on state","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify_on/#","page":"-","title":"-","text":"metalctl machine identify on <machine ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify_on/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify_on/#","page":"-","title":"-","text":"  -d, --description string   description of the reason for chassis identify LED turn-on.\n  -h, --help                 help for on","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify_on/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify_on/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify_on/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify_on/#","page":"-","title":"-","text":"metalctl machine identify\t - manage machine chassis identify LED power","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify_on/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_edit/#metalctl-size-edit-1","page":"-","title":"metalctl size edit","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_edit/#","page":"-","title":"-","text":"edit a size","category":"page"},{"location":"external/metalctl/docs/metalctl_size_edit/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_edit/#","page":"-","title":"-","text":"edit a size","category":"page"},{"location":"external/metalctl/docs/metalctl_size_edit/#","page":"-","title":"-","text":"metalctl size edit <sizeID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_size_edit/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_edit/#","page":"-","title":"-","text":"  -h, --help   help for edit","category":"page"},{"location":"external/metalctl/docs/metalctl_size_edit/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_edit/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_size_edit/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_edit/#","page":"-","title":"-","text":"metalctl size\t - manage sizes","category":"page"},{"location":"external/metalctl/docs/metalctl_size_edit/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_apply/#metalctl-size-apply-1","page":"-","title":"metalctl size apply","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_apply/#","page":"-","title":"-","text":"create/update a size","category":"page"},{"location":"external/metalctl/docs/metalctl_size_apply/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_apply/#","page":"-","title":"-","text":"create/update a size","category":"page"},{"location":"external/metalctl/docs/metalctl_size_apply/#","page":"-","title":"-","text":"metalctl size apply [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_size_apply/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_apply/#","page":"-","title":"-","text":"  -h, --help   help for apply","category":"page"},{"location":"external/metalctl/docs/metalctl_size_apply/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_apply/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_size_apply/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_apply/#","page":"-","title":"-","text":"metalctl size\t - manage sizes","category":"page"},{"location":"external/metalctl/docs/metalctl_size_apply/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_create/#metalctl-firewall-create-1","page":"-","title":"metalctl firewall create","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_create/#","page":"-","title":"-","text":"create a firewall","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_create/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_create/#","page":"-","title":"-","text":"create a new firewall connected to the given networks.","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_create/#","page":"-","title":"-","text":"metalctl firewall create [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_create/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_create/#","page":"-","title":"-","text":"  -d, --description string    Description of the firewall to create. [optional]\n  -h, --help                  help for create\n  -H, --hostname string       Hostname of the firewall. [required]\n  -I, --id string             ID of a specific firewall to allocate, if given, size and partition are ignored. Need to be set to reserved (--reserve) state before.\n  -i, --image string          OS Image to install. [required]\n      --ips strings           Sets the firewall's IP address. Usage: [--ips[=IPV4-ADDRESS[,IPV4-ADDRESS]...]]...\n                              IPV4-ADDRESS specifies the IPv4 address to add.\n                              It can only be used in conjunction with --networks.\n  -n, --name string           Name of the firewall. [optional]\n      --networks strings      Adds network(s). Usage: --networks NETWORK[:MODE][,NETWORK[:MODE]]... [--networks NETWORK[:MODE][,\n                              NETWORK[:MODE]]...]...\n                              NETWORK specifies the id of an existing network.\n                              MODE can be omitted or one of:\n                              \tauto\tIP address is automatically acquired from the given network\n                              \tnoauto\tNo automatic IP address acquisition\n  -S, --partition string      partition/datacenter where the firewall is created. [required, except for reserved machines]\n  -P, --project string        Project where the firewall should belong to. [required]\n  -s, --size string           Size of the firewall. [required, except for reserved machines]\n  -p, --sshpublickey string   SSH public key for access via ssh and console. [optional]\n                              Can be either the public key as string, or pointing to the public key file to use e.g.: \"@~/.ssh/id_rsa.pub\".\n                              If ~/.ssh/id_rsa.pub is present it will be picked as default.\n      --tags strings          tags to add to the firewall, use it like: --tags \"tag1,tag2\" or --tags \"tag3\".\n      --userdata string       cloud-init.io compatible userdata. [optional]\n                              Can be either the userdata as string, or pointing to the userdata file to use e.g.: \"@/tmp/userdata.cfg\".","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_create/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_create/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_create/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_create/#","page":"-","title":"-","text":"metalctl firewall\t - manage firewalls","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_create/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine/#metalctl-machine-1","page":"-","title":"metalctl machine","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine/#","page":"-","title":"-","text":"manage machines","category":"page"},{"location":"external/metalctl/docs/metalctl_machine/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine/#","page":"-","title":"-","text":"metal machines are bare metal servers.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine/#","page":"-","title":"-","text":"  -h, --help   help for machine","category":"page"},{"location":"external/metalctl/docs/metalctl_machine/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine/#","page":"-","title":"-","text":"metalctl\t - a cli to manage metal devices.\nmetalctl machine console\t - console access to a machine, machine must be created with a ssh public key, authentication is done with your private key.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine/#","page":"-","title":"-","text":"In case the machine did not register properly a direct ipmi console access is available via the –ipmi flag. This is only for administrative access.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine/#","page":"-","title":"-","text":"metalctl machine create\t - create a machine\nmetalctl machine describe\t - describe a machine\nmetalctl machine destroy\t - destroy a machine\nmetalctl machine identify\t - manage machine chassis identify LED power\nmetalctl machine ipmi\t - display ipmi details of the machine, if no machine ID is given all ipmi addresses are returned.\nmetalctl machine issues\t - display machines which are in a potential bad state\nmetalctl machine list\t - list all machines\nmetalctl machine lock\t - lock a machine\nmetalctl machine logs\t - display machine provisioning logs\nmetalctl machine power\t - manage machine power\nmetalctl machine reinstall\t - reinstalls an already allocated machine\nmetalctl machine reserve\t - reserve a machine","category":"page"},{"location":"external/metalctl/docs/metalctl_machine/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_describe/#metalctl-machine-describe-1","page":"-","title":"metalctl machine describe","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_describe/#","page":"-","title":"-","text":"describe a machine","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_describe/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_describe/#","page":"-","title":"-","text":"describe a machine in a very detailed form with all properties.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_describe/#","page":"-","title":"-","text":"metalctl machine describe <machine ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_describe/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_describe/#","page":"-","title":"-","text":"  -h, --help   help for describe","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_describe/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_describe/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_describe/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_describe/#","page":"-","title":"-","text":"metalctl machine\t - manage machines","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_describe/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_completion/#metalctl-completion-1","page":"~/.bashrc or ~/.profile","title":"metalctl completion","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_completion/#","page":"~/.bashrc or ~/.profile","title":"~/.bashrc or ~/.profile","text":"Generates bash completion scripts","category":"page"},{"location":"external/metalctl/docs/metalctl_completion/#Synopsis-1","page":"~/.bashrc or ~/.profile","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_completion/#","page":"~/.bashrc or ~/.profile","title":"~/.bashrc or ~/.profile","text":"To load completion run","category":"page"},{"location":"external/metalctl/docs/metalctl_completion/#","page":"~/.bashrc or ~/.profile","title":"~/.bashrc or ~/.profile","text":". <(metalctl completion)","category":"page"},{"location":"external/metalctl/docs/metalctl_completion/#","page":"~/.bashrc or ~/.profile","title":"~/.bashrc or ~/.profile","text":"To configure your bash shell to load completions for each session add to your bashrc","category":"page"},{"location":"external/metalctl/docs/metalctl_completion/#/.bashrc-or-/.profile-1","page":"~/.bashrc or ~/.profile","title":"~/.bashrc or ~/.profile","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_completion/#","page":"~/.bashrc or ~/.profile","title":"~/.bashrc or ~/.profile","text":". <(metalctl completion)","category":"page"},{"location":"external/metalctl/docs/metalctl_completion/#","page":"~/.bashrc or ~/.profile","title":"~/.bashrc or ~/.profile","text":"metalctl completion [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_completion/#Options-1","page":"~/.bashrc or ~/.profile","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_completion/#","page":"~/.bashrc or ~/.profile","title":"~/.bashrc or ~/.profile","text":"  -h, --help   help for completion","category":"page"},{"location":"external/metalctl/docs/metalctl_completion/#Options-inherited-from-parent-commands-1","page":"~/.bashrc or ~/.profile","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_completion/#","page":"~/.bashrc or ~/.profile","title":"~/.bashrc or ~/.profile","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_completion/#SEE-ALSO-1","page":"~/.bashrc or ~/.profile","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_completion/#","page":"~/.bashrc or ~/.profile","title":"~/.bashrc or ~/.profile","text":"metalctl\t - a cli to manage metal devices.","category":"page"},{"location":"external/metalctl/docs/metalctl_completion/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"~/.bashrc or ~/.profile","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"installation/deployment/#Deploying-metal-stack-1","page":"Installation","title":"Deploying metal-stack","text":"","category":"section"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"We are bootstrapping our control-plane as well as our partitions using Ansible through CI.","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"In order to build up your deployment, you can make use of the Ansible roles that we are using by ourselves in order to deploy the metal-stack. You can find them in the repository called metal-roles.","category":"page"},{"location":"installation/deployment/#Deploying-the-Control-Plane-1","page":"Installation","title":"Deploying the Control Plane","text":"","category":"section"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"The metal-stack control-plane is typically deployed on Kubernetes. However, there are no specific dependencies of metal-stack running in a Kubernetes cluster. It exposes a traditional REST API that can be used for managing bare metal machines.","category":"page"},{"location":"installation/deployment/#Bootstrapping-a-Partition-1","page":"Installation","title":"Bootstrapping a Partition","text":"","category":"section"},{"location":"installation/deployment/#Deploying-a-Partition-1","page":"Installation","title":"Deploying a Partition","text":"","category":"section"},{"location":"installation/deployment/#Deploying-Gardener-with-metal-stack-1","page":"Installation","title":"Deploying Gardener with metal-stack","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch_list/#metalctl-switch-list-1","page":"-","title":"metalctl switch list","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch_list/#","page":"-","title":"-","text":"list all switches","category":"page"},{"location":"external/metalctl/docs/metalctl_switch_list/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch_list/#","page":"-","title":"-","text":"list all switches","category":"page"},{"location":"external/metalctl/docs/metalctl_switch_list/#","page":"-","title":"-","text":"metalctl switch list [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_switch_list/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch_list/#","page":"-","title":"-","text":"  -h, --help   help for list","category":"page"},{"location":"external/metalctl/docs/metalctl_switch_list/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch_list/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_switch_list/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch_list/#","page":"-","title":"-","text":"metalctl switch\t - manage switches","category":"page"},{"location":"external/metalctl/docs/metalctl_switch_list/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_destroy/#metalctl-machine-destroy-1","page":"-","title":"metalctl machine destroy","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_destroy/#","page":"-","title":"-","text":"destroy a machine","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_destroy/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_destroy/#","page":"-","title":"-","text":"destroy a machine and destroy all data stored on the local disks. Once destroyed it is back for usage by other projects. A destroyed machine can not restored anymore","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_destroy/#","page":"-","title":"-","text":"metalctl machine destroy <machine ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_destroy/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_destroy/#","page":"-","title":"-","text":"  -h, --help   help for destroy","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_destroy/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_destroy/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_destroy/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_destroy/#","page":"-","title":"-","text":"metalctl machine\t - manage machines","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_destroy/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_issues/#metalctl-machine-issues-1","page":"-","title":"metalctl machine issues","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_issues/#","page":"-","title":"-","text":"display machines which are in a potential bad state","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_issues/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_issues/#","page":"-","title":"-","text":"display machines which are in a potential bad state","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_issues/#","page":"-","title":"-","text":"metalctl machine issues [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_issues/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_issues/#","page":"-","title":"-","text":"  -h, --help   help for issues","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_issues/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_issues/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_issues/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_issues/#","page":"-","title":"-","text":"metalctl machine\t - manage machines","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_issues/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_list/#metalctl-network-ip-list-1","page":"-","title":"metalctl network ip list","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_list/#","page":"-","title":"-","text":"manage IPs","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_list/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_list/#","page":"-","title":"-","text":"manage IPs","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_list/#","page":"-","title":"-","text":"metalctl network ip list [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_list/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_list/#","page":"-","title":"-","text":"  -h, --help               help for list\n      --ipaddress string   ipaddress to filter [optional]\n      --machineid string   machineid to filter [optional]\n      --network string     network to filter [optional]\n      --prefix string      prefx to filter [optional]\n      --project string     project to filter [optional]\n      --tags strings       tags to filter [optional]\n      --type string        type to filter [optional]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_list/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_list/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_list/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_list/#","page":"-","title":"-","text":"metalctl network ip\t - manage IPs","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_list/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_describe/#metalctl-size-describe-1","page":"-","title":"metalctl size describe","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_describe/#","page":"-","title":"-","text":"describe a size","category":"page"},{"location":"external/metalctl/docs/metalctl_size_describe/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_describe/#","page":"-","title":"-","text":"describe a size","category":"page"},{"location":"external/metalctl/docs/metalctl_size_describe/#","page":"-","title":"-","text":"metalctl size describe <sizeID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_size_describe/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_describe/#","page":"-","title":"-","text":"  -h, --help   help for describe","category":"page"},{"location":"external/metalctl/docs/metalctl_size_describe/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_describe/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_size_describe/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_describe/#","page":"-","title":"-","text":"metalctl size\t - manage sizes","category":"page"},{"location":"external/metalctl/docs/metalctl_size_describe/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_update/#metalctl-size-update-1","page":"-","title":"metalctl size update","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_update/#","page":"-","title":"-","text":"update a size","category":"page"},{"location":"external/metalctl/docs/metalctl_size_update/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_update/#","page":"-","title":"-","text":"update a size","category":"page"},{"location":"external/metalctl/docs/metalctl_size_update/#","page":"-","title":"-","text":"metalctl size update [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_size_update/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_update/#","page":"-","title":"-","text":"  -h, --help   help for update","category":"page"},{"location":"external/metalctl/docs/metalctl_size_update/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_update/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_size_update/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_update/#","page":"-","title":"-","text":"metalctl size\t - manage sizes","category":"page"},{"location":"external/metalctl/docs/metalctl_size_update/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_apply/#metalctl-network-ip-apply-1","page":"-","title":"metalctl network ip apply","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_apply/#","page":"-","title":"-","text":"create/update an IP","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_apply/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_apply/#","page":"-","title":"-","text":"create/update an IP","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_apply/#","page":"-","title":"-","text":"metalctl network ip apply [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_apply/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_apply/#","page":"-","title":"-","text":"  -h, --help   help for apply","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_apply/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_apply/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_apply/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_apply/#","page":"-","title":"-","text":"metalctl network ip\t - manage IPs","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_apply/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_create/#metalctl-image-create-1","page":"-","title":"metalctl image create","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_create/#","page":"-","title":"-","text":"create a image","category":"page"},{"location":"external/metalctl/docs/metalctl_image_create/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_create/#","page":"-","title":"-","text":"create a image","category":"page"},{"location":"external/metalctl/docs/metalctl_image_create/#","page":"-","title":"-","text":"metalctl image create [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_image_create/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_create/#","page":"-","title":"-","text":"  -d, --description string   Description of the image. [required]\n      --features strings     features of the image, can be one of machine|firewall\n  -h, --help                 help for create\n      --id string            ID of the image. [required]\n  -n, --name string          Name of the image. [optional]","category":"page"},{"location":"external/metalctl/docs/metalctl_image_create/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_create/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_image_create/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_create/#","page":"-","title":"-","text":"metalctl image\t - manage images","category":"page"},{"location":"external/metalctl/docs/metalctl_image_create/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_delete/#metalctl-partition-delete-1","page":"-","title":"metalctl partition delete","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_delete/#","page":"-","title":"-","text":"delete a partition","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_delete/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_delete/#","page":"-","title":"-","text":"delete a partition","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_delete/#","page":"-","title":"-","text":"metalctl partition delete <partitionID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_delete/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_delete/#","page":"-","title":"-","text":"  -h, --help   help for delete","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_delete/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_delete/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_delete/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_delete/#","page":"-","title":"-","text":"metalctl partition\t - manage partitions","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_delete/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_create/#metalctl-network-create-1","page":"-","title":"metalctl network create","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_create/#","page":"-","title":"-","text":"create a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_create/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_create/#","page":"-","title":"-","text":"create a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_create/#","page":"-","title":"-","text":"metalctl network create [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_create/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_create/#","page":"-","title":"-","text":"  -d, --description string            description of the network to create. [optional]\n      --destinationprefixes strings   destination prefixes in this network.\n  -h, --help                          help for create\n      --id string                     id of the network to create. [optional]\n  -n, --name string                   name of the network to create. [optional]\n      --nat                           set nat flag of network, if set to true, traffic from this network will be natted.\n  -p, --partition string              partition where this network should exist.\n      --prefixes strings              prefixes in this network.\n      --primary                       set primary flag of network, if set to true, this network is used to start machines there.\n      --underlay                      set underlay flag of network, if set to true, this is used to transport underlay network traffic\n      --vrf int                       vrf of this network\n      --vrfshared                     vrf shared allows multiple networks to share a vrf","category":"page"},{"location":"external/metalctl/docs/metalctl_network_create/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_create/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_create/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_create/#","page":"-","title":"-","text":"metalctl network\t - manage networks","category":"page"},{"location":"external/metalctl/docs/metalctl_network_create/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_allocate/#metalctl-network-ip-allocate-1","page":"-","title":"metalctl network ip allocate","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_allocate/#","page":"-","title":"-","text":"allocate an IP, if non given the next free is allocated, otherwise the given IP is checked for availability.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_allocate/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_allocate/#","page":"-","title":"-","text":"allocate an IP, if non given the next free is allocated, otherwise the given IP is checked for availability.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_allocate/#","page":"-","title":"-","text":"metalctl network ip allocate [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_allocate/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_allocate/#","page":"-","title":"-","text":"  -d, --description string   description of the IP to allocate. [optional]\n  -h, --help                 help for allocate\n  -n, --name string          name of the IP to allocate. [optional]\n      --network string       network from where the IP should be allocated.\n      --project string       project for which the IP should be allocated.\n      --tags strings         tags to attach to the IP.\n      --type string          type of the IP to allocate: ephemeral|static [optional] (default \"ephemeral\")","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_allocate/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_allocate/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_allocate/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_allocate/#","page":"-","title":"-","text":"metalctl network ip\t - manage IPs","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_allocate/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition/#metalctl-partition-1","page":"-","title":"metalctl partition","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition/#","page":"-","title":"-","text":"manage partitions","category":"page"},{"location":"external/metalctl/docs/metalctl_partition/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition/#","page":"-","title":"-","text":"a partition is a group of machines and network which is logically separated from other partitions. Machines have no direct network connections between partitions.","category":"page"},{"location":"external/metalctl/docs/metalctl_partition/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition/#","page":"-","title":"-","text":"  -h, --help   help for partition","category":"page"},{"location":"external/metalctl/docs/metalctl_partition/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_partition/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition/#","page":"-","title":"-","text":"metalctl\t - a cli to manage metal devices.\nmetalctl partition apply\t - create/update a partition\nmetalctl partition capacity\t - show partition capacity\nmetalctl partition create\t - create a partition\nmetalctl partition delete\t - delete a partition\nmetalctl partition describe\t - describe a partition\nmetalctl partition edit\t - edit a partition\nmetalctl partition list\t - list all partitions\nmetalctl partition update\t - update a partition","category":"page"},{"location":"external/metalctl/docs/metalctl_partition/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_off/#metalctl-machine-power-off-1","page":"-","title":"metalctl machine power off","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_off/#","page":"-","title":"-","text":"power off a machine","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_off/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_off/#","page":"-","title":"-","text":"set the machine to power off state, if the machine already was off nothing happens. It will usually take some time to power off the machine, depending on the machine type. Power on will therefore not work if the machine is in the powering off phase.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_off/#","page":"-","title":"-","text":"metalctl machine power off <machine ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_off/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_off/#","page":"-","title":"-","text":"  -h, --help   help for off","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_off/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_off/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_off/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_off/#","page":"-","title":"-","text":"metalctl machine power\t - manage machine power","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_off/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"#Introduction-1","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"metal-stack is a software that provides an API for provisioning and managing physical servers in a data center. To categorize this product, we commonly use the terminology metal-as-a-service (MaaS) or bare metal cloud.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Pages = [\"index.md\"]\nDepth = 5","category":"page"},{"location":"#Key-Properties-1","page":"Introduction","title":"Key Properties","text":"","category":"section"},{"location":"#On-Premise-1","page":"Introduction","title":"On-Premise","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Running on-premise gives you full data sovereignty and usually a better price/performance ratio than with hyperscalers (especially the larger your environment gets). Another advantage of running on-premise is the easier connectivity to existing company networks.","category":"page"},{"location":"#Fast-Provisioning-1","page":"Introduction","title":"Fast Provisioning","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Machine provisioning of bare metal machines should not feel much different from virtual machines. metal-stack is capable of provisioning servers in less than a minute.","category":"page"},{"location":"#No-Ops-1","page":"Introduction","title":"No-Ops","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Part of the metal-stack runs on dedicated switches in your data center. This way, it is possible to automate server inventorization, network configuration and machine lifecycles.","category":"page"},{"location":"#Ready-for-Kubernetes-1","page":"Introduction","title":"Ready for Kubernetes","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Not only does the metal-stack run smoothly on Kubernetes. The major intent of metal-stack has always been to build an elastic machine infrastructure for Kubernetes (K8s) as a service (KaaS). In partnership with the open-source project Gardener, we provision Kubernetes clusters on metal-stack at scale.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"From the perspective of the Gardener, the metal-stack is just another cloud provider. The time savings compared to providing machines and Kubernetes by hand are significant. We actually want to be able to compete with offers of public cloud providers, especially regarding speed and usability.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Of course, you can use metal-stack only for machine provisioning as well.","category":"page"},{"location":"#Open-Source-1","page":"Introduction","title":"Open Source","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"The metal-stack is open source and free of constraints regarding vendors and third-party products. The stack is completely built on open source products. We have an open community actively working on the metal-stack, which can assist you delivering all reasonable features you are gonna need.","category":"page"},{"location":"#Why-Bare-Metal?-1","page":"Introduction","title":"Why Bare Metal?","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Bare metal has several advantages over virtualized environments and overcomes several drawbacks of virtual machines.","category":"page"},{"location":"#Virtual-Environment-Drawbacks-1","page":"Introduction","title":"Virtual Environment Drawbacks","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Spectre and Meltdown can only be mitigated with a \"cluster per tenant\" approach\nMissing isolation of multi-tenant change impacts\nLicensing restrictions\nNoisy-neighbors","category":"page"},{"location":"#Bare-Metal-Advantages-1","page":"Introduction","title":"Bare Metal Advantages","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Guaranteed and fastest possible performance (especially disk i/o)\nReduced stack depth (Host -> VM -> Application vs. Host -> Container)\nReduced attack surface\nLower costs, higher performance\nNo VM live-migrations\nBigger hardware configurations possible (hypervisors have restrictions, e.g. it is not possible to assign all CPUs to a single VM)","category":"page"},{"location":"#Bare-Metal-Drawbacks-1","page":"Introduction","title":"Bare Metal Drawbacks","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Hardware defects have direct impact (should be considered by design) and can not be mitigated by live-migration as in virtual environments\nCapacity planning is more difficult (no resource overbooking possible)\nHigher \"AfA\"-costs","category":"page"},{"location":"#Conclusion-1","page":"Introduction","title":"Conclusion","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"In the end, we have come to the conclusion that most of the drawbacks of bare metal machines can be mitigated best when running K8s on the machines. K8s will take care of high-availability in case of hardware failures and also supervises machine resources. We are certain that the chosen approach can satisfy the needs of the future users to a higher degree than virtual machines could do.","category":"page"},{"location":"#Roadmap-1","page":"Introduction","title":"Roadmap","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Coming soon.","category":"page"},{"location":"external/metalctl/docs/metalctl_project_describe/#metalctl-project-describe-1","page":"-","title":"metalctl project describe","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project_describe/#","page":"-","title":"-","text":"describe a project","category":"page"},{"location":"external/metalctl/docs/metalctl_project_describe/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project_describe/#","page":"-","title":"-","text":"describe a project","category":"page"},{"location":"external/metalctl/docs/metalctl_project_describe/#","page":"-","title":"-","text":"metalctl project describe <projectID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_project_describe/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project_describe/#","page":"-","title":"-","text":"  -h, --help   help for describe","category":"page"},{"location":"external/metalctl/docs/metalctl_project_describe/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project_describe/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_project_describe/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project_describe/#","page":"-","title":"-","text":"metalctl project\t - manage projects","category":"page"},{"location":"external/metalctl/docs/metalctl_project_describe/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"overview/components/#Components-1","page":"Components","title":"Components","text":"","category":"section"},{"location":"overview/components/#","page":"Components","title":"Components","text":"metal-stack is a compound of microservices written in Golang.","category":"page"},{"location":"overview/components/#","page":"Components","title":"Components","text":"This page gives you an overview over which microservices exist, how they communicate with each other and where they are deployed.","category":"page"},{"location":"overview/components/#","page":"Components","title":"Components","text":"Pages = [\"components.md\"]\nDepth = 5","category":"page"},{"location":"overview/components/#Architectural-Overview-1","page":"Components","title":"Architectural Overview","text":"","category":"section"},{"location":"overview/components/#Component-Descriptions-1","page":"Components","title":"Component Descriptions","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_reinstall/#metalctl-machine-reinstall-1","page":"-","title":"metalctl machine reinstall","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_reinstall/#","page":"-","title":"-","text":"reinstalls an already allocated machine","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_reinstall/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_reinstall/#","page":"-","title":"-","text":"reinstalls an already allocated machine. If it is not yet allocated, nothing happens, otherwise only the machine's primary disk is wiped and the new image will subsequently be installed on that device","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_reinstall/#","page":"-","title":"-","text":"metalctl machine reinstall <machine ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_reinstall/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_reinstall/#","page":"-","title":"-","text":"  -d, --description string   description of the reinstallation. [optional]\n  -h, --help                 help for reinstall\n      --image string         id of the image to get installed. [required]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_reinstall/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_reinstall/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_reinstall/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_reinstall/#","page":"-","title":"-","text":"metalctl machine\t - manage machines","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_reinstall/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network/#metalctl-network-1","page":"-","title":"metalctl network","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network/#","page":"-","title":"-","text":"manage networks","category":"page"},{"location":"external/metalctl/docs/metalctl_network/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network/#","page":"-","title":"-","text":"networks for metal.","category":"page"},{"location":"external/metalctl/docs/metalctl_network/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network/#","page":"-","title":"-","text":"  -h, --help   help for network","category":"page"},{"location":"external/metalctl/docs/metalctl_network/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network/#","page":"-","title":"-","text":"metalctl\t - a cli to manage metal devices.\nmetalctl network allocate\t - allocate a network\nmetalctl network apply\t - create/update a network\nmetalctl network create\t - create a network\nmetalctl network delete\t - delete a network\nmetalctl network free\t - free a network\nmetalctl network ip\t - manage IPs\nmetalctl network list\t - list all networks\nmetalctl network prefix\t - prefix management of a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_logs/#metalctl-machine-logs-1","page":"-","title":"metalctl machine logs","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_logs/#","page":"-","title":"-","text":"display machine provisioning logs","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_logs/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_logs/#","page":"-","title":"-","text":"display machine provisioning logs","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_logs/#","page":"-","title":"-","text":"metalctl machine logs <machine ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_logs/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_logs/#","page":"-","title":"-","text":"  -h, --help   help for logs","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_logs/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_logs/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_logs/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_logs/#","page":"-","title":"-","text":"metalctl machine\t - manage machines","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_logs/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"proposals/MEP4/README/#Multi-tenancy-for-the-metal-api-1","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"","category":"section"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"In the past we decided to treat the metal-api as a \"low-level API\", i.e. the API does not know anything about projects and tenants. A user with editor access can for example assign machines to every project he desires, he can see all the machines available and control them. Even though we always wanted to keep open the possibility to just offer bare metal machines to the end-user, the ultimate objective has always been to create an API for Kubernetes clusters. Hence, we tried to keep the metal-api code base as small as possible and we added resource scoping to a \"higher-level API\", the cloud-api. From there, a user would only be able to see his own clusters and IP addresses. The cloud-api is a component that is not open-source.","category":"page"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"The implication is that the metal-api has no multi-tenancy without another layer on top of it that implements resource scoping. We treat clusters as first-class citizens and fulfill the objective that we had from the very beginning: give clusters to the end-users.","category":"page"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"However, as time passed by, things changed: The Metal Stack is becoming an open-source product and we already have promising adopters of our product, who are willing to contribute to Metal Stack. This is a serious chance of making our product better and more successful. It turns out that the decision we made is sufficient for us, but for others it is not.","category":"page"},{"location":"proposals/MEP4/README/#Why-adopters-need-multi-tenancy-in-the-metal-api-1","page":"Multi-tenancy for the metal-api","title":"Why adopters need multi-tenancy in the metal-api","text":"","category":"section"},{"location":"proposals/MEP4/README/#Not-every-adopter-will-be-interested-in-the-cloud-api-1","page":"Multi-tenancy for the metal-api","title":"Not every adopter will be interested in the cloud-api","text":"","category":"section"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"For example, users who want to combine the Metal Stack with Gardener, may not want to hide all of the Gardener's functionality behind the cloud-api in the way we do. They want to use the much more powerful Gardener Dashboard instead. The Gardener itself does not need the cloud-api either. It is a cluster-api by itself. It only needs to utilize our \"low-level API\" and actually expects this API to have multi-tenancy as otherwise every logged in user can create / destroy clusters in every existing project from the Gardener dashboard.","category":"page"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"This makes obvious that, with our decision, we placed an unnecessary obstacle in the way of our adopters: They now need to implement an own layer between the Gardener and the metal-api to provide multi-tenancy. From the Gardener-perspective we strongly differ from other cloud providers in this aspect and it is a matter of time when this will become an issue. When we encourage adopters to implement such interfaces on their own we also partly lose control of our product, we increase divergence.","category":"page"},{"location":"proposals/MEP4/README/#We-cannot-claim-that-Metal-Stack-is-a-multi-tenant-solution-on-our-website-1","page":"Multi-tenancy for the metal-api","title":"We cannot claim that Metal Stack is a multi-tenant solution on our website","text":"","category":"section"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"As the cloud-api is not part of the Metal Stack, the promise of multi-tenancy is only true for our network layer. Without the cloud-api to enable multi-tenancy, the network isolation is currently useless for end-users. Users of the Metal Stack can not self-manage machines, networks and ips without compromising the environment and thus, there is no self-service. We lose a valuable selling point when adopters can not immediately make use of our leading edge network isolation where we put so much effort to.","category":"page"},{"location":"proposals/MEP4/README/#Open-partitions-for-third-party-usage-1","page":"Multi-tenancy for the metal-api","title":"Open partitions for third-party usage","text":"","category":"section"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"If a third-party uses Gardener and our metal-api had multi-tenancy, we would be able to allow a third-party to create clusters with workers in our own partitions. At the moment, this is not possible because the Gardener needs to know the HMAC secrets to create worker nodes, which would compromise our environment. If a thirdy-party knows our HMAC we lose control over the machines of our own tenants.","category":"page"},{"location":"proposals/MEP4/README/#We-do-not-actually-want-to-open-source-the-cloud-api-1","page":"Multi-tenancy for the metal-api","title":"We do not actually want to open-source the cloud-api","text":"","category":"section"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"One could think about solving the multi-tenancy issue by adding machine endpoints to the cloud-api. Gardener would then not consume the metal-api anymore but only the cloud-api.","category":"page"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"This approach would not be ideal. We only want to offer a minimum viable product to adopters. The Gardener does not need a cluster-api as provided by the cloud-api. We want to treat additions on top of the basic stack as enterprise products.","category":"page"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"The cloud-api contains billing endpoints, which are a perfect example for an optional addition of the Metal Stack. For basic usage of the Metal Stack a user does not need billing. Still, billing functionality can be interesting for some enterprises, who are like us, selling the infrastructure to third-parties.","category":"page"},{"location":"proposals/MEP4/README/#Increased-security-for-provider-admins-1","page":"Multi-tenancy for the metal-api","title":"Increased security for provider admins","text":"","category":"section"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"Multi-tenancy in the metal-api also has the potential to limit the damage that a provider administrator can cause by mistake. If an administrator has to acquire project permissions on machine-level we can effectively reduce the damage he can make to this single project.","category":"page"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"Another example would be the automatic provisioning of a Gitlab CI runner used for integration testing (a use case that we have where we do not require the cloud-api). This can easily be done in automated manner with Ansible and the Metal dynamic inventory + modules. However, with Ansible, mistakes in the automation can be made very quickly and if Ansible would only see machines of a dedicated project, this would also reduce damage it can make.","category":"page"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"It is likely that there are more similar use-cases like that to come (maybe even for the storage solution?).","category":"page"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"Also the surface for our Gardener components (metal-ccm, gardener-extension-provider-metal, machine-controller-manager) would be reduced to project scopes.","category":"page"},{"location":"proposals/MEP4/README/#Conclusion-1","page":"Multi-tenancy for the metal-api","title":"Conclusion","text":"","category":"section"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"For these reasons the decision we made is very likely to have a negative impact on the adoption-rate of the Metal Stack and we should think about treating machines, networks and ips as first-class citizens as well. This makes us closer to the offer of hyperscalers. As mentioned in the beginning, all the time we tried to keep the possibility open to just offer bare metal machines. Let's continue with decision by adding multi-tenancy to the metal-api.","category":"page"},{"location":"proposals/MEP4/README/#Required-actions-1","page":"Multi-tenancy for the metal-api","title":"Required actions","text":"","category":"section"},{"location":"proposals/MEP4/README/#Resource-scoping-1","page":"Multi-tenancy for the metal-api","title":"Resource scoping","text":"","category":"section"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"Just as implemented by the cloud-api, resource scoping needs to be added to almost every endpoint of the metal-api:","category":"page"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"Machines / Firewalls\nA user should only be able to view machines / firewalls of the projects he has at least view access to\nA user should only be able to create and destroy machines / firewalls for projects he has at least editor access to Provider-tenants with at least view access can additionally view machines which have no project assignments Provider-tenants with at least editor access can additionally allocate / reserve machines which have no project assignments\nNetworks\nA user should only be able to view networks of the projects he has at least view access to\nA user should only be able to allocate networks of projects he has at least editor access to\nA user should only be able to free networks assigned to projects he has at least editor access to Provider-tenants with at least view access can additionally view networks which have no project assignments Provider-tenants with at least editor access can additionally edit networks which have no project assignments Provider-tenants with at least admin access can additionally create or remove networks which have no project assignments\nIPs\nA user should only be able to view ips of the projects he has at least view access to\nA user should only be able to allocate ips in networks of projects he has at least editor access to\nA user should only be able to free ips assigned to projects he has at least editor access to\nProjects\nA logged in user is able to create projects when he has the permission to create projects\nA user should only be able to view projects where he has at least view access to\nA user should only be able to delete projects where he has admin access to\nPartitions / Images\nOnly provider-admin users can add, delete, update\nAll logged in users can view\nIPMI\nOnly provider-tenants can view machine IPMI data\nEndpoints for internal use\nShould only be accessible with HMAC auth and the HMAC secrets are only known by components of the Metal Stack (mainly for communication between partition and control plane), never for third-party usage","category":"page"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"For all of this we need enhance the database queries with a filter for projects that a user has access to. As we already use a client to the masterdata-api in the metal-api, we can extract project memberships of a logged in user from there.","category":"page"},{"location":"proposals/MEP4/README/#More-permissions-1","page":"Multi-tenancy for the metal-api","title":"More permissions","text":"","category":"section"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"We do not only need kaas-... permissions in the LDAP but also maas-. This way we can differentiate between permissions for the cloud-api and permissions for the metal-api.","category":"page"},{"location":"proposals/MEP4/README/#Service-account-tokens-/-technical-users-1","page":"Multi-tenancy for the metal-api","title":"Service account tokens / technical users","text":"","category":"section"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"We need to provide the possibility for users to obtain access tokens to use for technical purposes (CI, third-party tooling like Gardener, ...).","category":"page"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"We do not have this functionality yet, but it would also become a necessity for the cloud-api at some point in the future.","category":"page"},{"location":"proposals/MEP4/README/#Cloud-API-1","page":"Multi-tenancy for the metal-api","title":"Cloud API","text":"","category":"section"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"Project creation and deletion again have to be moved back into the metal-api, this also frees adopters from the need to write an own API in order to manage projects- The cloud-api will (again) only proxy project endpoints through to the metal-api\nDo not point the secret bindings to a the shared provider secret in a partition. Create an individual provider-secret for the logged in tenant. The Gardener needs to use this tenant-specific provider secret to talk to the metal-api, do not give the Gardener HMAC access anymore.\nThe provider secret partition mapping can be removed from the cloud-api config and from the deployment","category":"page"},{"location":"contributing/#Contributing-1","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"This document describes the way we want to contribute code to the projects of metal-stack, which are hosted on github.com/metal-stack.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"The document is meant to be understood as a general guideline for contributions, but not as burden to be placed on a developer. Use your best judgment when contributing code. Try to be as clean and precise as possible when writing code and try to make your code as maintainable and understandable as possible for other people.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Even if it should go without saying, we live an open culture of discussion, in which everybody is welcome to participate. We treat every contribution with respect and objectiveness with the general aim to write software of quality.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"If you want, feel free to propose changes to this document in a pull request.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Pages = [\"contributing.md\"]\nDepth = 5","category":"page"},{"location":"contributing/#How-Can-I-Contribute?-1","page":"Contributing","title":"How Can I Contribute?","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Open a Github issue in the project you would like to contribute. Within the issue, your idea can be discussed. It is also possible to directly create a pull request when the set of changes is relatively small.","category":"page"},{"location":"contributing/#Pull-Requests-1","page":"Contributing","title":"Pull Requests","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"The process described here has several goals:","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Maintain quality\nEnable a sustainable system to review contributions\nEnable documented and reproducible addition of contributions","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Create a meaningful issue describing the WHY? of your contribution\nCreate a repository fork within the context of that issue.\nCreate a Draft Pull Request to the master branch of the target repository.\nDevelop, document and test your contribution (try not to solve more than one issue in a single pull request)\nAsk for merging your contribution by removing the draft marker\nIf code owners are defined, try to assign the request to a code owner","category":"page"},{"location":"contributing/#General-Objectives-1","page":"Contributing","title":"General Objectives","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"This section contains language-agnostic topics that all metal-stack projects are trying to follow.","category":"page"},{"location":"contributing/#Code-Ownership-1","page":"Contributing","title":"Code Ownership","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"The code base is owned by the entire team and every member is allowed to contribute changes to any of the projects. This is considered as collective code ownership (see https://martinfowler.com/bliki/CodeOwnership.html).","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"As a matter of fact, there are persons in a project, which already have experience with the sources. These are defined directly in the repository's CODEOWNERS file. If you want to merge changes into the master branch, it is advisable to include code owners into the proecess of discussion and merging.","category":"page"},{"location":"contributing/#Microservices-1","page":"Contributing","title":"Microservices","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"One major ambition of metal-stack is to follow the idea of microservices. This way, we want to achieve that we can","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"adapt to changes faster than with monolithic architectures,\nbe free of restrictions due to certain choices of technology,\nleverage powerful traits of cloud infrastructures (e.g. high-scalability, high-availability, ...).","category":"page"},{"location":"contributing/#Programming-Languages-1","page":"Contributing","title":"Programming Languages","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"We are generally open to write code in any language that fits best to the function of the software. However, we encourage golang to be the main language of metal-stack as we think that it makes development faster when not establishing too many different languages in our architecture. Reason for this is that we are striving for consistent behavior of the microservices, similar to what has been described for the Twelve-Factor App (see https://12factor.net/). We help enforcing unified behavior by allowing a small layer of shared code for every programming language. We will refer to this shared code as \"libraries\" for the rest of this document.","category":"page"},{"location":"contributing/#Artifacts-1","page":"Contributing","title":"Artifacts","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Artifacts are always produced by a CI process (Github Actions).","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Docker images are published on Docker Hub using the metalstack user.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Binary artifacts or images are uploaded to GKE buckets.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"When building Docker images, please consider our build tool docker-make or the specific docker-make action respectively.","category":"page"},{"location":"contributing/#APIs-1","page":"Contributing","title":"APIs","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"We are currently making use of Swagger when we exposing traditional REST APIs for end-users. This helps us with being technology-agnostic as we can generate clients in almost any language using go-swagger. Swagger additionally simplifies the documentation of our APIs.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Most APIs though are not required to be user-facing but are of technical nature. These are preferred to be implemented using grpc.","category":"page"},{"location":"contributing/#Versioning-1","page":"Contributing","title":"Versioning","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Artifacts are versioned by tagging the respective repository with a tag starting with the letter v. After the letter, there stands a valid semantic version.","category":"page"},{"location":"contributing/#Documentation-1","page":"Contributing","title":"Documentation","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"In order to make it easier for others to understand a project, we document general information and usage instructions in a README.md in any project.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"In addition to that, we document a microservice in the docs repository. The documentation should contain the reasoning why this service exists and why it was being implemented the way it was being implemented. The aim of this procedure is to reduce the time for contributors to comprehend architectural decisions that were made during the process of writing the software and to clarify the general purpose of this service in the entire context of the software.","category":"page"},{"location":"contributing/#Guidelines-1","page":"Contributing","title":"Guidelines","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"This chapter describes general guidelines on how to develop and contribute code for a certain programming language.","category":"page"},{"location":"contributing/#Golang-1","page":"Contributing","title":"Golang","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Development follows the official guide to:","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Write clear, idiomatic Go code: https://golang.org/doc/effective_go.html\nLearn from mistakes that must not be repeated: https://github.com/golang/go/wiki/CodeReviewComments\nApply appropriate names to your artifacts:\nhttps://talks.golang.org/2014/names.slide#1\nhttps://blog.golang.org/package-names\nhttps://golang.org/doc/effective_go.html#names\nEnable others to understand the reasoning of non-trivial code sequences by applying a meaningful documentation.","category":"page"},{"location":"contributing/#Development-Decisions-1","page":"Contributing","title":"Development Decisions","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Dependency Management by using Go modules\nBuild and Test Automation by using GNU Make.\nEnd-user APIs should consider using go-swagger and Go-Restful Technical APIs should consider using grpc","category":"page"},{"location":"contributing/#Libraries-1","page":"Contributing","title":"Libraries","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"metal-stack maintains several libraries that you should utilize in your project in order unify common behavior. Some of these projects are:","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"metal-go\nmetal-lib","category":"page"},{"location":"contributing/#Error-Handling-with-Generated-Swagger-Clients-1","page":"Contributing","title":"Error Handling with Generated Swagger Clients","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"From the server-side you should ensure that you are returning the common error json struct in case of an error as defined in the metal-lib/httperrors. Ensure you are using go-restful >= v2.9.1 and go-restful-openapi >= v0.13.1 (allows default responses with error codes other than 200).","category":"page"},{"location":"contributing/#Documentation-2","page":"Contributing","title":"Documentation","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"We want to share knowledge and keep things simple. If things cannot kept simple we want enable everybody to understand them by:","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Document in short sentences (See https://github.com/golang/go/wiki/CodeReviewComments#comment-sentences).\nDo not explain the HOW (this is already documented by your code and documenting the obvious is considered a defect).\nExplain the WHY. Add a \"to\" in your documentation line to force yourself to explain the reasonning (e.g.  \"<THE WHAT> to <THE TO>\").","category":"page"},{"location":"contributing/#Python-1","page":"Contributing","title":"Python","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Development follows the official guide to:","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Style Guide for Python Code (PEP 8): https://www.python.org/dev/peps/pep-0008/\nThe use of an IDE like PyCharm helps to write compliant code easily\nConsider setuptools for packaging\nIf you want to add a Python microservice to the mix, consider pyinstaller on Alpine to achieve small image sizes","category":"page"},{"location":"external/metalctl/docs/metalctl_image_apply/#metalctl-image-apply-1","page":"-","title":"metalctl image apply","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_apply/#","page":"-","title":"-","text":"create/update a image","category":"page"},{"location":"external/metalctl/docs/metalctl_image_apply/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_apply/#","page":"-","title":"-","text":"create/update a image","category":"page"},{"location":"external/metalctl/docs/metalctl_image_apply/#","page":"-","title":"-","text":"metalctl image apply [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_image_apply/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_apply/#","page":"-","title":"-","text":"  -h, --help   help for apply","category":"page"},{"location":"external/metalctl/docs/metalctl_image_apply/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_apply/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_image_apply/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_apply/#","page":"-","title":"-","text":"metalctl image\t - manage images","category":"page"},{"location":"external/metalctl/docs/metalctl_image_apply/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_list/#metalctl-network-list-1","page":"-","title":"metalctl network list","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_list/#","page":"-","title":"-","text":"list all networks","category":"page"},{"location":"external/metalctl/docs/metalctl_network_list/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_list/#","page":"-","title":"-","text":"list all networks","category":"page"},{"location":"external/metalctl/docs/metalctl_network_list/#","page":"-","title":"-","text":"metalctl network list [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_list/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_list/#","page":"-","title":"-","text":"      --destination-prefixes strings   destination prefixes to filter, use it like: --destination-prefixes prefix1,prefix2.\n  -h, --help                           help for list\n      --id string                      ID to filter [optional]\n      --name string                    name to filter [optional]\n      --nat                            nat to filter [optional]\n      --parent string                  parent network to filter [optional]\n      --partition string               partition to filter [optional]\n      --prefixes strings               prefixes to filter, use it like: --prefixes prefix1,prefix2.\n      --privatesuper                   privatesuper to filter [optional]\n      --project string                 project to filter [optional]\n      --underlay                       underlay to filter [optional]\n      --vrf int                        vrf to filter [optional]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_list/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_list/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_list/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_list/#","page":"-","title":"-","text":"metalctl network\t - manage networks","category":"page"},{"location":"external/metalctl/docs/metalctl_network_list/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_delete/#metalctl-network-delete-1","page":"-","title":"metalctl network delete","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_delete/#","page":"-","title":"-","text":"delete a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_delete/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_delete/#","page":"-","title":"-","text":"delete a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_delete/#","page":"-","title":"-","text":"metalctl network delete <networkID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_delete/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_delete/#","page":"-","title":"-","text":"  -h, --help   help for delete","category":"page"},{"location":"external/metalctl/docs/metalctl_network_delete/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_delete/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_delete/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_delete/#","page":"-","title":"-","text":"metalctl network\t - manage networks","category":"page"},{"location":"external/metalctl/docs/metalctl_network_delete/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image/#metalctl-image-1","page":"-","title":"metalctl image","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image/#","page":"-","title":"-","text":"manage images","category":"page"},{"location":"external/metalctl/docs/metalctl_image/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image/#","page":"-","title":"-","text":"os images available to be installed on machines.","category":"page"},{"location":"external/metalctl/docs/metalctl_image/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image/#","page":"-","title":"-","text":"  -h, --help   help for image","category":"page"},{"location":"external/metalctl/docs/metalctl_image/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_image/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image/#","page":"-","title":"-","text":"metalctl\t - a cli to manage metal devices.\nmetalctl image apply\t - create/update a image\nmetalctl image create\t - create a image\nmetalctl image delete\t - delete a image\nmetalctl image describe\t - describe a image\nmetalctl image edit\t - edit a image\nmetalctl image list\t - list all images\nmetalctl image update\t - update a image","category":"page"},{"location":"external/metalctl/docs/metalctl_image/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_console/#metalctl-machine-console-1","page":"-","title":"metalctl machine console","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_console/#","page":"-","title":"-","text":"console access to a machine, machine must be created with a ssh public key, authentication is done with your private key. In case the machine did not register properly a direct ipmi console access is available via the –ipmi flag. This is only for administrative access.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_console/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_console/#","page":"-","title":"-","text":"console access to a machine, machine must be created with a ssh public key, authentication is done with your private key. In case the machine did not register properly a direct ipmi console access is available via the –ipmi flag. This is only for administrative access.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_console/#","page":"-","title":"-","text":"metalctl machine console <machine ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_console/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_console/#","page":"-","title":"-","text":"  -h, --help                  help for console\n      --ipmi                  use ipmitool with direct network access (admin only).\n      --ipmipassword string   overwrite ipmi password (admin only).\n      --ipmiuser string       overwrite ipmi user (admin only).\n  -p, --sshidentity string    SSH key file, if not given the default ssh key will be used if present [optional].","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_console/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_console/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_console/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_console/#","page":"-","title":"-","text":"metalctl machine\t - manage machines","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_console/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project/#metalctl-project-1","page":"-","title":"metalctl project","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project/#","page":"-","title":"-","text":"manage projects","category":"page"},{"location":"external/metalctl/docs/metalctl_project/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project/#","page":"-","title":"-","text":"a project groups multiple networks for a tenant","category":"page"},{"location":"external/metalctl/docs/metalctl_project/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project/#","page":"-","title":"-","text":"  -h, --help   help for project","category":"page"},{"location":"external/metalctl/docs/metalctl_project/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_project/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project/#","page":"-","title":"-","text":"metalctl\t - a cli to manage metal devices.\nmetalctl project describe\t - describe a project\nmetalctl project list\t - list all projects","category":"page"},{"location":"external/metalctl/docs/metalctl_project/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_delete/#metalctl-size-delete-1","page":"-","title":"metalctl size delete","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_delete/#","page":"-","title":"-","text":"delete a size","category":"page"},{"location":"external/metalctl/docs/metalctl_size_delete/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_delete/#","page":"-","title":"-","text":"delete a size","category":"page"},{"location":"external/metalctl/docs/metalctl_size_delete/#","page":"-","title":"-","text":"metalctl size delete <sizeID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_size_delete/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_delete/#","page":"-","title":"-","text":"  -h, --help   help for delete","category":"page"},{"location":"external/metalctl/docs/metalctl_size_delete/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_delete/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_size_delete/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_delete/#","page":"-","title":"-","text":"metalctl size\t - manage sizes","category":"page"},{"location":"external/metalctl/docs/metalctl_size_delete/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"api_docs/#API-Documentation-1","page":"API Documentation","title":"API Documentation","text":"","category":"section"},{"location":"api_docs/#","page":"API Documentation","title":"API Documentation","text":"In this section you will find links to the API documentation of metal-stack components.","category":"page"},{"location":"api_docs/#metal-api-1","page":"API Documentation","title":"metal-api","text":"","category":"section"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#Dev-Instructions-1","page":"Dev Instructions","title":"Dev Instructions","text":"","category":"section"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#","page":"Dev Instructions","title":"Dev Instructions","text":"To simplify developing changes for the metal-api, metal-hammer and metal-core, it is possible to use development artifacts from within the mini-lab.","category":"page"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#","page":"Dev Instructions","title":"Dev Instructions","text":"Also start the mini-lab with a kind cluster, a metal-api instance as well as some vagrant VMs with two leaf switches and two machine skeletons. Additionally a Caddy and a Docker registry container is started. The former serves a prebuilt metal-hammer-initrd image, the latter holds prebuilt metalstack/metal-api and metalstack/metal-core images, which will be used as replacements for the official ones.","category":"page"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#","page":"Dev Instructions","title":"Dev Instructions","text":"Thus you have to clone the following metal-stack repositories:","category":"page"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#Prerequisites:-1","page":"Dev Instructions","title":"Prerequisites:","text":"","category":"section"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#","page":"Dev Instructions","title":"Dev Instructions","text":"git clone https://github.com/metal-stack/metal-hammer ../metal-hammer\ngit clone https://github.com/metal-stack/metal-api ../metal-api\ngit clone https://github.com/metal-stack/metal-core ../metal-core","category":"page"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#Start/Stop:-1","page":"Dev Instructions","title":"Start/Stop:","text":"","category":"section"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#","page":"Dev Instructions","title":"Dev Instructions","text":"Build metal-hammer-initrd, metalstack/metal-api and metalstack/metal-core images and (re)start a minimal metal-stack system as well as a Caddy container that servers the former one and a Docker registry that holds the latter ones:","category":"page"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#","page":"Dev Instructions","title":"Dev Instructions","text":"make dev","category":"page"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#","page":"Dev Instructions","title":"Dev Instructions","text":"Stop and cleanup a potentially running metal-stack development system as well as the local Caddy and Docker registry containers:","category":"page"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#","page":"Dev Instructions","title":"Dev Instructions","text":"make down","category":"page"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#Exchange-images-at-run-time:-1","page":"Dev Instructions","title":"Exchange images at run-time:","text":"","category":"section"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#","page":"Dev Instructions","title":"Dev Instructions","text":"Reload metal-hammer-initrd:","category":"page"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#","page":"Dev Instructions","title":"Dev Instructions","text":"make bulid-hammer-initrd","category":"page"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#","page":"Dev Instructions","title":"Dev Instructions","text":"Reload metal-api:","category":"page"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#","page":"Dev Instructions","title":"Dev Instructions","text":"make reload-api","category":"page"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#","page":"Dev Instructions","title":"Dev Instructions","text":"Reload metal-core:","category":"page"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#","page":"Dev Instructions","title":"Dev Instructions","text":"make reload-core","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_list/#metalctl-machine-list-1","page":"-","title":"metalctl machine list","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_list/#","page":"-","title":"-","text":"list all machines","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_list/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_list/#","page":"-","title":"-","text":"list all machines with almost all properties in tabular form.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_list/#","page":"-","title":"-","text":"metalctl machine list [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_list/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_list/#","page":"-","title":"-","text":"  -h, --help               help for list\n      --hostname string    allocation hostname to filter [optional]\n      --id string          ID to filter [optional]\n      --image string       allocation image to filter [optional]\n      --mac string         mac to filter [optional]\n      --name string        allocation name to filter [optional]\n      --partition string   partition to filter [optional]\n      --project string     allocation project to filter [optional]\n      --size string        size to filter [optional]\n      --tags strings       tags to filter, use it like: --tags \"tag1,tag2\" or --tags \"tag3\".","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_list/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_list/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_list/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_list/#","page":"-","title":"-","text":"metalctl machine\t - manage machines","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_list/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_list/#metalctl-image-list-1","page":"-","title":"metalctl image list","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_list/#","page":"-","title":"-","text":"list all images","category":"page"},{"location":"external/metalctl/docs/metalctl_image_list/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_list/#","page":"-","title":"-","text":"list all images","category":"page"},{"location":"external/metalctl/docs/metalctl_image_list/#","page":"-","title":"-","text":"metalctl image list [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_image_list/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_list/#","page":"-","title":"-","text":"  -h, --help   help for list","category":"page"},{"location":"external/metalctl/docs/metalctl_image_list/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_list/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_image_list/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_list/#","page":"-","title":"-","text":"metalctl image\t - manage images","category":"page"},{"location":"external/metalctl/docs/metalctl_image_list/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"installation/preparations/#Buying-Hardware-1","page":"Preparations","title":"Buying Hardware","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_update/#metalctl-partition-update-1","page":"-","title":"metalctl partition update","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_update/#","page":"-","title":"-","text":"update a partition","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_update/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_update/#","page":"-","title":"-","text":"update a partition","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_update/#","page":"-","title":"-","text":"metalctl partition update [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_update/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_update/#","page":"-","title":"-","text":"  -h, --help   help for update","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_update/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_update/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_update/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_update/#","page":"-","title":"-","text":"metalctl partition\t - manage partitions","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_update/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_ipmi/#metalctl-machine-ipmi-1","page":"-","title":"metalctl machine ipmi","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_ipmi/#","page":"-","title":"-","text":"display ipmi details of the machine, if no machine ID is given all ipmi addresses are returned.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_ipmi/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_ipmi/#","page":"-","title":"-","text":"display ipmi details of the machine, if no machine ID is given all ipmi addresses are returned.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_ipmi/#","page":"-","title":"-","text":"metalctl machine ipmi [<machine ID>] [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_ipmi/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_ipmi/#","page":"-","title":"-","text":"  -h, --help               help for ipmi\n      --hostname string    allocation hostname to filter [optional]\n      --id string          ID to filter [optional]\n      --image string       allocation image to filter [optional]\n      --mac string         mac to filter [optional]\n      --name string        allocation name to filter [optional]\n      --partition string   partition to filter [optional]\n      --project string     allocation project to filter [optional]\n      --size string        size to filter [optional]\n      --tags strings       tags to filter, use it like: --tags \"tag1,tag2\" or --tags \"tag3\".","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_ipmi/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_ipmi/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_ipmi/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_ipmi/#","page":"-","title":"-","text":"metalctl machine\t - manage machines","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_ipmi/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_whoami/#metalctl-whoami-1","page":"-","title":"metalctl whoami","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_whoami/#","page":"-","title":"-","text":"shows current user","category":"page"},{"location":"external/metalctl/docs/metalctl_whoami/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_whoami/#","page":"-","title":"-","text":"shows the current user, that will be used to authenticate commands.","category":"page"},{"location":"external/metalctl/docs/metalctl_whoami/#","page":"-","title":"-","text":"metalctl whoami [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_whoami/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_whoami/#","page":"-","title":"-","text":"  -h, --help   help for whoami","category":"page"},{"location":"external/metalctl/docs/metalctl_whoami/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_whoami/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_whoami/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_whoami/#","page":"-","title":"-","text":"metalctl\t - a cli to manage metal devices.","category":"page"},{"location":"external/metalctl/docs/metalctl_whoami/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"installation/troubleshoot/#Troubleshooting-1","page":"Troubleshoot","title":"Troubleshooting","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch_detail/#metalctl-switch-detail-1","page":"-","title":"metalctl switch detail","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch_detail/#","page":"-","title":"-","text":"switch details","category":"page"},{"location":"external/metalctl/docs/metalctl_switch_detail/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch_detail/#","page":"-","title":"-","text":"switch details","category":"page"},{"location":"external/metalctl/docs/metalctl_switch_detail/#","page":"-","title":"-","text":"metalctl switch detail [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_switch_detail/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch_detail/#","page":"-","title":"-","text":"  -F, --filter string   filter for site, rack, ID\n  -h, --help            help for detail","category":"page"},{"location":"external/metalctl/docs/metalctl_switch_detail/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch_detail/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_switch_detail/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch_detail/#","page":"-","title":"-","text":"metalctl switch\t - manage switches","category":"page"},{"location":"external/metalctl/docs/metalctl_switch_detail/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_destroy/#metalctl-firewall-destroy-1","page":"-","title":"metalctl firewall destroy","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_destroy/#","page":"-","title":"-","text":"destroy a firewall","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_destroy/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_destroy/#","page":"-","title":"-","text":"destroy a firewall and destroy all data stored on the local disks. Once destroyed it is back for usage by other projects. A destroyed firewall can not restored anymore","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_destroy/#","page":"-","title":"-","text":"metalctl firewall destroy <firewall ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_destroy/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_destroy/#","page":"-","title":"-","text":"  -h, --help   help for destroy","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_destroy/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_destroy/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_destroy/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_destroy/#","page":"-","title":"-","text":"metalctl firewall\t - manage firewalls","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_destroy/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_update/#metalctl-image-update-1","page":"-","title":"metalctl image update","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_update/#","page":"-","title":"-","text":"update a image","category":"page"},{"location":"external/metalctl/docs/metalctl_image_update/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_update/#","page":"-","title":"-","text":"update a image","category":"page"},{"location":"external/metalctl/docs/metalctl_image_update/#","page":"-","title":"-","text":"metalctl image update [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_image_update/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_update/#","page":"-","title":"-","text":"  -h, --help   help for update","category":"page"},{"location":"external/metalctl/docs/metalctl_image_update/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_update/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_image_update/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_update/#","page":"-","title":"-","text":"metalctl image\t - manage images","category":"page"},{"location":"external/metalctl/docs/metalctl_image_update/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power/#metalctl-machine-power-1","page":"-","title":"metalctl machine power","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power/#","page":"-","title":"-","text":"manage machine power","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power/#","page":"-","title":"-","text":"manage machine power","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power/#","page":"-","title":"-","text":"  -h, --help   help for power","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power/#","page":"-","title":"-","text":"metalctl machine\t - manage machines\nmetalctl machine power bios\t - boot a machine into BIOS\nmetalctl machine power off\t - power off a machine\nmetalctl machine power on\t - power on a machine\nmetalctl machine power reset\t - power reset a machine","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"proposals/MEP2/README/#Two-Factor-Authentication-1","page":"Two Factor Authentication","title":"Two Factor Authentication","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_delete/#metalctl-image-delete-1","page":"-","title":"metalctl image delete","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_delete/#","page":"-","title":"-","text":"delete a image","category":"page"},{"location":"external/metalctl/docs/metalctl_image_delete/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_delete/#","page":"-","title":"-","text":"delete a image","category":"page"},{"location":"external/metalctl/docs/metalctl_image_delete/#","page":"-","title":"-","text":"metalctl image delete <imageID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_image_delete/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_delete/#","page":"-","title":"-","text":"  -h, --help   help for delete","category":"page"},{"location":"external/metalctl/docs/metalctl_image_delete/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_delete/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_image_delete/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_delete/#","page":"-","title":"-","text":"metalctl image\t - manage images","category":"page"},{"location":"external/metalctl/docs/metalctl_image_delete/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update/#metalctl-update-1","page":"-","title":"metalctl update","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update/#","page":"-","title":"-","text":"update the program","category":"page"},{"location":"external/metalctl/docs/metalctl_update/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update/#","page":"-","title":"-","text":"update the program","category":"page"},{"location":"external/metalctl/docs/metalctl_update/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update/#","page":"-","title":"-","text":"  -h, --help   help for update","category":"page"},{"location":"external/metalctl/docs/metalctl_update/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_update/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update/#","page":"-","title":"-","text":"metalctl\t - a cli to manage metal devices.\nmetalctl update check\t - check for update of the program\nmetalctl update do\t - do the update of the program\nmetalctl update dump\t - dump the version update file","category":"page"},{"location":"external/metalctl/docs/metalctl_update/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_login/#metalctl-login-1","page":"-","title":"metalctl login","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_login/#","page":"-","title":"-","text":"login user and receive token","category":"page"},{"location":"external/metalctl/docs/metalctl_login/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_login/#","page":"-","title":"-","text":"login and receive token that will be used to authenticate commands.","category":"page"},{"location":"external/metalctl/docs/metalctl_login/#","page":"-","title":"-","text":"metalctl login [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_login/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_login/#","page":"-","title":"-","text":"  -h, --help        help for login\n      --printOnly   If true, the token is printed to stdout","category":"page"},{"location":"external/metalctl/docs/metalctl_login/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_login/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_login/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_login/#","page":"-","title":"-","text":"metalctl\t - a cli to manage metal devices.","category":"page"},{"location":"external/metalctl/docs/metalctl_login/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_markdown/#metalctl-markdown-1","page":"-","title":"metalctl markdown","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_markdown/#","page":"-","title":"-","text":"create markdown documentation","category":"page"},{"location":"external/metalctl/docs/metalctl_markdown/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_markdown/#","page":"-","title":"-","text":"create markdown documentation","category":"page"},{"location":"external/metalctl/docs/metalctl_markdown/#","page":"-","title":"-","text":"metalctl markdown [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_markdown/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_markdown/#","page":"-","title":"-","text":"  -h, --help   help for markdown","category":"page"},{"location":"external/metalctl/docs/metalctl_markdown/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_markdown/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_markdown/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_markdown/#","page":"-","title":"-","text":"metalctl\t - a cli to manage metal devices.","category":"page"},{"location":"external/metalctl/docs/metalctl_markdown/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/mini-lab/README/#mini-lab-1","page":"mini-lab","title":"mini-lab","text":"","category":"section"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"Small lab to setup the metal-stack locally. Starts two leaf switches and the metal-api to try metalctl and the creation of machines.","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"This requires:","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"vagrant == 2.2.9 with vagrant-libvirt plugin >= 0.1.2 for running the switch and machine VMs\ndocker and docker-compose for using containerized ansible and metalctl and helm\nkvm as hypervisor for the VMs\novmf to have a uefi firmware for virtual machines\nkind == v0.8.1 to start the metal control-plane on a kubernetes cluster v1.18.2\n(optional) haveged to have enough random entropy - only needed if the PXE process does not work","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"Known limitations:","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"to keep the demo small there is no EVPN\nmachine restart and destroy does not work becaues we can not change the boot order via IPMI in the lab easily (virtual-bmc could, but it's buggy)\nlogin to the machines is only possible with virsh console","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"# Install vagrant\nwget https://releases.hashicorp.com/vagrant/2.2.7/vagrant_2.2.7_x86_64.deb\napt-get install ./vagrant_2.2.7_x86_64.deb docker.io qemu-kvm virt-manager ovmf net-tools libvirt-dev\n\n# Ensure that your user is member of the group \"libvirt\"\nusermod -G libvirt -a ${USER}\n\n# Install libvirt plugin for vagrant\nvagrant plugin install vagrant-libvirt\n\n# Install kind from https://github.com/kubernetes-sigs/kind/releases","category":"page"},{"location":"external/mini-lab/README/#Try-it-out-1","page":"mini-lab","title":"Try it out","text":"","category":"section"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"Start the mini-lab with a kind cluster, a metal-api instance as well as some vagrant VMs with two leaf switches and two machine skeletons.","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"make up","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"Two machines in status PXE booting are visible with metalctl machine ls","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"docker-compose run metalctl machine ls\n\nID                                          LAST EVENT   WHEN     AGE  HOSTNAME  PROJECT  SIZE          IMAGE  PARTITION\ne0ab02d2-27cd-5a5e-8efc-080ba80cf258        PXE Booting  3s\n2294c949-88f6-5390-8154-fa53d93a3313        PXE Booting  5s","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"Wait until the machines reach the waiting state","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"docker-compose run metalctl machine ls\n\nID                                          LAST EVENT   WHEN     AGE  HOSTNAME  PROJECT  SIZE          IMAGE  PARTITION\ne0ab02d2-27cd-5a5e-8efc-080ba80cf258        Waiting      8s                               v1-small-x86         vagrant\n2294c949-88f6-5390-8154-fa53d93a3313        Waiting      8s                               v1-small-x86         vagrant","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"Create a machine with","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"make machine","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"or the hard way with","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"docker-compose run metalctl network allocate \\\n        --partition vagrant \\\n        --project 00000000-0000-0000-0000-000000000000 \\\n        --name vagrant","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"Lookup the network ID and run","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"docker-compose run metalctl machine create \\\n        --description test \\\n        --name machine \\\n        --hostname machine \\\n        --project 00000000-0000-0000-0000-000000000000 \\\n        --partition vagrant \\\n        --image ubuntu-19.10 \\\n        --size v1-small-x86 \\\n        --networks <network-ID>","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"See the installation process in action","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"virsh console metal_machine01/02\n...\nUbuntu 19.10 machine ttyS0\n\nmachine login:","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"One machine is now installed and has status \"Phoned Home\"","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"docker-compose run metalctl machine ls\nID                                          LAST EVENT   WHEN   AGE     HOSTNAME  PROJECT                               SIZE          IMAGE         PARTITION\ne0ab02d2-27cd-5a5e-8efc-080ba80cf258        Phoned Home  2s     21s     machine   00000000-0000-0000-0000-000000000000  v1-small-x86  Ubuntu 19.10  vagrant\n2294c949-88f6-5390-8154-fa53d93a3313        Waiting      8s                                                             v1-small-x86                vagrant","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"Login with user name metal and the console password from","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"docker-compose run metalctl machine describe e0ab02d2-27cd-5a5e-8efc-080ba80cf258 | grep password\n\nconsolepassword: ...","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"To remove the kind cluster and the vagrant boxes, run","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"make cleanup","category":"page"},{"location":"external/mini-lab/README/#Reinstall-machine-1","page":"mini-lab","title":"Reinstall machine","text":"","category":"section"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"Reinstall a machine with","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"docker-compose run metalctl machine reinstall \\\n        --image ubuntu-19.10 \\\n        e0ab02d2-27cd-5a5e-8efc-080ba80cf258","category":"page"},{"location":"external/mini-lab/README/#Remove-machine-1","page":"mini-lab","title":"Remove machine","text":"","category":"section"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"Remove a machine with","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"docker-compose run metalctl machine rm e0ab02d2-27cd-5a5e-8efc-080ba80cf258","category":"page"},{"location":"external/mini-lab/README/#Development-of-metal-api,-metal-hammer-and-metal-core-1","page":"mini-lab","title":"Development of metal-api, metal-hammer and metal-core","text":"","category":"section"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"To simplify developing changes for the metal-api, metal-hammer and metal-core, it is possible to use development artifacts from within the mini-lab. See the dev instructions for more details.","category":"page"},{"location":"overview/kubernetes/#Kubernetes-Integration-1","page":"Kubernetes Integration","title":"Kubernetes Integration","text":"","category":"section"},{"location":"overview/kubernetes/#","page":"Kubernetes Integration","title":"Kubernetes Integration","text":"With the help of the Gardener project, metal-stack can be used for spinning up Kubernetes clusters quickly and reliably on bare metal machines.","category":"page"},{"location":"overview/kubernetes/#","page":"Kubernetes Integration","title":"Kubernetes Integration","text":"To make this happen, we implemented a couple of components, which are described here.","category":"page"},{"location":"overview/kubernetes/#Kubernetes-related-components-1","page":"Kubernetes Integration","title":"Kubernetes related components","text":"","category":"section"},{"location":"overview/kubernetes/#metal-ccm-1","page":"Kubernetes Integration","title":"metal-ccm","text":"","category":"section"},{"location":"overview/kubernetes/#","page":"Kubernetes Integration","title":"Kubernetes Integration","text":"CCM stands for cloud-controller-manager and is the bridge between Kubernetes and a cloud-provider.","category":"page"},{"location":"overview/kubernetes/#","page":"Kubernetes Integration","title":"Kubernetes Integration","text":"We implemented the cloud provider interface in the metal-ccm repository. With the help of the controller we provide metal-stack-specific properties for Kubernetes clusters, e.g. load balancer configuration through MetalLB or node properties.","category":"page"},{"location":"overview/kubernetes/#csi-lvm-1","page":"Kubernetes Integration","title":"csi-lvm","text":"","category":"section"},{"location":"overview/kubernetes/#","page":"Kubernetes Integration","title":"Kubernetes Integration","text":"When dealing with local storage, it can be pretty useful not to write directly on to the host system using hostpath. Instead, we wrote a storage plugin that enables your pods to write to logical volumes.","category":"page"},{"location":"overview/kubernetes/#","page":"Kubernetes Integration","title":"Kubernetes Integration","text":"Checkout the csi-lvm repository here.","category":"page"},{"location":"overview/kubernetes/#Gardener-related-components-1","page":"Kubernetes Integration","title":"Gardener related components","text":"","category":"section"},{"location":"overview/kubernetes/#gardener-extension-provider-metal-1","page":"Kubernetes Integration","title":"gardener-extension-provider-metal","text":"","category":"section"},{"location":"overview/kubernetes/#os-metal-extension-1","page":"Kubernetes Integration","title":"os-metal-extension","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_lock/#metalctl-machine-lock-1","page":"-","title":"metalctl machine lock","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_lock/#","page":"-","title":"-","text":"lock a machine","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_lock/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_lock/#","page":"-","title":"-","text":"when a machine is locked, it can not be destroyed, to destroy a machine you must first remove the lock from that machine with –remove","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_lock/#","page":"-","title":"-","text":"metalctl machine lock <machine ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_lock/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_lock/#","page":"-","title":"-","text":"  -d, --description string   description of the reason for the lock.\n  -h, --help                 help for lock\n  -r, --remove               remove the lock.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_lock/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_lock/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_lock/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_lock/#","page":"-","title":"-","text":"metalctl machine\t - manage machines","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_lock/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_apply/#metalctl-network-apply-1","page":"-","title":"metalctl network apply","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_apply/#","page":"-","title":"-","text":"create/update a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_apply/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_apply/#","page":"-","title":"-","text":"create/update a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_apply/#","page":"-","title":"-","text":"metalctl network apply [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_apply/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_apply/#","page":"-","title":"-","text":"  -h, --help   help for apply","category":"page"},{"location":"external/metalctl/docs/metalctl_network_apply/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_apply/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_apply/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_apply/#","page":"-","title":"-","text":"metalctl network\t - manage networks","category":"page"},{"location":"external/metalctl/docs/metalctl_network_apply/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix_add/#metalctl-network-prefix-add-1","page":"-","title":"metalctl network prefix add","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix_add/#","page":"-","title":"-","text":"add a prefix to a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix_add/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix_add/#","page":"-","title":"-","text":"add a prefix to a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix_add/#","page":"-","title":"-","text":"metalctl network prefix add <networkid> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix_add/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix_add/#","page":"-","title":"-","text":"  -h, --help            help for add\n      --prefix string   prefix to add.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix_add/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix_add/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix_add/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix_add/#","page":"-","title":"-","text":"metalctl network prefix\t - prefix management of a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix_add/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_context/#metalctl-context-1","page":"-","title":"metalctl context","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_context/#","page":"-","title":"-","text":"manage metalctl context","category":"page"},{"location":"external/metalctl/docs/metalctl_context/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_context/#","page":"-","title":"-","text":"context defines the backend to which metalctl talks to.","category":"page"},{"location":"external/metalctl/docs/metalctl_context/#","page":"-","title":"-","text":"metalctl context <name> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_context/#Examples-1","page":"-","title":"Examples","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_context/#","page":"-","title":"-","text":"\n~/.metalctl/config.yaml\n---\ncurrent: prod\ncontexts:\n  prod:\n    url: https://api.metal-stack.io/metal\n    issuer_url: https://dex.metal-stack.io/dex\n    client_id: metal_client\n    client_secret: 456\n  dev:\n    url: https://api.metal-stack.dev/metal\n    issuer_url: https://dex.metal-stack.dev/dex\n    client_id: metal_client\n    client_secret: 123\n...\n","category":"page"},{"location":"external/metalctl/docs/metalctl_context/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_context/#","page":"-","title":"-","text":"  -h, --help   help for context","category":"page"},{"location":"external/metalctl/docs/metalctl_context/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_context/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_context/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_context/#","page":"-","title":"-","text":"metalctl\t - a cli to manage metal devices.","category":"page"},{"location":"external/metalctl/docs/metalctl_context/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_create/#metalctl-size-create-1","page":"-","title":"metalctl size create","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_create/#","page":"-","title":"-","text":"create a size","category":"page"},{"location":"external/metalctl/docs/metalctl_size_create/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_create/#","page":"-","title":"-","text":"create a size","category":"page"},{"location":"external/metalctl/docs/metalctl_size_create/#","page":"-","title":"-","text":"metalctl size create [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_size_create/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_create/#","page":"-","title":"-","text":"  -d, --description string   Description of the size. [required]\n  -h, --help                 help for create\n      --id string            ID of the size. [required]\n      --max int              min value of given size constraint type. [required]\n      --min int              min value of given size constraint type. [required]\n  -n, --name string          Name of the size. [optional]\n      --type string          type of constraints. [required]","category":"page"},{"location":"external/metalctl/docs/metalctl_size_create/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_create/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_size_create/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_create/#","page":"-","title":"-","text":"metalctl size\t - manage sizes","category":"page"},{"location":"external/metalctl/docs/metalctl_size_create/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"overview/hardware/#Hardware-Support-1","page":"Hardware Support","title":"Hardware Support","text":"","category":"section"},{"location":"overview/hardware/#","page":"Hardware Support","title":"Hardware Support","text":"In order to keep the automation and maintenance overhead small, we do not encourage highly heterogeneous environments. A lot of different vendors and server models will probably take a lot of time until having them integrated smoothly. From experience we can tell that the interfaces for controlling hardware via BMCs are typically very inconsistent between hardware vendors and even between server models. Therefore, we encourage adopters to use modular racks with a smaller amount of machine types and scale out horizontally with more racks when resources become scarce.","category":"page"},{"location":"overview/hardware/#","page":"Hardware Support","title":"Hardware Support","text":"We came up with a repository called go-hal, which includes the interface that is required for the metal-stack to support a machine vendor. If you plan to implement support for other vendors, please check out this repository and contribute back your efforts in order to make the community benefit from extended vendor support as well.","category":"page"},{"location":"overview/hardware/#Servers-1","page":"Hardware Support","title":"Servers","text":"","category":"section"},{"location":"overview/hardware/#","page":"Hardware Support","title":"Hardware Support","text":"At the moment we support the following server types:","category":"page"},{"location":"overview/hardware/#","page":"Hardware Support","title":"Hardware Support","text":"Vendor Series Model\nSupermicro TODO TODO","category":"page"},{"location":"overview/hardware/#Switches-1","page":"Hardware Support","title":"Switches","text":"","category":"section"},{"location":"overview/hardware/#","page":"Hardware Support","title":"Hardware Support","text":"At the moment we support the following switch types:","category":"page"},{"location":"overview/hardware/#","page":"Hardware Support","title":"Hardware Support","text":"Vendor Series Model\nEdgecore TODO TODO","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_describe/#metalctl-firewall-describe-1","page":"-","title":"metalctl firewall describe","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_describe/#","page":"-","title":"-","text":"describe a firewall","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_describe/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_describe/#","page":"-","title":"-","text":"describe a firewall in a very detailed form with all properties.","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_describe/#","page":"-","title":"-","text":"metalctl firewall describe <firewall ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_describe/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_describe/#","page":"-","title":"-","text":"  -h, --help   help for describe","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_describe/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_describe/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_describe/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_describe/#","page":"-","title":"-","text":"metalctl firewall\t - manage firewalls","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_describe/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall/#metalctl-firewall-1","page":"-","title":"metalctl firewall","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall/#","page":"-","title":"-","text":"manage firewalls","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall/#","page":"-","title":"-","text":"metal firewalls are bare metal firewalls.","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall/#","page":"-","title":"-","text":"  -h, --help   help for firewall","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall/#","page":"-","title":"-","text":"metalctl\t - a cli to manage metal devices.\nmetalctl firewall create\t - create a firewall\nmetalctl firewall describe\t - describe a firewall\nmetalctl firewall destroy\t - destroy a firewall\nmetalctl firewall list\t - list all firewalls\nmetalctl firewall reserve\t - reserve a firewall","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_edit/#metalctl-partition-edit-1","page":"-","title":"metalctl partition edit","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_edit/#","page":"-","title":"-","text":"edit a partition","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_edit/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_edit/#","page":"-","title":"-","text":"edit a partition","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_edit/#","page":"-","title":"-","text":"metalctl partition edit <partitionID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_edit/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_edit/#","page":"-","title":"-","text":"  -h, --help   help for edit","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_edit/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_edit/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_edit/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_edit/#","page":"-","title":"-","text":"metalctl partition\t - manage partitions","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_edit/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_do/#metalctl-update-do-1","page":"-","title":"metalctl update do","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_do/#","page":"-","title":"-","text":"do the update of the program","category":"page"},{"location":"external/metalctl/docs/metalctl_update_do/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_do/#","page":"-","title":"-","text":"do the update of the program","category":"page"},{"location":"external/metalctl/docs/metalctl_update_do/#","page":"-","title":"-","text":"metalctl update do [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_update_do/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_do/#","page":"-","title":"-","text":"  -h, --help   help for do","category":"page"},{"location":"external/metalctl/docs/metalctl_update_do/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_do/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_update_do/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_do/#","page":"-","title":"-","text":"metalctl update\t - update the program","category":"page"},{"location":"external/metalctl/docs/metalctl_update_do/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"quickstart/#Getting-Started-1","page":"Quickstart","title":"Getting Started","text":"","category":"section"},{"location":"quickstart/#","page":"Quickstart","title":"Quickstart","text":"Before starting to buy any hardware, you should try out the metal-stack on your notebook and familiarize with the capabilities of metal-stack.","category":"page"},{"location":"quickstart/#","page":"Quickstart","title":"Quickstart","text":"For this, we made the mini-lab.","category":"page"},{"location":"quickstart/#","page":"Quickstart","title":"Quickstart","text":"The mini-lab is a fully virtual setup and is supposed to be run locally on a single machine. For this reason, the setup was slightly simplified in comparison to full-blown setups on real hardware. However, the lab should help to understand all ideas behind the metal-stack.","category":"page"},{"location":"quickstart/#","page":"Quickstart","title":"Quickstart","text":"Get your hands dirty and follow the guide on how to get on with the mini-lab here.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify_off/#metalctl-machine-identify-off-1","page":"-","title":"metalctl machine identify off","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify_off/#","page":"-","title":"-","text":"power off the machine chassis identify LED","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify_off/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify_off/#","page":"-","title":"-","text":"set the machine chassis identify LED to off state","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify_off/#","page":"-","title":"-","text":"metalctl machine identify off <machine ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify_off/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify_off/#","page":"-","title":"-","text":"  -d, --description string   description of the reason for chassis identify LED turn-off. (default \"Triggered by metalctl\")\n  -h, --help                 help for off","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify_off/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify_off/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify_off/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify_off/#","page":"-","title":"-","text":"metalctl machine identify\t - manage machine chassis identify LED power","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify_off/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_reset/#metalctl-machine-power-reset-1","page":"-","title":"metalctl machine power reset","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_reset/#","page":"-","title":"-","text":"power reset a machine","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_reset/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_reset/#","page":"-","title":"-","text":"reset the machine power. This will ensure a power cycle.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_reset/#","page":"-","title":"-","text":"metalctl machine power reset <machine ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_reset/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_reset/#","page":"-","title":"-","text":"  -h, --help   help for reset","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_reset/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_reset/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_reset/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_reset/#","page":"-","title":"-","text":"metalctl machine power\t - manage machine power","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_reset/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_capacity/#metalctl-partition-capacity-1","page":"-","title":"metalctl partition capacity","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_capacity/#","page":"-","title":"-","text":"show partition capacity","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_capacity/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_capacity/#","page":"-","title":"-","text":"show partition capacity","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_capacity/#","page":"-","title":"-","text":"metalctl partition capacity [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_capacity/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_capacity/#","page":"-","title":"-","text":"  -h, --help   help for capacity","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_capacity/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_capacity/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_capacity/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_capacity/#","page":"-","title":"-","text":"metalctl partition\t - manage partitions","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_capacity/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_try/#metalctl-size-try-1","page":"-","title":"metalctl size try","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_try/#","page":"-","title":"-","text":"try a specific hardware spec and give the chosen size back","category":"page"},{"location":"external/metalctl/docs/metalctl_size_try/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_try/#","page":"-","title":"-","text":"try a specific hardware spec and give the chosen size back","category":"page"},{"location":"external/metalctl/docs/metalctl_size_try/#","page":"-","title":"-","text":"metalctl size try [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_size_try/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_try/#","page":"-","title":"-","text":"  -C, --cores int32          Cores of the hardware to try (default 1)\n  -h, --help                 help for try\n  -M, --memory string        Memory of the hardware to try, can be given in bytes or any human readable size spec\n  -S, --storagesize string   Total storagesize of the hardware to try, can be given in bytes or any human readable size spec","category":"page"},{"location":"external/metalctl/docs/metalctl_size_try/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_try/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_size_try/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_try/#","page":"-","title":"-","text":"metalctl size\t - manage sizes","category":"page"},{"location":"external/metalctl/docs/metalctl_size_try/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"overview/networking/#Networking-1","page":"Networking","title":"Networking","text":"","category":"section"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"We spent a lot of time on implementing the network. The final result is a layer-3-only networking approach providing full tenant-separation, BGP, routing-to-the-host and load balancing via the routing protocol (with ECMP).","category":"page"},{"location":"proposals/MEP3/README/#Machine-Re-Installation-1","page":"Machine Re-Installation","title":"Machine Re-Installation","text":"","category":"section"},{"location":"proposals/MEP3/README/#","page":"Machine Re-Installation","title":"Machine Re-Installation","text":"In the current metal-api only machine installations are possible, performing a machine upgrade is only possible by creating a new machine and delete the old one. This has the drawback that in case a lot of data is stored on the local disks, a full restore of the original data must be performed.","category":"page"},{"location":"proposals/MEP3/README/#","page":"Machine Re-Installation","title":"Machine Re-Installation","text":"To prevent this, we will introduce a new metal-api endpoint to reinstall the machine with a new image, without actually deleting the data stored on the additional hard disks.","category":"page"},{"location":"proposals/MEP3/README/#","page":"Machine Re-Installation","title":"Machine Re-Installation","text":"Storage is a difficult task to get right and reliable. A short analysis of our different storage requirements lead to 3 different scenarios.","category":"page"},{"location":"proposals/MEP3/README/#","page":"Machine Re-Installation","title":"Machine Re-Installation","text":"Storage for the etcd pvs in the seed cluster of every partition.   This is the most important storage in our setup because these etcd pods serve as configuration backend for all customer kubernetes clusters. If they fail, the cluster is down. However gardener deploys a backup and restore sidecar into the etcd pod of every customer kubernetes control plane, and if this sidecar detects a corrupt or missing etcd database file(s) it starts automatic restore from the configured backup location. This will take some minutes. If for example a node dies, and gardener creates a new node instead, the csi-lvm created pv is not present on that node. Kubernetes will not schedule the missing etcd pod on this node because it has a local PV configured and is therefore tainted to run only on that node. To let kubernetes create that pod anyhow, someone has to either remove the taint, or delete the pod. If this is done, the pod starts and the restore of the etcd data can start as well. You can see this is a bit too complicated and will take the customer cluster down for a while (not measured yet but in the range of 5-10 minutes).\nStorage in customer clusters.   This was not promised in 2020. We have a intermediate solution with the provisioning of csi-lvm by default into all customer clusters. Albeit this is only local storage and will get deleted if a node dies.\nS3 Storage.   We have two possibilities to cope with storage:\nIn place update of the OS with a daemonset   This will be fast and simple, but might fail because the packages being installed are broken right now, or a filesystem gets full, or any other failure you can think of during a os update. Another drawback is that metal-api does not reflect the updated os image.\nmetal-api get a machine reinstall endpoint   With this approach we leverage from existing and already proven mechanisms. Reinstall must keep all data except the sata-dom. Gardener currently is not able to do an update with this approach because it can only do rolling updates. Therefore a additional osupdatestrategy has to be implemented for metal and other providers in gardener to be able to leverage the metal reinstall on the same machineID approach.","category":"page"},{"location":"proposals/MEP3/README/#","page":"Machine Re-Installation","title":"Machine Re-Installation","text":"If reinstall is implemented, we should focus on the same technology for all scenarios and put ceph via rook.io into the kubernetes clusters as additional StorageClass. It has to be checked whether to use the raw disk or a PV as the underlay block device where ceph stores its data.","category":"page"},{"location":"proposals/MEP3/README/#API-and-behavior-1","page":"Machine Re-Installation","title":"API and behavior","text":"","category":"section"},{"location":"proposals/MEP3/README/#","page":"Machine Re-Installation","title":"Machine Re-Installation","text":"The API will get an new endpoint \"reinstall\" this endpoint takes two arguments:","category":"page"},{"location":"proposals/MEP3/README/#","page":"Machine Re-Installation","title":"Machine Re-Installation","text":"machineID\nimage","category":"page"},{"location":"proposals/MEP3/README/#","page":"Machine Re-Installation","title":"Machine Re-Installation","text":"No other aspects of the machine can be modified during the re-installation. All data stored in the existing allocation will be preserved, only the image will be modified. Once this endpoint was called, the machine will get a reboot signal with the boot order set to PXE instead of HDD and the network interfaces on the leaf are set to PXE as well. Then the normal installation process starts:","category":"page"},{"location":"proposals/MEP3/README/#","page":"Machine Re-Installation","title":"Machine Re-Installation","text":"unchanged: PXE boot with metal-hammer\nchanged: metal-hammer first checks with the machineID in the metal-api (through metal-core) if there is already a allocation present\nchanged: if a allocation is present and the allocation has set reinstall: true, wipe disk is only executed for the root disk, all other disks are untouched.\nunchanged: the specified image is downloaded and burned, /install.sh is executed\nunchanged: successful installation is reported back, network is set the the vrf, boot order is set to HDD.\nunchanged: distribution kernel is booted via kexec","category":"page"},{"location":"proposals/MEP3/README/#","page":"Machine Re-Installation","title":"Machine Re-Installation","text":"We can see that the allocation requires one additional parameter: reinstall and metal-hammer must check for already existing allocation at an earlier stage.","category":"page"},{"location":"proposals/MEP3/README/#","page":"Machine Re-Installation","title":"Machine Re-Installation","text":"Components which requires modifications (first guess):","category":"page"},{"location":"proposals/MEP3/README/#","page":"Machine Re-Installation","title":"Machine Re-Installation","text":"metal-hammer:\ncheck for allocation present earlier\nevaluation of reinstall flag set\nwipe of disks depends on that flag\nBonus: move configuration of disk layout and primary disk detection algorithm (PDDA) from metal-hammer into metal-api.   metal-api MUST reject reinstallation if the disk found by PDDA does not have the /etc/metal directory!\nmetal-core:\nprobably nothing\nmetal-api:\nnew endpoint /machine/reinstall\nadd Reinstall bool to data model of allocation\nmake sure to reset Reinstall after reinstallation to prevent endless reinstallation loop\nmetalctl:\nimplement reinstall\nmetal-go:\nimplement reinstall\ngardener (longterm):\nadd the OSUpgradeStrategy reinstall","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_create/#metalctl-machine-create-1","page":"-","title":"metalctl machine create","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_create/#","page":"-","title":"-","text":"create a machine","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_create/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_create/#","page":"-","title":"-","text":"create a new machine with the given operating system, the size and a project.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_create/#","page":"-","title":"-","text":"metalctl machine create [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_create/#Examples-1","page":"-","title":"Examples","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_create/#","page":"-","title":"-","text":"machine create can be done in two different ways:\n\n- default with automatic allocation:\n\nmetalctl machine create \\\n\t--hostname worker01 \\\n\t--name worker \\\n\t--image ubuntu-18.04 \\ # query available with: metalctl image list\n\t--size t1-small-x86 \\  # query available with: metalctl size list\n\t--partition test \\     # query available with: metalctl partition list\n\t--project cluster01 \\\n\t--sshpublickey \"@~/.ssh/id_rsa.pub\"\n\n- for metal administration with reserved machines:\n\nreserve a machine you want to allocate:\n\nmetalctl machine reserve 00000000-0000-0000-0000-0cc47ae54694 --description \"blocked for maintenance\"\n\nallocate this machine:\n\nmetalctl machine create \\\n\t--hostname worker01 \\\n\t--name worker \\\n\t--image ubuntu-18.04 \\ # query available with: metalctl image list\n\t--project cluster01 \\\n\t--sshpublickey \"@~/.ssh/id_rsa.pub\" \\\n\t--id 00000000-0000-0000-0000-0cc47ae54694\n\nafter you do not want to use this machine exclusive, remove the reservation:\n\nmetalctl machine reserve 00000000-0000-0000-0000-0cc47ae54694 --remove\n\nOnce created the machine installation can not be modified anymore.\n\n","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_create/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_create/#","page":"-","title":"-","text":"  -d, --description string    Description of the machine to create. [optional]\n  -h, --help                  help for create\n  -H, --hostname string       Hostname of the machine. [required]\n  -I, --id string             ID of a specific machine to allocate, if given, size and partition are ignored. Need to be set to reserved (--reserve) state before.\n  -i, --image string          OS Image to install. [required]\n      --ips strings           Sets the machine's IP address. Usage: [--ips[=IPV4-ADDRESS[,IPV4-ADDRESS]...]]...\n                              IPV4-ADDRESS specifies the IPv4 address to add.\n                              It can only be used in conjunction with --networks.\n  -n, --name string           Name of the machine. [optional]\n      --networks strings      Adds a network. Usage: [--networks NETWORK[:MODE][,NETWORK[:MODE]]...]...\n                              NETWORK specifies the name or id of an existing network.\n                              MODE cane be omitted or one of:\n                              \tauto\tIP address is automatically acquired from the given network\n                              \tnoauto\tIP address for the given network must be provided via --ips\n  -S, --partition string      partition/datacenter where the machine is created. [required, except for reserved machines]\n  -P, --project string        Project where the machine should belong to. [required]\n  -s, --size string           Size of the machine. [required, except for reserved machines]\n  -p, --sshpublickey string   SSH public key for access via ssh and console. [optional]\n                              Can be either the public key as string, or pointing to the public key file to use e.g.: \"@~/.ssh/id_rsa.pub\".\n                              If ~/.ssh/id_rsa.pub is present it will be picked as default.\n      --tags strings          tags to add to the machine, use it like: --tags \"tag1,tag2\" or --tags \"tag3\".\n      --userdata string       cloud-init.io compatible userdata. [optional]\n                              Can be either the userdata as string, or pointing to the userdata file to use e.g.: \"@/tmp/userdata.cfg\".","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_create/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_create/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_create/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_create/#","page":"-","title":"-","text":"metalctl machine\t - manage machines","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_create/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"}]
}
