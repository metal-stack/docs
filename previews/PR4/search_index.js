var documenterSearchIndex = {"docs":
[{"location":"external/metalctl/docs/metalctl_machine_identify/#metalctl-machine-identify-1","page":"-","title":"metalctl machine identify","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify/#","page":"-","title":"-","text":"manage machine chassis identify LED power","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify/#","page":"-","title":"-","text":"manage machine chassis identify LED power","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify/#","page":"-","title":"-","text":"  -h, --help   help for identify","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify/#","page":"-","title":"-","text":"metalctl machine\t - manage machines\nmetalctl machine identify off\t - power off the machine chassis identify LED\nmetalctl machine identify on\t - power on the machine chassis identify LED","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_create/#metalctl-partition-create-1","page":"-","title":"metalctl partition create","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_create/#","page":"-","title":"-","text":"create a partition","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_create/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_create/#","page":"-","title":"-","text":"create a partition","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_create/#","page":"-","title":"-","text":"metalctl partition create [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_create/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_create/#","page":"-","title":"-","text":"      --cmdline string       kernel commandline for the metal-hammer in the partition. [required]\n  -d, --description string   Description of the partition. [required]\n  -h, --help                 help for create\n      --id string            ID of the partition. [required]\n      --imageurl string      initrd for the metal-hammer in the partition. [required]\n      --kernelurl string     kernel url for the metal-hammer in the partition. [required]\n      --mgmtserver string    management server address in the partition. [required]\n  -n, --name string          Name of the partition. [optional]","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_create/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_create/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_create/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_create/#","page":"-","title":"-","text":"metalctl partition\t - manage partitions","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_create/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/csi-lvm/example/rook/README/#Example-files-for-installation-of-rook-on-csi-lvm-backed-PVCs-1","page":"-","title":"Example files for installation of rook on csi-lvm backed PVCs","text":"","category":"section"},{"location":"external/csi-lvm/example/rook/README/#","page":"-","title":"-","text":"install csi-lvm (see ../../README.md)\ninstall rook operator\ninstall rook cluster\ninstall rook storage classes\ninstall basic psp for the mysql/wordpress example (if needed)\ninstall a single mysql instance on a rook-ceph-block ReadWriteOnce PVC\ninstall cephfs filesystem\ninstall a wordpress deployment with 3 replicas on a cephfs shared ReadWriteMany filesytem","category":"page"},{"location":"external/csi-lvm/example/rook/README/#","page":"-","title":"-","text":"kubectl apply -f example/rook/common.yaml\nkubectl apply -f example/rook/operator.yaml\nkubectl apply -f example/rook/cluster-on-lvm.yaml\nkubectl apply -f example/rook/storageclass-rbd.yaml\nkubectl apply -f example/rook/storageclass-cephfs.yaml\nkubectl apply -f example/rook/psp.yaml\nkubectl apply -f example/rook/mysql.yaml\nkubectl apply -f example/rook/filesystem.yaml\nkubectl apply -f example/rook/wordpress.yaml","category":"page"},{"location":"external/metalctl/docs/metalctl_image_edit/#metalctl-image-edit-1","page":"-","title":"metalctl image edit","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_edit/#","page":"-","title":"-","text":"edit a image","category":"page"},{"location":"external/metalctl/docs/metalctl_image_edit/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_edit/#","page":"-","title":"-","text":"edit a image","category":"page"},{"location":"external/metalctl/docs/metalctl_image_edit/#","page":"-","title":"-","text":"metalctl image edit <imageID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_image_edit/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_edit/#","page":"-","title":"-","text":"  -h, --help   help for edit","category":"page"},{"location":"external/metalctl/docs/metalctl_image_edit/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_edit/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_image_edit/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_edit/#","page":"-","title":"-","text":"metalctl image\t - manage images","category":"page"},{"location":"external/metalctl/docs/metalctl_image_edit/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl/#metalctl-1","page":"-","title":"metalctl","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl/#","page":"-","title":"-","text":"a cli to manage metal devices.","category":"page"},{"location":"external/metalctl/docs/metalctl/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl/#","page":"-","title":"-","text":"a cli to manage metal devices.","category":"page"},{"location":"external/metalctl/docs/metalctl/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n  -h, --help                   help for metalctl\n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl/#","page":"-","title":"-","text":"metalctl completion\t - Generates bash completion scripts\nmetalctl context\t - manage metalctl context\nmetalctl firewall\t - manage firewalls\nmetalctl image\t - manage images\nmetalctl login\t - login user and receive token\nmetalctl machine\t - manage machines\nmetalctl markdown\t - create markdown documentation\nmetalctl network\t - manage networks\nmetalctl partition\t - manage partitions\nmetalctl project\t - manage projects\nmetalctl size\t - manage sizes\nmetalctl switch\t - manage switches\nmetalctl update\t - update the program\nmetalctl whoami\t - shows current user\nmetalctl zsh-completion\t - Generates Z shell completion scripts","category":"page"},{"location":"external/metalctl/docs/metalctl/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix/#metalctl-network-prefix-1","page":"-","title":"metalctl network prefix","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix/#","page":"-","title":"-","text":"prefix management of a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix/#","page":"-","title":"-","text":"prefix management of a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix/#","page":"-","title":"-","text":"  -h, --help   help for prefix","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix/#","page":"-","title":"-","text":"metalctl network\t - manage networks\nmetalctl network prefix add\t - add a prefix to a network\nmetalctl network prefix remove\t - remove a prefix from a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"installation/monitoring/#Monitoring-the-metal-stack-1","page":"Monitoring","title":"Monitoring the metal-stack","text":"","category":"section"},{"location":"installation/monitoring/#","page":"Monitoring","title":"Monitoring","text":"We are currently working on providing the sources of our monitoring deployment for public usage. Please come back later.","category":"page"},{"location":"external/metalctl/docs/metalctl_image_describe/#metalctl-image-describe-1","page":"-","title":"metalctl image describe","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_describe/#","page":"-","title":"-","text":"describe a image","category":"page"},{"location":"external/metalctl/docs/metalctl_image_describe/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_describe/#","page":"-","title":"-","text":"describe a image","category":"page"},{"location":"external/metalctl/docs/metalctl_image_describe/#","page":"-","title":"-","text":"metalctl image describe <imageID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_image_describe/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_describe/#","page":"-","title":"-","text":"  -h, --help   help for describe","category":"page"},{"location":"external/metalctl/docs/metalctl_image_describe/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_describe/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_image_describe/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_describe/#","page":"-","title":"-","text":"metalctl image\t - manage images","category":"page"},{"location":"external/metalctl/docs/metalctl_image_describe/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_check/#metalctl-update-check-1","page":"-","title":"metalctl update check","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_check/#","page":"-","title":"-","text":"check for update of the program","category":"page"},{"location":"external/metalctl/docs/metalctl_update_check/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_check/#","page":"-","title":"-","text":"check for update of the program","category":"page"},{"location":"external/metalctl/docs/metalctl_update_check/#","page":"-","title":"-","text":"metalctl update check [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_update_check/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_check/#","page":"-","title":"-","text":"  -h, --help   help for check","category":"page"},{"location":"external/metalctl/docs/metalctl_update_check/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_check/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_update_check/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_check/#","page":"-","title":"-","text":"metalctl update\t - update the program","category":"page"},{"location":"external/metalctl/docs/metalctl_update_check/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"overview/architecture/#Architecture-1","page":"Architecture","title":"Architecture","text":"","category":"section"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"The metal-stack is a compound of microservices predominantly written in Golang.","category":"page"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"This page gives you an overview over which microservices exist, how they communicate with each other and where they are deployed.","category":"page"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"Pages = [\"architecture.md\"]\nDepth = 5","category":"page"},{"location":"overview/architecture/#Metal-Control-Plane-1","page":"Architecture","title":"Metal Control Plane","text":"","category":"section"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"The foundation of the metal-stack is what we call the metal control plane. The metal control plane is typically deployed in a Kubernetes cluster and is not strictly required to run inside your data center. It even makes sense not to place the metal control plane in the same failure domain with your servers that you are going to manage with the metal-stack. The control plane does not depend on Kubernetes functionality, such that deployments to other target platforms are theoretically possible.","category":"page"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"The control plane contains of a couple of essential microservices for the metal-stack including:","category":"page"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"metal-api The API to manage and control plane resources like machines, switches, operating system images, machine sizes, networks, IP addresses and more. The exposed API is an old-fashioned REST API with different authentication methods. The metal-api stores the state of these entities in a RethinkDB database. The metal-api also has its own IP address management (go-ipam), which writes IP address and network allocations into a PostgreSQL backend.\nmasterdata-api Manages tenant and project entities, which can be described as entities used for company-specific resource separation and grouping. Having these \"higher level entities\" managed by a separate microservice was a design choice that allows to re-use the information by other microservices without having them to know the metal-api at all. The masterdata gets persisted in a dedicated PostgreSQL database.\nmetal-console Provides access for users to a machine's serial console via SSH. It can be seen as an optional component.\nnsq A message queuing system (not developed by the metal-stack) used for decoupling microservices and distributing tasks.","category":"page"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"The following figure shows the relationships between these microservices:","category":"page"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"(Image: Metal Control Plane)","category":"page"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"Figure 1: The metal control plane deployed in a Kubernetes environment with an ingress-controller exposing additional services via service exposal.","category":"page"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"Some notes on this picture:","category":"page"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"Users can access the metal-api with the CLI client called metalctl.\nYou can programmatically access the metal-api using the metal-go client library.\nOur databases are wrapped in a specially built backup-restore-sidecar, which is consistently backing up the databases in external blob storage.\nThe metal-api can be scaled out using replicas when being deployed in Kubernetes.","category":"page"},{"location":"overview/architecture/#Partitions-1","page":"Architecture","title":"Partitions","text":"","category":"section"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"A partition is our term for describing hardware in the data center controlled by the metal-stack with all the hardware participating in the same network topology. Being in the same network topology causes the hardware inside a partition to build a failure domain. Even though the network topology for running the metal-stack is required to be redundant by design, you should consider setting up multiple partitions. With multiple partitions it is possible for users to maintain availability of their applications by spreading them across the partitions. Installing partitions in multiple data centers would be even better in regards of fail-safe application performance, which would even tolerate the meltdown of a data center.","category":"page"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"tip: Tip\nIn our setups, we encode the name of a region and a zone name into our partition names. However, we do not have dedicated entities for regions and zones in our APIs.A region is a geographic area in which data centers are located.Zones are geographic locations in a region usually in different fire compartments. Regions can consist of several zones.A zone can consist of several partitions. Usually, a partition spans a rack or a group of racks.","category":"page"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"We strongly advise to group your hardware into racks that are specifically assembled for running metal-stack. When using modular rack design, the amount of compute resources of a partition can easily be extended by adding more racks to your partition.","category":"page"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"info: Info\nThe hardware that we currently support to be placed inside a partition is described in the hardware document.","category":"page"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"info: Info\nHow large you can grow your partitions and how the network topology inside a partition looks like is described in the networking document.","category":"page"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"The metal-stack has microservices running on the leaf switches in a partition. For this reason, your leaf switches are required to run a Linux distribution that you have full access to. Additionally, there are a servers not added to the pool of user-allocatable machines, which are instead required for running metal-stack and we call them management servers. TODO: Explain management network, management firewall and switch plane.","category":"page"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"The microservices running inside a partition are:","category":"page"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"metal-hammer (runs on a server when not allocated by user, often referred to as discovery image) An initrd, which is booted up in PXE mode, preparing and registering a machine. When a user allocates a machine, the metal-hammer will install the target operating system on this machine and kexec into the new operating system kernel.\nmetal-core (runs on leaf switches) Dynamically configures the leaf switch from information provided by the metal-api. It also proxies requests from the metal-hammer to the metal-api including publishment of machine lifecycle events and machine registration requests.\npixiecore (runs on leaf switches, not developed by metal-stack) Provides the capability of PXE booting servers in the PXE boot network.\nbmc-proxy (runs on management servers) Belongs to the metal-console, allowing user access to the machine's serial console. It can be seen as an optional component.\nipmi-catcher (runs on management servers) Reports the ip addresses that are leased to ipmi devices together with their machine uuids to the metal-api. This provides machine discovery in the partition machines and keeps all IPMI interface access data up-to-date.","category":"page"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"(Image: Partition)","category":"page"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"Figure 2: Simplified illustration of services running inside a partition.","category":"page"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"Some notes on this picture:","category":"page"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"This figure is slightly simplified. The switch plane consists of spine switches, exit routers, management firewalls and a bastion router with more software components deployed on these entities. Please refer to the networking document to see the full overview over the switch plane.\nThe image-cache is an optional component consisting of multiple services to allow caching images from the public image store inside a partition. This brings increased download performance on machine allocation and increases independence of a partition on the internet connection.","category":"page"},{"location":"overview/architecture/#Complete-View-1","page":"Architecture","title":"Complete View","text":"","category":"section"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"The following figure shows several partitions connected to a single metal control plane. Of course, it is also possible to have multiple metal control planes, which can be useful for staging.","category":"page"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"(Image: metal-stack)","category":"page"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"Figure 3: Reduced view on the communication between the metal control plane and multiple partitions.","category":"page"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"Some notes on this picture:","category":"page"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"By design, a partition only has very few ports open for incoming-connections from the internet. This contributes to a smaller attack surface and higher security of your infrastructure.\nWith the help of NSQ, it is not required to have connections from the metal control plane to the metal-core. The metal-core instances register at the message bus and can then consume partition-specfic topics, e.g. when a machine deletion gets issued by a user.","category":"page"},{"location":"overview/architecture/#Machine-Provisioning-Sequence-1","page":"Architecture","title":"Machine Provisioning Sequence","text":"","category":"section"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"The following sequence diagram illustrates some of the main principles of the machine provisioning lifecycle.","category":"page"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"(Image: provisioning sequence)","category":"page"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"Figure 4: Sequence diagram of the machine provisioning sequence.","category":"page"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"Here is a video showing a screen capture of a machine's serial console while running the metal-hammer in \"wait mode\". Then, a user allocates the machine and the metal-hammer installs the target operating system and the machine boots into the new operating system kernel via the kexec system call.","category":"page"},{"location":"overview/architecture/#","page":"Architecture","title":"Architecture","text":"<div class=\"video-container\">\n<iframe src=\"https://www.youtube-nocookie.com/embed/3oEhInk6BaU\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>","category":"page"},{"location":"roadmap/#Roadmap-1","page":"Roadmap","title":"Roadmap","text":"","category":"section"},{"location":"roadmap/#","page":"Roadmap","title":"Roadmap","text":"A roadmap with short-, mid- and long-term planning will be available soon. For now, there is only a backlog.","category":"page"},{"location":"roadmap/#Short-term-1","page":"Roadmap","title":"Short-term","text":"","category":"section"},{"location":"roadmap/#","page":"Roadmap","title":"Roadmap","text":"Available soon.","category":"page"},{"location":"roadmap/#Mid-term-1","page":"Roadmap","title":"Mid-term","text":"","category":"section"},{"location":"roadmap/#","page":"Roadmap","title":"Roadmap","text":"Available soon.","category":"page"},{"location":"roadmap/#Long-term-1","page":"Roadmap","title":"Long-term","text":"","category":"section"},{"location":"roadmap/#","page":"Roadmap","title":"Roadmap","text":"Available soon.","category":"page"},{"location":"roadmap/#Backlog-1","page":"Roadmap","title":"Backlog","text":"","category":"section"},{"location":"roadmap/#","page":"Roadmap","title":"Roadmap","text":"The backlog contains ideas of what could become part of the roadmap in the future. The list is ordered alphabetically. Therefore, the order does not express the importance or weight of a backlog item.","category":"page"},{"location":"roadmap/#","page":"Roadmap","title":"Roadmap","text":"We incorporate community feedback into the roadmap. If you think that important points are missing in the backlog, please share your ideas with us. We have a Slack channel. Please check out metal-stack.io for contact information.","category":"page"},{"location":"roadmap/#","page":"Roadmap","title":"Roadmap","text":"danger: Danger\nBy no means this list is a promise of what is being worked on in the near future. It is just a summary of ideas that was agreed on to be \"nice to have\". It is up to the investors, maintainers and the community to choose topics from this list and to implement them or to remove them from the list.","category":"page"},{"location":"roadmap/#","page":"Roadmap","title":"Roadmap","text":"Add metal-stack to Gardener conformance test grid\nAutoscaler for metal control plane components\nCI dashboard and public integration testing\nCilium as the default CNI for metal-stack on Gardener K8s clusters\nImproved release and deploy processes (GitOps, Spinnaker, Flux)\nMachine internet without firewalls\nmetal-stack dashboard (UI)\nOffer our metal-stack extensions as enterprise products (accounting, cluster-api, S3) (neither of them will ever be required for running metal-stack, they just add extra value for certain enterprises)\nPartition managed by Kubernetes (with Kubelets joining the control plane cluster)\nPersistent storage solution for metal-stack partitions\nPublic offering / demo playground\nResource scoping in the metal-api (MEP-4)\nService / API tokens (for scoped technical user access)","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_list/#metalctl-partition-list-1","page":"-","title":"metalctl partition list","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_list/#","page":"-","title":"-","text":"list all partitions","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_list/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_list/#","page":"-","title":"-","text":"list all partitions","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_list/#","page":"-","title":"-","text":"metalctl partition list [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_list/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_list/#","page":"-","title":"-","text":"  -h, --help   help for list","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_list/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_list/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_list/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_list/#","page":"-","title":"-","text":"metalctl partition\t - manage partitions","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_list/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_reserve/#metalctl-machine-reserve-1","page":"-","title":"metalctl machine reserve","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_reserve/#","page":"-","title":"-","text":"reserve a machine","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_reserve/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_reserve/#","page":"-","title":"-","text":"reserve a machine for exclusive usage, this machine will no longer be picked by other allocations. This is useful for maintenance of the machine or testing. After the reservation is not needed anymore, the reservation should be removed with –remove.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_reserve/#","page":"-","title":"-","text":"metalctl machine reserve <machine ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_reserve/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_reserve/#","page":"-","title":"-","text":"  -d, --description string   description of the reason for the reservation.\n  -h, --help                 help for reserve\n  -r, --remove               remove the reservation.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_reserve/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_reserve/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_reserve/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_reserve/#","page":"-","title":"-","text":"metalctl machine\t - manage machines","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_reserve/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch/#metalctl-switch-1","page":"-","title":"metalctl switch","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch/#","page":"-","title":"-","text":"manage switches","category":"page"},{"location":"external/metalctl/docs/metalctl_switch/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch/#","page":"-","title":"-","text":"manage switches","category":"page"},{"location":"external/metalctl/docs/metalctl_switch/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch/#","page":"-","title":"-","text":"  -h, --help   help for switch","category":"page"},{"location":"external/metalctl/docs/metalctl_switch/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_switch/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch/#","page":"-","title":"-","text":"metalctl\t - a cli to manage metal devices.\nmetalctl switch detail\t - switch details\nmetalctl switch list\t - list all switches","category":"page"},{"location":"external/metalctl/docs/metalctl_switch/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#metalctl-zsh-completion-1","page":"-","title":"metalctl zsh-completion","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#","page":"-","title":"-","text":"Generates Z shell completion scripts","category":"page"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#","page":"-","title":"-","text":"To load completion run","category":"page"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#","page":"-","title":"-","text":". <(metalctl zsh-completion)","category":"page"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#","page":"-","title":"-","text":"To configure your Z shell (with oh-my-zshell framework) to load completions for each session run","category":"page"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#","page":"-","title":"-","text":"echo -e '#compdef metalctl metalctl\\n. <(metalctl zsh-completion)' > ZSH/completions/metalctl rm -f ~/.zcompdump*","category":"page"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#","page":"-","title":"-","text":"metalctl zsh-completion [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#","page":"-","title":"-","text":"  -h, --help   help for zsh-completion","category":"page"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#","page":"-","title":"-","text":"metalctl\t - a cli to manage metal devices.","category":"page"},{"location":"external/metalctl/docs/metalctl_zsh-completion/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"proposals/#Metal-Stack-Enhancement-Proposals-(MEPs)-1","page":"Enhancement Proposals","title":"Metal Stack Enhancement Proposals (MEPs)","text":"","category":"section"},{"location":"proposals/#","page":"Enhancement Proposals","title":"Enhancement Proposals","text":"This section contains proposals which address substantial modifications to metal-stack.","category":"page"},{"location":"proposals/#","page":"Enhancement Proposals","title":"Enhancement Proposals","text":"Every proposal has a short name which starts with MEP followed by an incremental, unique number. Proposals should be raised as pull requests in the docs repository and can be discussed in Github issues.","category":"page"},{"location":"proposals/#","page":"Enhancement Proposals","title":"Enhancement Proposals","text":"The list of proposal and their current state is listed in the table below.","category":"page"},{"location":"proposals/#","page":"Enhancement Proposals","title":"Enhancement Proposals","text":"Possible states are:","category":"page"},{"location":"proposals/#","page":"Enhancement Proposals","title":"Enhancement Proposals","text":"In Discussion\nAccepted\nDeclined\nIn Progress\nCompleted","category":"page"},{"location":"proposals/#","page":"Enhancement Proposals","title":"Enhancement Proposals","text":"Once a proposal was accepted, an issue should be raised and the implementation should be done in a separate PR.","category":"page"},{"location":"proposals/#","page":"Enhancement Proposals","title":"Enhancement Proposals","text":"Name Description State Issue PR\nMEP-1 Distributed Control Plane Deployment In Discussion N/A N/A\nMEP-2 Two Factor Authentication In Progress N/A N/A\nMEP-3 Machine Re-Installation to preserve local data Completed N/A N/A\nMEP-4 Multi-tenancy for the metal-api Accepted N/A N/A","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_on/#metalctl-machine-power-on-1","page":"-","title":"metalctl machine power on","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_on/#","page":"-","title":"-","text":"power on a machine","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_on/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_on/#","page":"-","title":"-","text":"set the machine to power on state, if the machine already was on nothing happens.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_on/#","page":"-","title":"-","text":"metalctl machine power on <machine ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_on/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_on/#","page":"-","title":"-","text":"  -h, --help   help for on","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_on/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_on/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_on/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_on/#","page":"-","title":"-","text":"metalctl machine power\t - manage machine power","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_on/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_apply/#metalctl-partition-apply-1","page":"-","title":"metalctl partition apply","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_apply/#","page":"-","title":"-","text":"create/update a partition","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_apply/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_apply/#","page":"-","title":"-","text":"create/update a partition","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_apply/#","page":"-","title":"-","text":"metalctl partition apply [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_apply/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_apply/#","page":"-","title":"-","text":"  -h, --help   help for apply","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_apply/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_apply/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_apply/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_apply/#","page":"-","title":"-","text":"metalctl partition\t - manage partitions","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_apply/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"proposals/MEP1/README/#Distributed-Metal-Control-Plane-1","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"","category":"section"},{"location":"proposals/MEP1/README/#Problem-Statement-1","page":"Distributed Metal Control Plane","title":"Problem Statement","text":"","category":"section"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"We face the situation that we argue for running bare metal on premise because this way the customers can control where and how their software and data are processed and stored. On the other hand, we have currently decided that our metal-api control plane components run on a kubernetes cluster (in our case on a cluster provided by one of the available hyperscalers).","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"Running the control plane on Kubernetes has the following benefits:","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"Ease of deployment\nGet most, if not all, of the required infrastructure services like (probably incomplete):\nIPs\nDNS\nL7-Loadbalancing\nStorage\nS3 Backup\nHigh Availability","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"Using a kubernetes as a service offering from one of the hyperscalers, enables us to focus on using kubernetes instead of maintaining it as well.","category":"page"},{"location":"proposals/MEP1/README/#Goal-1","page":"Distributed Metal Control Plane","title":"Goal","text":"","category":"section"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"It would be much saner if metal-stack has no, or only minimal dependencies to external services. Imagine a metal-stack deployment in a plant, it would be optimal if we only have to deliver a single rack with servers and networking gear installed and wired, plug that rack to the power supply and a internet uplink and its ready to go.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"Have a second plant which you want to be part of all your plants? Just tell both that they are part of something bigger and metal-api knows of two partitions.","category":"page"},{"location":"proposals/MEP1/README/#Possible-Solutions-1","page":"Distributed Metal Control Plane","title":"Possible Solutions","text":"","category":"section"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"We can think of two different solutions to this vision:","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"Keep the central control plane approach and require some sort of kubernetes deployment accessible from the internet. This has the downside that the user must, provide a managed kubernetes deployment in his own datacenter or uses a hyperscaler. Still not optimal.\nInstall the metal-api and all its dependencies in every partition, replicate or shard the databases to every connected partition, make them know each other. Connect the partitions over the internet with some sort of vpn to make the services visible to each other.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"As we can see, the first approach does not really address the problem, therefore i will describe solution #2 in more details.","category":"page"},{"location":"proposals/MEP1/README/#Central/Current-setup-1","page":"Distributed Metal Control Plane","title":"Central/Current setup","text":"","category":"section"},{"location":"proposals/MEP1/README/#Stateful-services-1","page":"Distributed Metal Control Plane","title":"Stateful services","text":"","category":"section"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"Every distributed system suffer from handling state in a scalable, fast and correct way. To start how to cope with the state, we first must identify which state can be seen as partition local only and which state must be synchronous for read, and synchronous for writes across partitions.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"Affected states:","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"masterdata: e.g. tenant and project must be present in every partition, but these are entities which are read often but updates are rare. A write can therefore be visible with a decent delay in a distinct partition with no consequences.\nipam: the prefixes and ip´s allocated from machines. These entities are also read often and rare updates. But we must differentiate between dirty reads for different types. A machine network is partition local, ips acquired from such a network must by synchronous in the same partition. Ips acquired from global networks such as internet must by synchronous for all partitions, as otherwise a internet ip could be acquired twice.\nvrf ids: they must only be unique in one partition\nimage and size configurations: read often, written seldom, so no high requirements on the storage of these entities.\nimages: os images are already replicated from a central s3 storage to a per partition s3 service. metal-hammer kernel and initrd are small and pull always from the central s3, can be done similar to os images.\nmachine and machine allocation: must be only synchronous in the partition\nswitch: must be only synchronous in the partition\nnsq messages: do not need to cross partition boundaries. No need to keep the messages persistent, even the opposite is true, we don't want to have the messages persist for a longer period.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"Now we can see that the most critical state to held and synchronize are the IPAM data, because these entities must be guaranteed to be synchronously updated, while being updated frequently.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"Datastores:","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"We use three different types of datastores to persist the states of the metal application.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"rethinkdb is the main datastore for almost all entities managed by metal-api\npostgresql is used for masterdata and ipam data.\nnsq uses disk and memory tho store the messages.","category":"page"},{"location":"proposals/MEP1/README/#Stateless-services-1","page":"Distributed Metal Control Plane","title":"Stateless services","text":"","category":"section"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"These are the easy part, all of our services which are stateless can be scaled up and down without any impact on functionality. Even the stateful services like masterdata and metal-api rely fully on the underlying datastore and can therefore also be scaled up and down to meet scalability requirements.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"Albeit, most of these services need to be placed behind a loadbalancer which does the L4/L7 balancing across the started/available replicas of the service for the clients talking to it. This is actually provided by kubernetes with either service type loadbalancer or type clusterip.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"One exception is the metal-console service which must have the partition in it´s dns name now, because there is no direct network connectivity between the management networks of the partitions. See \"Network Setup)","category":"page"},{"location":"proposals/MEP1/README/#Distributed-setup-1","page":"Distributed Metal Control Plane","title":"Distributed setup","text":"","category":"section"},{"location":"proposals/MEP1/README/#State-1","page":"Distributed Metal Control Plane","title":"State","text":"","category":"section"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"In order to replicate certain data which must be available across all partitions we can use on of the existing open source databases which enable such kind of setup. There are a few avaible out there, the following uncomplete list will highlight the pro´s and cons of each.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"RethinkDB\nWe already store most of our data in RethinkDB and it gives already the ability to synchronize the data in a distributed manner with different guarantees for consistency and latency. This is described here: Scaling, Sharding and replication. But because rethinkdb has a rough history and unsure future with the last release took more than a year, we in the team already thought that we eventually must move away from rethinkdb in the future.  \nPostgresql\nPostgres does not have a multi datacenter with replication in both directions, it just can make the remote instance store the same data.\nCockroachDB\nIs a Postgresql compatible database enginge on the wire. CockroachDB gives you both, ACID and geo replication with writes allowed from all connected members. It is even possible to configure Follow the Workload and Geo Partitioning and Replication.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"If we migrate all metal-api entities to be stored the same way we store masterdata, we could use cockroachdb to store all metal entities in one ore more databases spread across all partitions and still ensure consistency and high availability.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"A simple setup how this would look like is shown here.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"(Image: Simple CockroachDB setup)","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"go-ipam was modified in a example PR here: https://github.com/metal-pod/go-ipam/pull/17","category":"page"},{"location":"proposals/MEP1/README/#API-Access-1","page":"Distributed Metal Control Plane","title":"API Access","text":"","category":"section"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"In order to make the metal-api accessible for api users like cloud-api or metalctl as easy at it is today, some effort has to be taken. One possible approach would be to use a external loadbalancer which spread the requests evenly to all metal-api endpoints in all partitions. Because all data are accessible from all partitions, a api request going to partition A with a request to create a machine in partition B, will still work. If on the other hand partition B is not in a connected state because the interconnection between both partitions is broken, then of course the request will fail.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"IMPORTANT The NSQ Message to inform metal-core must end in the correct partition","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"To provide such a external loadbalancer we have several opportunities:","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"Cloudflare or comparable CDN service.\nBGP Anycast from every partition","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"Another setup would place a small gateway behind the metal-api address, which forwards to the metal-api in the partition where the request must be executed. This gateway, metal-api-router must inspect the payload, extract the desired partition, and forward the request without any modifications to the metal-api endpoint in this partition. This can be done for all requests, or if we want to optimize, only for write accesses.","category":"page"},{"location":"proposals/MEP1/README/#Network-setup-1","page":"Distributed Metal Control Plane","title":"Network setup","text":"","category":"section"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"In order to have the impact to the overall security concept as minimal as possible i would not modify the current network setup. The only modifications which has to be made are:","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"Allow https ingress traffic to all metal-api instances.\nAllow ssh ingress traffic to all metal-console instances.\nAllow CockroachDB Replication between all partitions.\nNo NSQ traffic from outside required anymore, except we cant solve the topic above.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"A simple setup how this would look like is shown here, this does not work though because of the forementioned NSQ issue.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"(Image: API and Console Access)","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"Therefore we need the metal-api-router:","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"(Image: Working API and Console Access)","category":"page"},{"location":"proposals/MEP1/README/#Deployment-1","page":"Distributed Metal Control Plane","title":"Deployment","text":"","category":"section"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"The deployment of our components will substantially differ in a partition compared to a the deployment we have actually. Deploying it in kubernetes in the partition would be very difficult to achieve because we have no sane way to deploy kubernetes on physical machines without a underlying API. I would therefore suggest to deploy our components in the same way we do that for the services running on the management server. Use systemd to start docker containers.","category":"page"},{"location":"proposals/MEP1/README/#","page":"Distributed Metal Control Plane","title":"Distributed Metal Control Plane","text":"(Image: Deployment)","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_list/#metalctl-firewall-list-1","page":"-","title":"metalctl firewall list","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_list/#","page":"-","title":"-","text":"list all firewalls","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_list/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_list/#","page":"-","title":"-","text":"list all firewalls with almost all properties in tabular form.","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_list/#","page":"-","title":"-","text":"metalctl firewall list [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_list/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_list/#","page":"-","title":"-","text":"  -h, --help               help for list\n      --partition string   partition to filter [optional]\n      --project string     project to filter [optional]","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_list/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_list/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_list/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_list/#","page":"-","title":"-","text":"metalctl firewall\t - manage firewalls","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_list/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix_remove/#metalctl-network-prefix-remove-1","page":"-","title":"metalctl network prefix remove","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix_remove/#","page":"-","title":"-","text":"remove a prefix from a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix_remove/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix_remove/#","page":"-","title":"-","text":"remove a prefix from a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix_remove/#","page":"-","title":"-","text":"metalctl network prefix remove <networkid> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix_remove/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix_remove/#","page":"-","title":"-","text":"  -h, --help            help for remove\n      --prefix string   prefix to remove.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix_remove/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix_remove/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix_remove/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix_remove/#","page":"-","title":"-","text":"metalctl network prefix\t - prefix management of a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix_remove/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_free/#metalctl-network-ip-free-1","page":"-","title":"metalctl network ip free","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_free/#","page":"-","title":"-","text":"free an IP","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_free/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_free/#","page":"-","title":"-","text":"free an IP","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_free/#","page":"-","title":"-","text":"metalctl network ip free <IP> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_free/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_free/#","page":"-","title":"-","text":"  -h, --help   help for free","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_free/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_free/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_free/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_free/#","page":"-","title":"-","text":"metalctl network ip\t - manage IPs","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_free/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project_list/#metalctl-project-list-1","page":"-","title":"metalctl project list","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project_list/#","page":"-","title":"-","text":"list all projects","category":"page"},{"location":"external/metalctl/docs/metalctl_project_list/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project_list/#","page":"-","title":"-","text":"list all projects","category":"page"},{"location":"external/metalctl/docs/metalctl_project_list/#","page":"-","title":"-","text":"metalctl project list [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_project_list/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project_list/#","page":"-","title":"-","text":"  -h, --help            help for list\n      --id string       ID of the project.\n      --name string     Name of the project.\n      --tenant string   tenant of this project.","category":"page"},{"location":"external/metalctl/docs/metalctl_project_list/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project_list/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_project_list/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project_list/#","page":"-","title":"-","text":"metalctl project\t - manage projects","category":"page"},{"location":"external/metalctl/docs/metalctl_project_list/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_free/#metalctl-network-free-1","page":"-","title":"metalctl network free","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_free/#","page":"-","title":"-","text":"free a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_free/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_free/#","page":"-","title":"-","text":"free a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_free/#","page":"-","title":"-","text":"metalctl network free <networkid> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_free/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_free/#","page":"-","title":"-","text":"  -h, --help   help for free","category":"page"},{"location":"external/metalctl/docs/metalctl_network_free/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_free/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_free/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_free/#","page":"-","title":"-","text":"metalctl network\t - manage networks","category":"page"},{"location":"external/metalctl/docs/metalctl_network_free/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_describe/#metalctl-partition-describe-1","page":"-","title":"metalctl partition describe","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_describe/#","page":"-","title":"-","text":"describe a partition","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_describe/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_describe/#","page":"-","title":"-","text":"describe a partition","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_describe/#","page":"-","title":"-","text":"metalctl partition describe <partitionID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_describe/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_describe/#","page":"-","title":"-","text":"  -h, --help   help for describe","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_describe/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_describe/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_describe/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_describe/#","page":"-","title":"-","text":"metalctl partition\t - manage partitions","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_describe/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_bios/#metalctl-machine-power-bios-1","page":"-","title":"metalctl machine power bios","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_bios/#","page":"-","title":"-","text":"boot a machine into BIOS","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_bios/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_bios/#","page":"-","title":"-","text":"the machine will boot into bios after a power cycle/reset.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_bios/#","page":"-","title":"-","text":"metalctl machine power bios <machine ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_bios/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_bios/#","page":"-","title":"-","text":"  -h, --help   help for bios","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_bios/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_bios/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_bios/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_bios/#","page":"-","title":"-","text":"metalctl machine power\t - manage machine power","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_bios/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_list/#metalctl-size-list-1","page":"-","title":"metalctl size list","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_list/#","page":"-","title":"-","text":"list all sizes","category":"page"},{"location":"external/metalctl/docs/metalctl_size_list/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_list/#","page":"-","title":"-","text":"list all sizes","category":"page"},{"location":"external/metalctl/docs/metalctl_size_list/#","page":"-","title":"-","text":"metalctl size list [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_size_list/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_list/#","page":"-","title":"-","text":"  -h, --help   help for list","category":"page"},{"location":"external/metalctl/docs/metalctl_size_list/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_list/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_size_list/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_list/#","page":"-","title":"-","text":"metalctl size\t - manage sizes","category":"page"},{"location":"external/metalctl/docs/metalctl_size_list/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_dump/#metalctl-update-dump-1","page":"-","title":"metalctl update dump","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_dump/#","page":"-","title":"-","text":"dump the version update file","category":"page"},{"location":"external/metalctl/docs/metalctl_update_dump/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_dump/#","page":"-","title":"-","text":"dump the version update file","category":"page"},{"location":"external/metalctl/docs/metalctl_update_dump/#","page":"-","title":"-","text":"metalctl update dump <binary> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_update_dump/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_dump/#","page":"-","title":"-","text":"  -h, --help   help for dump","category":"page"},{"location":"external/metalctl/docs/metalctl_update_dump/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_dump/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_update_dump/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_dump/#","page":"-","title":"-","text":"metalctl update\t - update the program","category":"page"},{"location":"external/metalctl/docs/metalctl_update_dump/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size/#metalctl-size-1","page":"-","title":"metalctl size","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size/#","page":"-","title":"-","text":"manage sizes","category":"page"},{"location":"external/metalctl/docs/metalctl_size/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size/#","page":"-","title":"-","text":"a size is a distinct hardware equipment in terms of cpu cores, ram and storage of a machine.","category":"page"},{"location":"external/metalctl/docs/metalctl_size/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size/#","page":"-","title":"-","text":"  -h, --help   help for size","category":"page"},{"location":"external/metalctl/docs/metalctl_size/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_size/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size/#","page":"-","title":"-","text":"metalctl\t - a cli to manage metal devices.\nmetalctl size apply\t - create/update a size\nmetalctl size create\t - create a size\nmetalctl size delete\t - delete a size\nmetalctl size describe\t - describe a size\nmetalctl size edit\t - edit a size\nmetalctl size list\t - list all sizes\nmetalctl size try\t - try a specific hardware spec and give the chosen size back\nmetalctl size update\t - update a size","category":"page"},{"location":"external/metalctl/docs/metalctl_size/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"overview/os/#Operating-Systems-1","page":"Operating Systems","title":"Operating Systems","text":"","category":"section"},{"location":"overview/os/#","page":"Operating Systems","title":"Operating Systems","text":"Our operating system images are built on regular basis from the metal-images repository.","category":"page"},{"location":"overview/os/#","page":"Operating Systems","title":"Operating Systems","text":"All images are hosted on GKE at images.metal-stack.io. Feel free to use this as a mirror for your metal-stack partitions if you want. The metal-stack developers continuously have an eye on the supported images. They are updated regularly and scanned for vulnerabilities.","category":"page"},{"location":"overview/os/#Supported-OS-Images-1","page":"Operating Systems","title":"Supported OS Images","text":"","category":"section"},{"location":"overview/os/#","page":"Operating Systems","title":"Operating Systems","text":"The operating system images that we build are trimmed down to their bare essentials for serving as Kubernetes worker nodes. Small image sizes make machine provisioning blazingly fast.","category":"page"},{"location":"overview/os/#","page":"Operating Systems","title":"Operating Systems","text":"The supported images currently are:","category":"page"},{"location":"overview/os/#","page":"Operating Systems","title":"Operating Systems","text":"Platform Distribution Version\nLinux Debian 10\nLinux Ubuntu 19.10","category":"page"},{"location":"overview/os/#Building-Your-Own-Images-1","page":"Operating Systems","title":"Building Your Own Images","text":"","category":"section"},{"location":"overview/os/#","page":"Operating Systems","title":"Operating Systems","text":"It is fully possible to build your own operating system images and provide them through the metal-stack.","category":"page"},{"location":"overview/os/#","page":"Operating Systems","title":"Operating Systems","text":"There are some conventions though that you need to follow in order to make your image installable through the metal-hammer. You should understand the machine provisioning sequence before starting to write your own images.","category":"page"},{"location":"overview/os/#","page":"Operating Systems","title":"Operating Systems","text":"Images need to be compressed to a tarball using the lz4 compression algorithm\nAn md5 checksum file with the same name as the image archive needs to be provided in the download path along with the actual os image\nA packages.txt containing the packages contained in the OS image should be provided in the download path (not strictly required)\nConsider semantic image versioning, which we use in our algorithms to select latest images (e.g. os-major.minor.patch ➡️ ubuntu-19.10.20191018)\nConsider installing packages used by the metal-stack infrastructure\nFRR to enable routing-to-the-host in our network topology\ngo-lddp to enable checking if the machine is still alive after user allocation\nignition for enabling users to run user-specific initialization instructions before bootup. It's pretty small in size, which is why we use it. However, you are free to use other cloud instance initialization tools if you want to.\nYou have to provide an install.sh script, which applies user-specific configuration in the installed image\nThis script should consume parameters from the install.yaml file that the metal-hammer writes to /etc/metal/install.yaml\nPlease check this contract between image and the metal-hammer here\nFor the time being, your image must be able to support kexec into the new operating system kernel, the kexec command is issued by the metal-hammer after running the install.sh. We do this because kexec is much faster than rebooting a machine.\nWe recommend building images from Dockerfiles as it is done in metal-images repository.","category":"page"},{"location":"overview/os/#","page":"Operating Systems","title":"Operating Systems","text":"info: Info\nBuilding own operating system images is an advanced topic. When you have just started with metal-stack, we recommend using the public operating system images first.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_allocate/#metalctl-network-allocate-1","page":"-","title":"metalctl network allocate","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_allocate/#","page":"-","title":"-","text":"allocate a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_allocate/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_allocate/#","page":"-","title":"-","text":"allocate a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_allocate/#","page":"-","title":"-","text":"metalctl network allocate [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_allocate/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_allocate/#","page":"-","title":"-","text":"  -d, --description string   description of the network to create. [optional]\n  -h, --help                 help for allocate\n      --labels strings       labels for this network. [optional]\n  -n, --name string          name of the network to create. [required]\n      --partition string     partition where this network should exist. [required]\n      --project string       partition where this network should exist. [required]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_allocate/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_allocate/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_allocate/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_allocate/#","page":"-","title":"-","text":"metalctl network\t - manage networks","category":"page"},{"location":"external/metalctl/docs/metalctl_network_allocate/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/README/#metalctl-1","page":"metalctl","title":"metalctl","text":"","category":"section"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"metalctl is the command line client to access the metal-api.","category":"page"},{"location":"external/metalctl/README/#Installation-1","page":"metalctl","title":"Installation","text":"","category":"section"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"Download locations:","category":"page"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"metalctl-linux-amd64\nmetalctl-darwin-amd64\nmetalctl-windows-amd64","category":"page"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"Via pre-build package:","category":"page"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"sudo curl -fsSL https://images.metal-pod.io/metalctl/metalctl -o /usr/local/bin/metalctl\nsudo chmod +x /usr/local/bin/metalctl","category":"page"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"Self-build:","category":"page"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"make\nsudo ln -sf $(pwd)/bin/metalctl /usr/local/bin/metalctl","category":"page"},{"location":"external/metalctl/README/#Installation-on-Linux-1","page":"metalctl","title":"Installation on Linux","text":"","category":"section"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"sudo curl -fsSL https://images.metal-pod.io/metalctl/metalctl-linux-amd64 -o /usr/local/bin/metalctl\nsudo chmod +x /usr/local/bin/metalctl","category":"page"},{"location":"external/metalctl/README/#Installation-on-MacOS-1","page":"metalctl","title":"Installation on MacOS","text":"","category":"section"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"sudo curl -fsSL https://images.metal-pod.io/metalctl/metalctl-darvin-amd64 -o /usr/local/bin/metalctl\nsudo chmod +x /usr/local/bin/metalctl","category":"page"},{"location":"external/metalctl/README/#Installation-on-Windows-1","page":"metalctl","title":"Installation on Windows","text":"","category":"section"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"curl -LO https://blobstore.fi-ts.io/cloud-native/metalctl/metalctl-windows-amd64\ncopy metalctl-windows-amd64 metalctl.exe","category":"page"},{"location":"external/metalctl/README/#Configuration-1","page":"metalctl","title":"Configuration","text":"","category":"section"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"Set up auto-completion for metalctl, e.g. add to your ~/.bashrc:","category":"page"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"source <(metalctl completion bash)","category":"page"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"Set up metalctl config, by first creating the config folder (mkdir -p ~/.metalctl), then set the metalctl URL within ~/.metalctl/config.yaml:","category":"page"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"---\ncurrent: prod\ncontexts:\n  prod:\n    url: https://api.metal-stack.io/metal\n    issuer_url: https://dex.metal-stack.io/dex\n    client_id: metal_client\n    client_secret: 456","category":"page"},{"location":"external/metalctl/README/#Available-commands-1","page":"metalctl","title":"Available commands","text":"","category":"section"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"Full documentation is generated out of the cobra command implementation with:","category":"page"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"metalctl markdown","category":"page"},{"location":"external/metalctl/README/#","page":"metalctl","title":"metalctl","text":"generated markdown is here","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_edit/#metalctl-network-ip-edit-1","page":"-","title":"metalctl network ip edit","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_edit/#","page":"-","title":"-","text":"edit a ip","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_edit/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_edit/#","page":"-","title":"-","text":"edit a ip","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_edit/#","page":"-","title":"-","text":"metalctl network ip edit <IP> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_edit/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_edit/#","page":"-","title":"-","text":"  -h, --help   help for edit","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_edit/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_edit/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_edit/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_edit/#","page":"-","title":"-","text":"metalctl network ip\t - manage IPs","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_edit/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip/#metalctl-network-ip-1","page":"-","title":"metalctl network ip","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip/#","page":"-","title":"-","text":"manage IPs","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip/#","page":"-","title":"-","text":"manage IPs","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip/#","page":"-","title":"-","text":"  -h, --help   help for ip","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip/#","page":"-","title":"-","text":"metalctl network\t - manage networks\nmetalctl network ip allocate\t - allocate an IP, if non given the next free is allocated, otherwise the given IP is checked for availability.\nmetalctl network ip apply\t - create/update an IP\nmetalctl network ip edit\t - edit a ip\nmetalctl network ip free\t - free an IP\nmetalctl network ip list\t - manage IPs","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_reserve/#metalctl-firewall-reserve-1","page":"-","title":"metalctl firewall reserve","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_reserve/#","page":"-","title":"-","text":"reserve a firewall","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_reserve/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_reserve/#","page":"-","title":"-","text":"reserve a firewall for exclusive usage, this firewall will no longer be picked by other allocations. This is useful for maintenance of the firewall or testing. After the reservation is not needed anymore, the reservation should be removed with –remove.","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_reserve/#","page":"-","title":"-","text":"metalctl firewall reserve <firewall ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_reserve/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_reserve/#","page":"-","title":"-","text":"  -h, --help   help for reserve","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_reserve/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_reserve/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_reserve/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_reserve/#","page":"-","title":"-","text":"metalctl firewall\t - manage firewalls","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_reserve/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify_on/#metalctl-machine-identify-on-1","page":"-","title":"metalctl machine identify on","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify_on/#","page":"-","title":"-","text":"power on the machine chassis identify LED","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify_on/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify_on/#","page":"-","title":"-","text":"set the machine chassis identify LED to on state","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify_on/#","page":"-","title":"-","text":"metalctl machine identify on <machine ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify_on/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify_on/#","page":"-","title":"-","text":"  -d, --description string   description of the reason for chassis identify LED turn-on.\n  -h, --help                 help for on","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify_on/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify_on/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify_on/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify_on/#","page":"-","title":"-","text":"metalctl machine identify\t - manage machine chassis identify LED power","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify_on/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_edit/#metalctl-size-edit-1","page":"-","title":"metalctl size edit","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_edit/#","page":"-","title":"-","text":"edit a size","category":"page"},{"location":"external/metalctl/docs/metalctl_size_edit/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_edit/#","page":"-","title":"-","text":"edit a size","category":"page"},{"location":"external/metalctl/docs/metalctl_size_edit/#","page":"-","title":"-","text":"metalctl size edit <sizeID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_size_edit/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_edit/#","page":"-","title":"-","text":"  -h, --help   help for edit","category":"page"},{"location":"external/metalctl/docs/metalctl_size_edit/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_edit/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_size_edit/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_edit/#","page":"-","title":"-","text":"metalctl size\t - manage sizes","category":"page"},{"location":"external/metalctl/docs/metalctl_size_edit/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_apply/#metalctl-size-apply-1","page":"-","title":"metalctl size apply","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_apply/#","page":"-","title":"-","text":"create/update a size","category":"page"},{"location":"external/metalctl/docs/metalctl_size_apply/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_apply/#","page":"-","title":"-","text":"create/update a size","category":"page"},{"location":"external/metalctl/docs/metalctl_size_apply/#","page":"-","title":"-","text":"metalctl size apply [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_size_apply/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_apply/#","page":"-","title":"-","text":"  -h, --help   help for apply","category":"page"},{"location":"external/metalctl/docs/metalctl_size_apply/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_apply/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_size_apply/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_apply/#","page":"-","title":"-","text":"metalctl size\t - manage sizes","category":"page"},{"location":"external/metalctl/docs/metalctl_size_apply/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_create/#metalctl-firewall-create-1","page":"-","title":"metalctl firewall create","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_create/#","page":"-","title":"-","text":"create a firewall","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_create/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_create/#","page":"-","title":"-","text":"create a new firewall connected to the given networks.","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_create/#","page":"-","title":"-","text":"metalctl firewall create [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_create/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_create/#","page":"-","title":"-","text":"  -d, --description string    Description of the firewall to create. [optional]\n  -h, --help                  help for create\n  -H, --hostname string       Hostname of the firewall. [required]\n  -I, --id string             ID of a specific firewall to allocate, if given, size and partition are ignored. Need to be set to reserved (--reserve) state before.\n  -i, --image string          OS Image to install. [required]\n      --ips strings           Sets the firewall's IP address. Usage: [--ips[=IPV4-ADDRESS[,IPV4-ADDRESS]...]]...\n                              IPV4-ADDRESS specifies the IPv4 address to add.\n                              It can only be used in conjunction with --networks.\n  -n, --name string           Name of the firewall. [optional]\n      --networks strings      Adds network(s). Usage: --networks NETWORK[:MODE][,NETWORK[:MODE]]... [--networks NETWORK[:MODE][,\n                              NETWORK[:MODE]]...]...\n                              NETWORK specifies the id of an existing network.\n                              MODE can be omitted or one of:\n                              \tauto\tIP address is automatically acquired from the given network\n                              \tnoauto\tNo automatic IP address acquisition\n  -S, --partition string      partition/datacenter where the firewall is created. [required, except for reserved machines]\n  -P, --project string        Project where the firewall should belong to. [required]\n  -s, --size string           Size of the firewall. [required, except for reserved machines]\n  -p, --sshpublickey string   SSH public key for access via ssh and console. [optional]\n                              Can be either the public key as string, or pointing to the public key file to use e.g.: \"@~/.ssh/id_rsa.pub\".\n                              If ~/.ssh/id_rsa.pub is present it will be picked as default.\n      --tags strings          tags to add to the firewall, use it like: --tags \"tag1,tag2\" or --tags \"tag3\".\n      --userdata string       cloud-init.io compatible userdata. [optional]\n                              Can be either the userdata as string, or pointing to the userdata file to use e.g.: \"@/tmp/userdata.cfg\".","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_create/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_create/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_create/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_create/#","page":"-","title":"-","text":"metalctl firewall\t - manage firewalls","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_create/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/firewall-controller/README/#Firewall-Controller-1","page":"firewall-controller","title":"Firewall Controller","text":"","category":"section"},{"location":"external/firewall-controller/README/#","page":"firewall-controller","title":"firewall-controller","text":"This controller is installed on a bare-metal firewall in front of several kubernetes worker nodes and responsible to reconcile a ClusterwideNetworkPolicy to nftables rules to control access to and from the kubernetes cluster. It allows also to control the traffic rate going through, to limit network resources for restricted usage scenarios. Nftable and node metrics are exposed with the nftables-exporter and node-exporter, the ips are visible as service and endpoint from the kubernetes cluster.","category":"page"},{"location":"external/firewall-controller/README/#","page":"firewall-controller","title":"firewall-controller","text":"Additional an IDS is managed on the firewall to detect known network anomalies. suricata is used for this purpose. Right now, only basic statistics about the amount of scanned packets is reported. In a future release, access to all alarms will be provided.","category":"page"},{"location":"external/firewall-controller/README/#Architecture-1","page":"firewall-controller","title":"Architecture","text":"","category":"section"},{"location":"external/firewall-controller/README/#","page":"firewall-controller","title":"firewall-controller","text":"(Image: Architecture)","category":"page"},{"location":"external/firewall-controller/README/#Configuration-1","page":"firewall-controller","title":"Configuration","text":"","category":"section"},{"location":"external/firewall-controller/README/#","page":"firewall-controller","title":"firewall-controller","text":"Firewall Controller is configured with 2 CRDs: firewalls.metal-stack.io and clusterwidenetworkpolicies.metal-stack.io. Both are namespaced and must reside in the firewall namespace. The firewalls CRD is typically written from the gardener-extension-provider-metal, the clusterwidenetworkpolicy should be provided by the deployment of your application.","category":"page"},{"location":"external/firewall-controller/README/#","page":"firewall-controller","title":"firewall-controller","text":"Example Firewall CRD:","category":"page"},{"location":"external/firewall-controller/README/#","page":"firewall-controller","title":"firewall-controller","text":"apiVersion: metal-stack.io/v1\nkind: Firewall\nmetadata:\n  namespace: firewall\n  name: firewall\nspec:\n  # Interval of reconcilation if nftables rules and network traffic accounting\n  interval: 10s\n  # Ratelimits specify on which physical interface, which maximum rate of traffic is allowed\n  ratelimits:\n  # The name of the interface visible with ip link show\n  - interface: vrf104009\n    # The maximum rate in MBits/s\n    rate: 10\n  # Internalprefixes defines a list of prefixes where the traffic going to, or comming from is considered internal, e.g. not leaving into external networks\n  # given the archictecture picture above this would be:\n  internalprefixes:\n  - \"1.2.3.0/24\n  - \"172.17.0.0/16\"\n  - \"10.0.0.0/8\"","category":"page"},{"location":"external/firewall-controller/README/#","page":"firewall-controller","title":"firewall-controller","text":"Example ClusterwideNetworkPolicy:","category":"page"},{"location":"external/firewall-controller/README/#","page":"firewall-controller","title":"firewall-controller","text":"apiVersion: metal-stack.io/v1\nkind: ClusterwideNetworkPolicy\nmetadata:\n  namespace: firewall\n  name: clusterwidenetworkpolicy-sample\nspec:\n  egress:\n  - to:\n    - cidr: 1.1.0.0/24\n      except:\n      - 1.1.1.0/16\n    - cidr: 8.8.8.8/32\n    ports:\n    - protocol: UDP\n      port: 53\n    - protocol: TCP\n      port: 53","category":"page"},{"location":"external/firewall-controller/README/#Status-1","page":"firewall-controller","title":"Status","text":"","category":"section"},{"location":"external/firewall-controller/README/#","page":"firewall-controller","title":"firewall-controller","text":"Once the firewall-controller is running, it will report several statistics to the Firewall CRD Status: This can be inspected by running:","category":"page"},{"location":"external/firewall-controller/README/#","page":"firewall-controller","title":"firewall-controller","text":"kubectl describe -n firewall firewall","category":"page"},{"location":"external/firewall-controller/README/#","page":"firewall-controller","title":"firewall-controller","text":"The output would look like:","category":"page"},{"location":"external/firewall-controller/README/#","page":"firewall-controller","title":"firewall-controller","text":"Status:\n  Last Run:  2020-06-17T13:18:58Z\n  Stats:\n    # Network traffic in bytes separated into external and internal in/out/total\n    Devices:\n      External:\n        In:     91696\n        Out:    34600\n        Total:  0\n      Internal:\n        In:     0\n        Out:    0\n        Total:  2678671\n    # IDS Statistics by interface\n    Idsstats:\n      vrf104009:\n        Drop:              1992\n        Invalidchecksums:  0\n        Packets:           4997276\n    # nftable rule statistics by rule name\n    Rules:\n      Accept:\n        BGP unnumbered:\n          Counter:\n            Bytes:    0\n            Packets:  0\n        SSH incoming connections:\n          Counter:\n            Bytes:    936\n            Packets:  16\n        accept established connections:\n          Counter:\n            Bytes:    21211168\n            Packets:  39785\n        accept icmp:\n          Counter:\n            Bytes:    0\n            Packets:  0\n        accept traffic for k8s service kube-system/vpn-shoot:\n          Counter:\n            Bytes:    360\n            Packets:  6\n      Drop:\n        drop invalid packets:\n          Counter:\n            Bytes:    52\n            Packets:  1\n        drop invalid packets from forwarding to prevent malicious activity:\n          Counter:\n            Bytes:    0\n            Packets:  0\n        drop invalid packets to prevent malicious activity:\n          Counter:\n            Bytes:    0\n            Packets:  0\n        drop packets with invalid ct state:\n          Counter:\n            Bytes:    0\n            Packets:  0\n        drop ping floods:\n          Counter:\n            Bytes:    0\n            Packets:  0\n      Other:\n        block bgp forward to machines:\n          Counter:\n            Bytes:    0\n            Packets:  0\n        count and log dropped packets:\n          Counter:\n            Bytes:    2528\n            Packets:  51\n        snat (networkid: internet):\n          Counter:\n            Bytes:    36960\n            Packets:  486","category":"page"},{"location":"external/firewall-controller/README/#Prometheus-integration-1","page":"firewall-controller","title":"Prometheus integration","text":"","category":"section"},{"location":"external/firewall-controller/README/#","page":"firewall-controller","title":"firewall-controller","text":"There are two exporters running on the firewall to report essential metrics from this machine:","category":"page"},{"location":"external/firewall-controller/README/#","page":"firewall-controller","title":"firewall-controller","text":"node-exporter for machine specific metrics like cpu, ram and disk usage, see node-exporter for details.\nnftables-exporter for nftables metrics, see nftables-exporter","category":"page"},{"location":"external/firewall-controller/README/#","page":"firewall-controller","title":"firewall-controller","text":"Both exporters are exposed as services:","category":"page"},{"location":"external/firewall-controller/README/#","page":"firewall-controller","title":"firewall-controller","text":"kubectl get svc -n firewall\nNAME                TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)    AGE\nnftables-exporter   ClusterIP   None         <none>        9630/TCP   13h\nnode-exporter       ClusterIP   None         <none>        9100/TCP   13h","category":"page"},{"location":"external/firewall-controller/README/#","page":"firewall-controller","title":"firewall-controller","text":"These services are in front of virtual endpoints:","category":"page"},{"location":"external/firewall-controller/README/#","page":"firewall-controller","title":"firewall-controller","text":"kubectl get ep -n firewall\nNAME                ENDPOINTS         AGE\nnftables-exporter   10.3.164.1:9630   13h\nnode-exporter       10.3.164.1:9100   13h","category":"page"},{"location":"external/firewall-controller/README/#","page":"firewall-controller","title":"firewall-controller","text":"You can scrape these services in you prometheus installation to get the metrics.","category":"page"},{"location":"external/firewall-controller/README/#","page":"firewall-controller","title":"firewall-controller","text":"To check you can run:","category":"page"},{"location":"external/firewall-controller/README/#","page":"firewall-controller","title":"firewall-controller","text":"curl nftables-exporter.firewall.svc.cluster.local:9630/metrics\ncurl node-exporter.firewall.svc.cluster.local:9100/metrics","category":"page"},{"location":"external/firewall-controller/README/#Firewall-Logs-1","page":"firewall-controller","title":"Firewall Logs","text":"","category":"section"},{"location":"external/firewall-controller/README/#","page":"firewall-controller","title":"firewall-controller","text":"It is also possible to tail for the dropped packets with the following command (install stern from stern ):","category":"page"},{"location":"external/firewall-controller/README/#","page":"firewall-controller","title":"firewall-controller","text":"stern -n firewall drop","category":"page"},{"location":"external/firewall-controller/README/#","page":"firewall-controller","title":"firewall-controller","text":"The output will look like:","category":"page"},{"location":"external/firewall-controller/README/#","page":"firewall-controller","title":"firewall-controller","text":"\ndroptailer-6d556bd988-4g8gp droptailer 2020-06-17 13:23:27 +0000 UTC {\"DPT\":\"4000\",\"DST\":\"1.2.3.4\",\"ID\":\"54321\",\"IN\":\"vrf104009\",\"LEN\":\"40\",\"MAC\":\"ca:41:f9:80:fa:89:aa:bb:0e:62:8c:a6:08:00\",\"OUT\":\"vlan179\",\"PREC\":\"0x00\",\"PROTO\":\"TCP\",\"RES\":\"0x00\",\"SPT\":\"38464\",\"SRC\":\"2.3.4.5\",\"SYN\":\"\",\"TOS\":\"0x00\",\"TTL\":\"236\",\"URGP\":\"0\",\"WINDOW\":\"65535\",\"timestamp\":\"2020-06-17 13:23:27 +0000 UTC\"}\ndroptailer-6d556bd988-4g8gp droptailer 2020-06-17 13:23:34 +0000 UTC {\"DPT\":\"2362\",\"DST\":\"1.2.3.4\",\"ID\":\"44545\",\"IN\":\"vrf104009\",\"LEN\":\"40\",\"MAC\":\"ca:41:f9:80:fa:89:aa:bb:0e:62:8c:a6:08:00\",\"OUT\":\"\",\"PREC\":\"0x00\",\"PROTO\":\"TCP\",\"RES\":\"0x00\",\"SPT\":\"40194\",\"SRC\":\"2.3.4.5\",\"SYN\":\"\",\"TOS\":\"0x00\",\"TTL\":\"242\",\"URGP\":\"0\",\"WINDOW\":\"1024\",\"timestamp\":\"2020-06-17 13:23:34 +0000 UTC\"}\ndroptailer-6d556bd988-4g8gp droptailer 2020-06-17 13:23:30 +0000 UTC {\"DPT\":\"650\",\"DST\":\"1.2.3.4\",\"ID\":\"12399\",\"IN\":\"vrf104009\",\"LEN\":\"40\",\"MAC\":\"ca:41:f9:80:fa:89:aa:bb:0e:62:8c:a6:08:00\",\"OUT\":\"vlan179\",\"PREC\":\"0x00\",\"PROTO\":\"TCP\",\"RES\":\"0x00\",\"SPT\":\"40194\",\"SRC\":\"2.3.4.5\",\"SYN\":\"\",\"TOS\":\"0x00\",\"TTL\":\"241\",\"URGP\":\"0\",\"WINDOW\":\"1024\",\"timestamp\":\"2020-06-17 13:23:30 +0000 UTC\"}\ndroptailer-6d556bd988-4g8gp droptailer 2020-06-17 13:23:34 +0000 UTC {\"DPT\":\"2362\",\"DST\":\"1.2.3.4\",\"ID\":\"44545\",\"IN\":\"vrf104009\",\"LEN\":\"40\",\"MAC\":\"ca:41:f9:80:fa:89:aa:bb:0e:62:8c:a6:08:00\",\"OUT\":\"\",\"PREC\":\"0x00\",\"PROTO\":\"TCP\",\"RES\":\"0x00\",\"SPT\":\"40194\",\"SRC\":\"2.3.4.5\",\"SYN\":\"\",\"TOS\":\"0x00\",\"TTL\":\"242\",\"URGP\":\"0\",\"WINDOW\":\"1024\",\"timestamp\":\"2020-06-17 13:23:34 +0000 UTC\"}\ndroptailer-6d556bd988-4g8gp droptailer 2020-06-17 13:23:10 +0000 UTC {\"DPT\":\"63351\",\"DST\":\"1.2.3.4\",\"ID\":\"11855\",\"IN\":\"vrf104009\",\"LEN\":\"40\",\"MAC\":\"ca:41:f9:80:fa:89:aa:bb:0e:62:8c:a6:08:00\",\"OUT\":\"vlan179\",\"PREC\":\"0x00\",\"PROTO\":\"TCP\",\"RES\":\"0x00\",\"SPT\":\"54589\",\"SRC\":\"2.3.4.5\",\"SYN\":\"\",\"TOS\":\"0x00\",\"TTL\":\"245\",\"URGP\":\"0\",\"WINDOW\":\"1024\",\"timestamp\":\"2020-06-17 13:23:10 +0000 UTC\"}\ndroptailer-6d556bd988-4g8gp droptailer 2020-06-17 13:23:51 +0000 UTC {\"DPT\":\"8002\",\"DST\":\"1.2.3.4\",\"ID\":\"17539\",\"IN\":\"vrf104009\",\"LEN\":\"40\",\"MAC\":\"ca:41:f9:80:fa:89:aa:bb:0e:62:8c:a6:08:00\",\"OUT\":\"\",\"PREC\":\"0x00\",\"PROTO\":\"TCP\",\"RES\":\"0x00\",\"SPT\":\"47615\",\"SRC\":\"2.3.4.5\",\"SYN\":\"\",\"TOS\":\"0x08\",\"TTL\":\"239\",\"URGP\":\"0\",\"WINDOW\":\"1024\",\"timestamp\":\"2020-06-17 13:23:51 +0000 UTC\"}","category":"page"},{"location":"external/firewall-controller/README/#","page":"firewall-controller","title":"firewall-controller","text":"You can forward the droptailer logs to any log aggregation infrastructure you have in place.","category":"page"},{"location":"external/mini-lab/CONTRIBUTING/#Contributing-1","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"external/mini-lab/CONTRIBUTING/#","page":"Contributing","title":"Contributing","text":"Please check out the contributing section in our docs.","category":"page"},{"location":"external/csi-lvm/DEVELOPMENT/#Local-Development-1","page":"Local Development","title":"Local Development","text":"","category":"section"},{"location":"external/csi-lvm/DEVELOPMENT/#","page":"Local Development","title":"Local Development","text":"First start minikube with enough memory.","category":"page"},{"location":"external/csi-lvm/DEVELOPMENT/#","page":"Local Development","title":"Local Development","text":"minikube start --memory 4g","category":"page"},{"location":"external/csi-lvm/DEVELOPMENT/#","page":"Local Development","title":"Local Development","text":"create 2 loop devices for csi-lvm usage","category":"page"},{"location":"external/csi-lvm/DEVELOPMENT/#","page":"Local Development","title":"Local Development","text":"minikube ssh 'for i in 0 1; do fallocate -l 1G loop${i} ; sudo losetup -f loop${i}; sudo losetup -a ; done'","category":"page"},{"location":"external/csi-lvm/DEVELOPMENT/#","page":"Local Development","title":"Local Development","text":"set docker environment to point to minikube","category":"page"},{"location":"external/csi-lvm/DEVELOPMENT/#","page":"Local Development","title":"Local Development","text":"eval $(minikube docker-env)","category":"page"},{"location":"external/csi-lvm/DEVELOPMENT/#","page":"Local Development","title":"Local Development","text":"build docker images of controller and provisioner","category":"page"},{"location":"external/csi-lvm/DEVELOPMENT/#","page":"Local Development","title":"Local Development","text":"make dockerimages","category":"page"},{"location":"external/csi-lvm/DEVELOPMENT/#","page":"Local Development","title":"Local Development","text":"deploy the controller and start logging in the background","category":"page"},{"location":"external/csi-lvm/DEVELOPMENT/#","page":"Local Development","title":"Local Development","text":"k apply -f deploy/controller.yaml\nstern -n csi-lvm \".*\" &","category":"page"},{"location":"external/csi-lvm/DEVELOPMENT/#","page":"Local Development","title":"Local Development","text":"deploy the pvc´s","category":"page"},{"location":"external/csi-lvm/DEVELOPMENT/#","page":"Local Development","title":"Local Development","text":"k apply -f example/pvc.yaml","category":"page"},{"location":"external/csi-lvm/DEVELOPMENT/#","page":"Local Development","title":"Local Development","text":"start using the pvc in different pod scenarios, see example pod-*.yaml","category":"page"},{"location":"external/csi-lvm/DEVELOPMENT/#NOTICE-on-block-mount-tests-in-minikube-1","page":"Local Development","title":"NOTICE on block mount tests in minikube","text":"","category":"section"},{"location":"external/csi-lvm/DEVELOPMENT/#","page":"Local Development","title":"Local Development","text":"The busybox implementation of losetup lacks some flags on which the kubernetes currently depends on. (see https://github.com/kubernetes/kubernetes/issues/83265 )","category":"page"},{"location":"external/csi-lvm/DEVELOPMENT/#","page":"Local Development","title":"Local Development","text":"So for block mounts on minikube you have to copy a \"full\" linux losetup binary to minikube  ","category":"page"},{"location":"external/csi-lvm/DEVELOPMENT/#","page":"Local Development","title":"Local Development","text":"If you're on linux e.g.:","category":"page"},{"location":"external/csi-lvm/DEVELOPMENT/#","page":"Local Development","title":"Local Development","text":" minikube ssh 'sudo rm /sbin/losetup'\n scp -o 'StrictHostKeyChecking=no' -i $(minikube ssh-key) $(which losetup)  docker@$(minikube ip):/tmp/losetup\n minikube ssh 'sudo mv /tmp/losetup /sbin/losetup'","category":"page"},{"location":"external/metalctl/docs/metalctl_machine/#metalctl-machine-1","page":"-","title":"metalctl machine","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine/#","page":"-","title":"-","text":"manage machines","category":"page"},{"location":"external/metalctl/docs/metalctl_machine/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine/#","page":"-","title":"-","text":"metal machines are bare metal servers.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine/#","page":"-","title":"-","text":"  -h, --help   help for machine","category":"page"},{"location":"external/metalctl/docs/metalctl_machine/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine/#","page":"-","title":"-","text":"metalctl\t - a cli to manage metal devices.\nmetalctl machine console\t - console access to a machine, machine must be created with a ssh public key, authentication is done with your private key.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine/#","page":"-","title":"-","text":"In case the machine did not register properly a direct ipmi console access is available via the –ipmi flag. This is only for administrative access.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine/#","page":"-","title":"-","text":"metalctl machine create\t - create a machine\nmetalctl machine describe\t - describe a machine\nmetalctl machine destroy\t - destroy a machine\nmetalctl machine identify\t - manage machine chassis identify LED power\nmetalctl machine ipmi\t - display ipmi details of the machine, if no machine ID is given all ipmi addresses are returned.\nmetalctl machine issues\t - display machines which are in a potential bad state\nmetalctl machine list\t - list all machines\nmetalctl machine lock\t - lock a machine\nmetalctl machine logs\t - display machine provisioning logs\nmetalctl machine power\t - manage machine power\nmetalctl machine reinstall\t - reinstalls an already allocated machine\nmetalctl machine reserve\t - reserve a machine","category":"page"},{"location":"external/metalctl/docs/metalctl_machine/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_completion/#metalctl-completion-1","page":"~/.bashrc or ~/.profile","title":"metalctl completion","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_completion/#","page":"~/.bashrc or ~/.profile","title":"~/.bashrc or ~/.profile","text":"Generates bash completion scripts","category":"page"},{"location":"external/metalctl/docs/metalctl_completion/#Synopsis-1","page":"~/.bashrc or ~/.profile","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_completion/#","page":"~/.bashrc or ~/.profile","title":"~/.bashrc or ~/.profile","text":"To load completion run","category":"page"},{"location":"external/metalctl/docs/metalctl_completion/#","page":"~/.bashrc or ~/.profile","title":"~/.bashrc or ~/.profile","text":". <(metalctl completion)","category":"page"},{"location":"external/metalctl/docs/metalctl_completion/#","page":"~/.bashrc or ~/.profile","title":"~/.bashrc or ~/.profile","text":"To configure your bash shell to load completions for each session add to your bashrc","category":"page"},{"location":"external/metalctl/docs/metalctl_completion/#/.bashrc-or-/.profile-1","page":"~/.bashrc or ~/.profile","title":"~/.bashrc or ~/.profile","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_completion/#","page":"~/.bashrc or ~/.profile","title":"~/.bashrc or ~/.profile","text":". <(metalctl completion)","category":"page"},{"location":"external/metalctl/docs/metalctl_completion/#","page":"~/.bashrc or ~/.profile","title":"~/.bashrc or ~/.profile","text":"metalctl completion [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_completion/#Options-1","page":"~/.bashrc or ~/.profile","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_completion/#","page":"~/.bashrc or ~/.profile","title":"~/.bashrc or ~/.profile","text":"  -h, --help   help for completion","category":"page"},{"location":"external/metalctl/docs/metalctl_completion/#Options-inherited-from-parent-commands-1","page":"~/.bashrc or ~/.profile","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_completion/#","page":"~/.bashrc or ~/.profile","title":"~/.bashrc or ~/.profile","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_completion/#SEE-ALSO-1","page":"~/.bashrc or ~/.profile","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_completion/#","page":"~/.bashrc or ~/.profile","title":"~/.bashrc or ~/.profile","text":"metalctl\t - a cli to manage metal devices.","category":"page"},{"location":"external/metalctl/docs/metalctl_completion/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"~/.bashrc or ~/.profile","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_describe/#metalctl-machine-describe-1","page":"-","title":"metalctl machine describe","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_describe/#","page":"-","title":"-","text":"describe a machine","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_describe/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_describe/#","page":"-","title":"-","text":"describe a machine in a very detailed form with all properties.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_describe/#","page":"-","title":"-","text":"metalctl machine describe <machine ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_describe/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_describe/#","page":"-","title":"-","text":"  -h, --help   help for describe","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_describe/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_describe/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_describe/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_describe/#","page":"-","title":"-","text":"metalctl machine\t - manage machines","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_describe/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"installation/deployment/#Deploying-metal-stack-1","page":"Installation","title":"Deploying metal-stack","text":"","category":"section"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"We are bootstrapping the metal control plane as well as our partitions with Ansible through CI.","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"In order to build up your deployment, we recommend to make use of the same Ansible roles that we are using by ourselves in order to deploy the metal-stack. You can find them in the repository called metal-roles.","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"In order to wrap up deployment dependencies there is a special deployment base image hosted on Docker Hub that you can use for running the deployment. Using this Docker image eliminates a lot of moving parts in the deployment and should keep the footprints on your system fairly small and maintainable.","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"This document will from now on assume that you want to use our Ansible deployment roles for setting up metal-stack. We will also use the deployment base image, so you should also have Docker installed. It is in the nature of software deployments to differ from site to site, company to company, user to user. Therefore, we can only describe you the way of how the deployment works for us. It is up to you to tweak the deployment described in this document to your requirements.","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"Pages = [\"deployment.md\"]\nDepth = 5","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"warning: Warning\nProbably you need to learn writing Ansible playbooks if you want to be able to deploy the metal-stack as presented in this documentation. Even when starting without any knowledge about Ansible it should not be too hard to follow these docs. In case you need further explanations regarding Ansible please refer to docs.ansible.com.","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"info: Info\nIf you do not want to use Ansible for deployment, you need to come up with a deployment mechanism by yourself. However, you will probably be able to re-use some of our contents from our metal-roles repository, e.g. the Helm chart for deploying the metal control plane.","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"tip: Tip\nYou can use the mini-lab as a template project for your own deployment. It uses the same approach as described in this document.","category":"page"},{"location":"installation/deployment/#Metal-Control-Plane-Deployment-1","page":"Installation","title":"Metal Control Plane Deployment","text":"","category":"section"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"The metal control plane is typically deployed in a Kubernetes cluster. Therefore, this document will assume that you have a Kubernetes cluster ready for getting deployed. Even though it is theoretically possible to deploy metal-stack without Kubernetes, we strongly advise you to use the described method because we believe that Kubernetes gives you a lot of benefits regarding the stability and maintainability of the application deployment.","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"tip: Tip\nFor metal-stack it does not matter where your control plane Kubernetes cluster is located. You can of course use a cluster managed by a hyperscaler. This has the advantage of not having to setup a Kubernetes by yourself and could even become beneficial in terms of fail-safe operation. The only requirement from metal-stack is that your partitions can establish network connections to the metal control plane.","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"Let's start off with a fresh folder for your deployment:","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"mkdir -p metal-stack-deployment\ncd metal-stack-deployment","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"Let's now create the following files and folder structures:","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":".\n├── ansible.cfg\n├── deploy_metal_control_plane.yaml\n├── group_vars\n│   └── control-plane\n│       └── all.yaml\n├── inventories\n│   └── control-plane.yaml\n├── requirements.yaml\n└── roles\n    └── ingress-controller\n        └── tasks\n            └── main.yaml","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"The requirements.yaml is used for declaring Ansible Galaxy role depedencies. It will dynamically provide the metal-roles and the ansible-common role when starting the deployment. The file should contain the following dependencies:","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"using Docs\n\nansible_common = releaseVector()[\"ansible-roles\"][\"ansible-common\"][\"version\"]\nmetal_roles = releaseVector()[\"ansible-roles\"][\"metal-roles\"][\"version\"]\n\nt = \"\"\"\n```yaml\n---\n- src: https://github.com/metal-stack/ansible-common.git\n  name: ansible-common\n  version: %s\n- src: https://github.com/metal-stack/metal-roles.git\n  name: metal-roles\n  version: %s\n```\n\"\"\"\n\nmarkdownTemplate(t, ansible_common, metal_roles)","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"tip: Tip\nThe ansible-common repository contains very general roles and modules that you can also use when extending your deployment further.","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"Then, there will be an inventory for the control plane deployment in control-plane/inventory.yaml that adds the localhost to the control-plane host group:","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"---\ncontrol-plane:\n  hosts:\n    localhost:\n      ansible_python_interpreter: \"{{ ansible_playbook_python }}\"","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"We do this since we are deploying to Kubernetes and do not need to SSH-connect to any hosts for the deployment (which is what Ansible typically does). This inventory is also necessary to pick up the variables inside group_vars/control-plane during the deployment.","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"We also recommend using the following ansible.cfg:","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"[defaults]\nretry_files_enabled = false\nforce_color = true\nhost_key_checking = false\nstdout_callback = yaml\njinja2_native = true\ntransport = ssh\ntimeout = 30\nforce_valid_group_names = ignore\n\n[ssh_connection]\nretries=3\nssh_executable = /usr/bin/ssh","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"Most of the properties in there are up to taste, but make sure you enable the Jinja2 native environment as this is needed for some of our roles in certain cases.","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"Next, we will define the first playbook in a file called deploy_metal_control_plane.yaml. You can start with the following lines:","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"---\n- name: Deploy Control Plane\n  hosts: control-plane\n  connection: local\n  gather_facts: no\n  roles:\n    - name: ansible-common\n      tags: always\n    - name: ingress-controller\n      tags: ingress-controller\n    - name: metal-roles/control-plane/roles/prepare\n      tags: prepare\n    - name: metal-roles/control-plane/roles/nsq\n      tags: nsq\n    - name: metal-roles/control-plane/roles/metal-db\n      tags: metal-db\n    - name: metal-roles/control-plane/roles/ipam-db\n      tags: ipam-db\n    - name: metal-roles/control-plane/roles/masterdata-db\n      tags: masterdata-db\n    - name: metal-roles/control-plane/roles/metal\n      tags: metal","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"Basically, this playbook does the following:","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"Include all the modules, filter plugins, etc. of ansible-common into the play\nDeploys an ingress-controller into your cluster\nDeploys the metal-stack by\nRunning preparation tasks\nDeploying NSQ\nDeploying the rethinkdb database for the metal-api (wrapped in a backup-restore-sidecar),\nDeploying the postgres database for go-ipam (wrapped in a backup-restore-sidecar)\nDeploying the postgres database for the masterdata-api (wrapped in a backup-restore-sidecar)\nApplying the metal control plane helm chart\nAs a next step you have to add a task for deploying an ingress-controller into your cluster. nginx-ingress is what we use. If you want to use another ingress-controller, you need to parametrize the metal roles carefully. When you just use nginx-ingress, make sure to also deploy it to the default namespace ingress-nginx.\nThis is how your roles/ingress-controller/tasks/main.yaml could look like:\n- name: Deploy ingress-controller\n  include_role:\n    name: ansible-common/roles/helm-chart\n  vars:\n    helm_repo: \"https://helm.nginx.com/stable\"\n    helm_chart: nginx-ingress\n    helm_release_name: nginx-ingress\n    helm_target_namespace: ingress-nginx","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"Next, you will need to parametrize the referenced roles to fit your environment. The role parametrization can be looked up in the role documentation on metal-roles/control-plane. You should not need to define a lot of variables for the beginning as most values are reasonably defaulted. The metal-stack release version to deploy can be defined through a special variable called setup_yaml (it will resolve all image versions from the release vector in the releases repository). Your first version of group_vars/control-plane/all.yaml could look like this:","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"using Docs\n\nt = \"\"\"\n```yaml\n---\n# release versions are read from an external YAML file, which is achieved by\n# using the setup_yaml module (see https://github.com/metal-stack/ansible-common)\nsetup_yaml:\n  - var: metal_stack_release\n    version: %s\n    # the metal_stack_release variable is provided through role defaults in\n    # https://github.com/metal-stack/metal-roles\n    # the variable points to the following release vector:\n    # https://github.com/metal-stack/releases\n\n# common defaults\nmetal_control_plane_ingress_dns: <your-dns-domain> # if you do not have a DNS entry, you could also use <ingress-ip>.xip.io\n```\n\"\"\"\n\nmarkdownTemplate(t, releaseVersion())","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"By the time you will certainly add more parametrization to the deployment. When this happens, feel free to split up your all.yaml into separate files to keep everything nice and pretty.","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"Now, it should be possible to run the deployment through a Docker container. Make sure to have the Kubeconfig file of your cluster and set the path in the following command accordingly:","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"using Docs\n\nbase_image = releaseVector()[\"docker-images\"][\"metal-stack\"][\"generic\"][\"deployment-base\"][\"tag\"]\n\nt = raw\"\"\"\n```bash\nexport KUBECONFIG=<path-to-your-cluster-kubeconfig>\ndocker run --rm -it \\\n  -v $(pwd):/workdir \\\n  --workdir /workdir \\\n  -e KUBECONFIG=\"${KUBECONFIG}\" \\\n  -e K8S_AUTH_KUBECONFIG=\"${KUBECONFIG}\" \\\n  metalstack/metal-deployment-base:%s \\\n  /bin/bash -ce \\\n    \"ansible-galaxy install -r requirements.yaml\n    ansible-playbook \\\n      -i inventories/control-plane.yaml \\\n      deploy_metal_control_plane.yaml\"\n```\n\"\"\"\n\nmarkdownTemplate(t, base_image)","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"tip: Tip\nIf you are having issues regarding the deployment take a look at the troubleshoot document. Please give feedback such that we can make the deployment of the metal-stack easier for you and for others!","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"After the deployment has finished (hopefully without any issues!), you should consider deploying some masterdata entities into your metal-api. For example, you can add your first machine sizes, operating system images, partitions and networks. You can do this by further parametrizing the metal role. We will just add an operating system for demonstration purposes. Add the following variable to your group_vars/control-plane/all.yaml:","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"metal_api_images:\n- id: ubuntu-19.10.20200331\n  name: Ubuntu 19.10 20200331\n  description: Ubuntu 19.10 20200331\n  url: http://images.metal-pod.io/metal-os/ubuntu/19.10/20200331/img.tar.lz4\n  features:\n    - machine","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"Then, re-run the deployment and check the existence of the image using our CLI client called metalctl. The configuration for metalctl should look like this:","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"# ~/.metalctl/config.yaml\n---\ncurrent: test\ncontexts:\n  test:\n    # the metal-api endpoint depends on your dns name specified before\n    # you can look up the url to the metal-api via the kubernetes ingress\n    # resource with:\n    # $ kubectl get ingress -n metal-control-plane\n    url: <metal-api-endpoint>\n    # in the future you have to change the HMAC to a strong, random string\n    # in order to protect against unauthorized api access\n    # the default hmac is \"change-me\"\n    hmac: change-me","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"Issue the following command:","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"$ metalctl image ls\nID                              \tNAME                          \tDESCRIPTION                   \tFEATURES\tEXPIRATION\tSTATUS\nubuntu-19.10.20200331           \tUbuntu 19.10 20200331         \tUbuntu 19.10 20200331         \tmachine \t89d 23h   \tpreview","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"The basic principles of how the metal control plane can be deployed should now be clear. It is now up to you to move the deployment execution into your CI and add things like certificates for the ingress-controller and NSQ.","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"info: Info\nImage versions and ansible-role dependencies should be regularly checked for updates and adjusted according to the release notes.","category":"page"},{"location":"installation/deployment/#Setting-Up-the-backup-restore-sidecar-1","page":"Installation","title":"Setting Up the backup-restore-sidecar","text":"","category":"section"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"The backup-restore-sidecar can come up very handy when you want to add another layer of security to the metal-stack databases in your Kubernetes cluster. The sidecar takes backups of the metal databases in small time intervals and stores them in a blobstore of a cloud provider. This way your metal-stack setup can even survive the deletion of your Kubernetes control plane cluster (including all volumes getting lost). After re-deploying metal-stack to another Kubernetes clusters, the databases come up with the latest backup data in a matter of seconds.","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"Checkout the role documentation of the individual databases to find out how to configure the sidecar properly. You can also try out the mechanism from the backup-restore-sidecar repository.","category":"page"},{"location":"installation/deployment/#Certificates-1","page":"Installation","title":"Certificates","text":"","category":"section"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"TODO","category":"page"},{"location":"installation/deployment/#Auth-1","page":"Installation","title":"Auth","text":"","category":"section"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"metal-stack currently supports two authentication methods:","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"dex for providing user authentication through OpenID Connect (OIDC)\nHMAC auth, typically used for access by technical users (because we do not have service account tokens at the time being)","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"In the metal-api, we have three different user roles for authorization:","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"Admin\nEdit\nView","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"How the user permissions are used is documented in the technical API docs.","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"If you decided to set up a dex server, you can parametrize the metal role for using the dex server by defining the variable metal_api_dex_address.","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"info: Info\nWe also have dedicated controllers for using the dex server for Kubernetes clusters when deploying metal-stack along with the Gardener in your environment. The approach is described in further detail in the section Gardener with metal-stack.","category":"page"},{"location":"installation/deployment/#Bootstrapping-a-Partition-1","page":"Installation","title":"Bootstrapping a Partition","text":"","category":"section"},{"location":"installation/deployment/#Partition-Deployment-1","page":"Installation","title":"Partition Deployment","text":"","category":"section"},{"location":"installation/deployment/#Gardener-with-metal-stack-1","page":"Installation","title":"Gardener with metal-stack","text":"","category":"section"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"If you want to deploy metal-stack as a cloud provider for Gardener, you should follow the regular Gardener installation instructions and setup a Gardener cluster first. You can find installation instructions in their docs. metal-stack is an out-of-tree provider and therefore you will not find example files for metal-stack resources in the Gardener repositories. The following list describes the resources and components that you need to deploy into the Gardener cluster in order to make Gardener work with metal-stack:","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"warning: Warning\nThe following list assumes you have Gardener installed in a Kubernetes cluster and that you have a basic understanding of how Gardener works. If you need further help with the following steps, you can also come and ask in our Slack channel.","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"Deploy the validator from the gardener-extension-provider-metal repository to your cluster via Helm\nAdd a cloud profile called metal containing all your machine images, machine types and regions (region names can be chosen freely, the zone names need to match your partition names) together with our metal-stack-specific provider config as defined here\nRegister the gardener-extension-provider-metal controller by deploying the controller-registration into your Gardener cluster, parametrize the embedded chart in the controller registration's values section if necessary (this is the corresponding values file)\nmetal-stack does not provide an own backup storage infrastructure for now. If you want to enable ETCD backups (which you should do because metal-stack also does not have persistent storage out of the box, which makes these backups even more valuable), you should deploy an extension-provider of another cloud provider and configure it to only reconcile the backup buckets (you can reference this backup infrastructure used for the metal shoot in the shoot spec)\nRegister the os-extension-provider-metal controller by deploying the controller-registration into your Gardener cluster, this controller can transform the operating system configuration from Gardener into Ingition user data\nYou need to use the Gardener's networking-calico controller for setting up shoot CNI, you will have to put specific provider configuration into the shoot spec to make it work with metal-stack:\n     networking:\n       type: calico\n       # we can peer with the frr within 10.244.0.0/16, which we do with the metallb\n       # the networks for the shoot need to be disjunct with the networks of the seed, otherwise the VPN connection will not work properly\n       # the seeds are typically deployed with podCIDR 10.244.128.0/18 and serviceCIDR 10.244.192.0/18\n       # the shoots are typically deployed with podCIDR 10.244.0.0/18 and serviceCIDR 10.244.64.0/18\n       pods: 10.244.0.0/18\n       services: 10.244.64.0/18\n       providerConfig:\n         apiVersion: calico.networking.extensions.gardener.cloud/v1alpha1\n         kind: NetworkConfig\n         backend: vxlan\n         ipv4:\n           pool: vxlan\n           mode: Always\n           autoDetectionMethod: interface=lo\n         typha:\n           enabled: false\nFor your seed cluster you will need to provide the provider secret for metal-stack containing the key metalAPIHMac, which is the API HMAC to grant editor access to the metal-api\nCheckout our current provider configuration for infratructure and control-plane before deploying your shoot","category":"page"},{"location":"installation/deployment/#","page":"Installation","title":"Installation","text":"tip: Tip\nWe are officially supported by Gardener dashboard. The dashboard can also help you setting up some of the resources mentioned above.","category":"page"},{"location":"external/metalctl/docs/metalctl_switch_list/#metalctl-switch-list-1","page":"-","title":"metalctl switch list","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch_list/#","page":"-","title":"-","text":"list all switches","category":"page"},{"location":"external/metalctl/docs/metalctl_switch_list/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch_list/#","page":"-","title":"-","text":"list all switches","category":"page"},{"location":"external/metalctl/docs/metalctl_switch_list/#","page":"-","title":"-","text":"metalctl switch list [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_switch_list/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch_list/#","page":"-","title":"-","text":"  -h, --help   help for list","category":"page"},{"location":"external/metalctl/docs/metalctl_switch_list/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch_list/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_switch_list/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch_list/#","page":"-","title":"-","text":"metalctl switch\t - manage switches","category":"page"},{"location":"external/metalctl/docs/metalctl_switch_list/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_destroy/#metalctl-machine-destroy-1","page":"-","title":"metalctl machine destroy","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_destroy/#","page":"-","title":"-","text":"destroy a machine","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_destroy/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_destroy/#","page":"-","title":"-","text":"destroy a machine and destroy all data stored on the local disks. Once destroyed it is back for usage by other projects. A destroyed machine can not restored anymore","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_destroy/#","page":"-","title":"-","text":"metalctl machine destroy <machine ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_destroy/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_destroy/#","page":"-","title":"-","text":"  -h, --help   help for destroy","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_destroy/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_destroy/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_destroy/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_destroy/#","page":"-","title":"-","text":"metalctl machine\t - manage machines","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_destroy/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_issues/#metalctl-machine-issues-1","page":"-","title":"metalctl machine issues","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_issues/#","page":"-","title":"-","text":"display machines which are in a potential bad state","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_issues/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_issues/#","page":"-","title":"-","text":"display machines which are in a potential bad state","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_issues/#","page":"-","title":"-","text":"metalctl machine issues [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_issues/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_issues/#","page":"-","title":"-","text":"  -h, --help   help for issues","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_issues/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_issues/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_issues/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_issues/#","page":"-","title":"-","text":"metalctl machine\t - manage machines","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_issues/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_list/#metalctl-network-ip-list-1","page":"-","title":"metalctl network ip list","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_list/#","page":"-","title":"-","text":"manage IPs","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_list/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_list/#","page":"-","title":"-","text":"manage IPs","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_list/#","page":"-","title":"-","text":"metalctl network ip list [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_list/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_list/#","page":"-","title":"-","text":"  -h, --help               help for list\n      --ipaddress string   ipaddress to filter [optional]\n      --machineid string   machineid to filter [optional]\n      --network string     network to filter [optional]\n      --prefix string      prefx to filter [optional]\n      --project string     project to filter [optional]\n      --tags strings       tags to filter [optional]\n      --type string        type to filter [optional]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_list/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_list/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_list/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_list/#","page":"-","title":"-","text":"metalctl network ip\t - manage IPs","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_list/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_describe/#metalctl-size-describe-1","page":"-","title":"metalctl size describe","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_describe/#","page":"-","title":"-","text":"describe a size","category":"page"},{"location":"external/metalctl/docs/metalctl_size_describe/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_describe/#","page":"-","title":"-","text":"describe a size","category":"page"},{"location":"external/metalctl/docs/metalctl_size_describe/#","page":"-","title":"-","text":"metalctl size describe <sizeID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_size_describe/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_describe/#","page":"-","title":"-","text":"  -h, --help   help for describe","category":"page"},{"location":"external/metalctl/docs/metalctl_size_describe/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_describe/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_size_describe/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_describe/#","page":"-","title":"-","text":"metalctl size\t - manage sizes","category":"page"},{"location":"external/metalctl/docs/metalctl_size_describe/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_update/#metalctl-size-update-1","page":"-","title":"metalctl size update","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_update/#","page":"-","title":"-","text":"update a size","category":"page"},{"location":"external/metalctl/docs/metalctl_size_update/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_update/#","page":"-","title":"-","text":"update a size","category":"page"},{"location":"external/metalctl/docs/metalctl_size_update/#","page":"-","title":"-","text":"metalctl size update [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_size_update/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_update/#","page":"-","title":"-","text":"  -h, --help   help for update","category":"page"},{"location":"external/metalctl/docs/metalctl_size_update/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_update/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_size_update/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_update/#","page":"-","title":"-","text":"metalctl size\t - manage sizes","category":"page"},{"location":"external/metalctl/docs/metalctl_size_update/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_apply/#metalctl-network-ip-apply-1","page":"-","title":"metalctl network ip apply","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_apply/#","page":"-","title":"-","text":"create/update an IP","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_apply/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_apply/#","page":"-","title":"-","text":"create/update an IP","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_apply/#","page":"-","title":"-","text":"metalctl network ip apply [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_apply/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_apply/#","page":"-","title":"-","text":"  -h, --help   help for apply","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_apply/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_apply/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_apply/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_apply/#","page":"-","title":"-","text":"metalctl network ip\t - manage IPs","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_apply/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_create/#metalctl-image-create-1","page":"-","title":"metalctl image create","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_create/#","page":"-","title":"-","text":"create a image","category":"page"},{"location":"external/metalctl/docs/metalctl_image_create/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_create/#","page":"-","title":"-","text":"create a image","category":"page"},{"location":"external/metalctl/docs/metalctl_image_create/#","page":"-","title":"-","text":"metalctl image create [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_image_create/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_create/#","page":"-","title":"-","text":"  -d, --description string   Description of the image. [required]\n      --features strings     features of the image, can be one of machine|firewall\n  -h, --help                 help for create\n      --id string            ID of the image. [required]\n  -n, --name string          Name of the image. [optional]","category":"page"},{"location":"external/metalctl/docs/metalctl_image_create/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_create/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_image_create/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_create/#","page":"-","title":"-","text":"metalctl image\t - manage images","category":"page"},{"location":"external/metalctl/docs/metalctl_image_create/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_delete/#metalctl-partition-delete-1","page":"-","title":"metalctl partition delete","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_delete/#","page":"-","title":"-","text":"delete a partition","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_delete/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_delete/#","page":"-","title":"-","text":"delete a partition","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_delete/#","page":"-","title":"-","text":"metalctl partition delete <partitionID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_delete/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_delete/#","page":"-","title":"-","text":"  -h, --help   help for delete","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_delete/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_delete/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_delete/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_delete/#","page":"-","title":"-","text":"metalctl partition\t - manage partitions","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_delete/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_create/#metalctl-network-create-1","page":"-","title":"metalctl network create","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_create/#","page":"-","title":"-","text":"create a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_create/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_create/#","page":"-","title":"-","text":"create a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_create/#","page":"-","title":"-","text":"metalctl network create [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_create/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_create/#","page":"-","title":"-","text":"  -d, --description string            description of the network to create. [optional]\n      --destinationprefixes strings   destination prefixes in this network.\n  -h, --help                          help for create\n      --id string                     id of the network to create. [optional]\n  -n, --name string                   name of the network to create. [optional]\n      --nat                           set nat flag of network, if set to true, traffic from this network will be natted.\n  -p, --partition string              partition where this network should exist.\n      --prefixes strings              prefixes in this network.\n      --primary                       set primary flag of network, if set to true, this network is used to start machines there.\n      --underlay                      set underlay flag of network, if set to true, this is used to transport underlay network traffic\n      --vrf int                       vrf of this network\n      --vrfshared                     vrf shared allows multiple networks to share a vrf","category":"page"},{"location":"external/metalctl/docs/metalctl_network_create/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_create/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_create/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_create/#","page":"-","title":"-","text":"metalctl network\t - manage networks","category":"page"},{"location":"external/metalctl/docs/metalctl_network_create/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_allocate/#metalctl-network-ip-allocate-1","page":"-","title":"metalctl network ip allocate","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_allocate/#","page":"-","title":"-","text":"allocate an IP, if non given the next free is allocated, otherwise the given IP is checked for availability.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_allocate/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_allocate/#","page":"-","title":"-","text":"allocate an IP, if non given the next free is allocated, otherwise the given IP is checked for availability.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_allocate/#","page":"-","title":"-","text":"metalctl network ip allocate [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_allocate/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_allocate/#","page":"-","title":"-","text":"  -d, --description string   description of the IP to allocate. [optional]\n  -h, --help                 help for allocate\n  -n, --name string          name of the IP to allocate. [optional]\n      --network string       network from where the IP should be allocated.\n      --project string       project for which the IP should be allocated.\n      --tags strings         tags to attach to the IP.\n      --type string          type of the IP to allocate: ephemeral|static [optional] (default \"ephemeral\")","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_allocate/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_allocate/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_allocate/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_ip_allocate/#","page":"-","title":"-","text":"metalctl network ip\t - manage IPs","category":"page"},{"location":"external/metalctl/docs/metalctl_network_ip_allocate/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition/#metalctl-partition-1","page":"-","title":"metalctl partition","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition/#","page":"-","title":"-","text":"manage partitions","category":"page"},{"location":"external/metalctl/docs/metalctl_partition/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition/#","page":"-","title":"-","text":"a partition is a group of machines and network which is logically separated from other partitions. Machines have no direct network connections between partitions.","category":"page"},{"location":"external/metalctl/docs/metalctl_partition/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition/#","page":"-","title":"-","text":"  -h, --help   help for partition","category":"page"},{"location":"external/metalctl/docs/metalctl_partition/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_partition/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition/#","page":"-","title":"-","text":"metalctl\t - a cli to manage metal devices.\nmetalctl partition apply\t - create/update a partition\nmetalctl partition capacity\t - show partition capacity\nmetalctl partition create\t - create a partition\nmetalctl partition delete\t - delete a partition\nmetalctl partition describe\t - describe a partition\nmetalctl partition edit\t - edit a partition\nmetalctl partition list\t - list all partitions\nmetalctl partition update\t - update a partition","category":"page"},{"location":"external/metalctl/docs/metalctl_partition/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_off/#metalctl-machine-power-off-1","page":"-","title":"metalctl machine power off","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_off/#","page":"-","title":"-","text":"power off a machine","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_off/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_off/#","page":"-","title":"-","text":"set the machine to power off state, if the machine already was off nothing happens. It will usually take some time to power off the machine, depending on the machine type. Power on will therefore not work if the machine is in the powering off phase.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_off/#","page":"-","title":"-","text":"metalctl machine power off <machine ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_off/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_off/#","page":"-","title":"-","text":"  -h, --help   help for off","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_off/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_off/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_off/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_off/#","page":"-","title":"-","text":"metalctl machine power\t - manage machine power","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_off/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"#Introduction-1","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"metal-stack is a software that provides an API for provisioning and managing physical servers in the data center. To categorize this product, we commonly use the terms Metal-as-a-Service (MaaS) or bare metal cloud.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"From the perspective of a user, the metal-stack does not feel different from working with any other cloud provider. Users manage their resources (machines, networks and ip addresses, etc.) by themselves, turning your data center into an elastic cloud infrastructure. The major difference to other cloud providers is that compute power and data reside in your own data center.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Pages = [\"index.md\"]\nDepth = 5","category":"page"},{"location":"#Key-Characteristics-1","page":"Introduction","title":"Key Characteristics","text":"","category":"section"},{"location":"#On-Premise-1","page":"Introduction","title":"On-Premise","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Running on-premise gives you data sovereignty and usually a better price/performance ratio than with hyperscalers (especially the larger your environment gets). Another benefit of running on-premise is an easier connectivity to existing company networks.","category":"page"},{"location":"#Fast-Provisioning-1","page":"Introduction","title":"Fast Provisioning","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Provisioning bare metal machines should not feel much different from virtual machines. metal-stack is capable of provisioning servers in less than a minute. The underlying network topology is based on BGP and allows announcing new routes to your host machines in a matter of seconds.","category":"page"},{"location":"#No-Ops-1","page":"Introduction","title":"No-Ops","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Part of the metal-stack runs on dedicated switches in your data center. This way, it is possible to automate server inventorization, permanently reconcile network configuration and automatically manage machine lifecycles. Manual configuration is neither required nor wanted.","category":"page"},{"location":"#Security-1","page":"Introduction","title":"Security","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Our networking approach was designed for highest standards on security. Also, we enforce firewalling on dedicated tenant firewalls before users can establish connections to other networks than their private tenant network. API authentication and authorization is done with the help of OIDC.","category":"page"},{"location":"#API-driven-1","page":"Introduction","title":"API driven","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"The development of metal-stack is strictly API driven and offers self-service to end-users. This approach delivers the highest possible degree of automation, maintainability and performance.","category":"page"},{"location":"#Ready-for-Kubernetes-1","page":"Introduction","title":"Ready for Kubernetes","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Not only does the metal-stack run smoothly on Kubernetes (K8s). The major intent of metal-stack has always been to build a scalable machine infrastructure for Kubernetes as a Service (KaaS). In partnership with the open-source project Gardener, we can provision Kubernetes clusters on metal-stack at scale.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"From the perspective of the Gardener, the metal-stack is just another cloud provider. The time savings compared to providing machines and Kubernetes by hand are significant. We actually want to be able to compete with offers of public cloud providers, especially regarding speed and usability.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Of course, you can use metal-stack only for machine provisioning as well and just put something else on top of the metal infrastructure.","category":"page"},{"location":"#Open-Source-1","page":"Introduction","title":"Open Source","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"The metal-stack is open source and free of constraints regarding vendors and third-party products. The stack is completely built on open source products. We have a community actively working on the metal-stack, which can assist you delivering all reasonable features you are gonna need.","category":"page"},{"location":"#Why-Bare-Metal?-1","page":"Introduction","title":"Why Bare Metal?","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Bare metal has several advantages over virtual environments and overcomes several drawbacks of virtual machines.","category":"page"},{"location":"#Virtual-Environment-Drawbacks-1","page":"Introduction","title":"Virtual Environment Drawbacks","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Spectre and Meltdown can only be mitigated with a \"cluster per tenant\" approach\nMissing isolation of multi-tenant change impacts\nLicensing restrictions\nNoisy-neighbors","category":"page"},{"location":"#Bare-Metal-Advantages-1","page":"Introduction","title":"Bare Metal Advantages","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Guaranteed and fastest possible performance (especially disk i/o)\nReduced stack depth (Host ➡️ VM ➡️ Application vs. Host ➡️ Container)\nReduced attack surface\nLower costs, higher performance\nNo VM live-migrations\nBigger hardware configurations possible (hypervisors have restrictions, e.g. it is not possible to assign all CPUs to a single VM)","category":"page"},{"location":"#Bare-Metal-Drawbacks-1","page":"Introduction","title":"Bare Metal Drawbacks","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Hardware defects have direct impact (should be considered by design) and can not be mitigated by live-migration as in virtual environments\nCapacity planning is more difficult (no resource overbooking possible)","category":"page"},{"location":"#Conclusion-1","page":"Introduction","title":"Conclusion","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"In the end, we have come to the conclusion that most of the drawbacks of bare metal machines can be mitigated best when running K8s on the machines. K8s will take care of high-availability in case of hardware failures and also supervises machine resources. We are certain that the chosen approach can satisfy the needs of the future users to a higher degree than virtual machines could do.","category":"page"},{"location":"external/metalctl/docs/metalctl_project_describe/#metalctl-project-describe-1","page":"-","title":"metalctl project describe","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project_describe/#","page":"-","title":"-","text":"describe a project","category":"page"},{"location":"external/metalctl/docs/metalctl_project_describe/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project_describe/#","page":"-","title":"-","text":"describe a project","category":"page"},{"location":"external/metalctl/docs/metalctl_project_describe/#","page":"-","title":"-","text":"metalctl project describe <projectID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_project_describe/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project_describe/#","page":"-","title":"-","text":"  -h, --help   help for describe","category":"page"},{"location":"external/metalctl/docs/metalctl_project_describe/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project_describe/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_project_describe/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project_describe/#","page":"-","title":"-","text":"metalctl project\t - manage projects","category":"page"},{"location":"external/metalctl/docs/metalctl_project_describe/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_reinstall/#metalctl-machine-reinstall-1","page":"-","title":"metalctl machine reinstall","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_reinstall/#","page":"-","title":"-","text":"reinstalls an already allocated machine","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_reinstall/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_reinstall/#","page":"-","title":"-","text":"reinstalls an already allocated machine. If it is not yet allocated, nothing happens, otherwise only the machine's primary disk is wiped and the new image will subsequently be installed on that device","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_reinstall/#","page":"-","title":"-","text":"metalctl machine reinstall <machine ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_reinstall/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_reinstall/#","page":"-","title":"-","text":"  -d, --description string   description of the reinstallation. [optional]\n  -h, --help                 help for reinstall\n      --image string         id of the image to get installed. [required]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_reinstall/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_reinstall/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_reinstall/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_reinstall/#","page":"-","title":"-","text":"metalctl machine\t - manage machines","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_reinstall/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network/#metalctl-network-1","page":"-","title":"metalctl network","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network/#","page":"-","title":"-","text":"manage networks","category":"page"},{"location":"external/metalctl/docs/metalctl_network/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network/#","page":"-","title":"-","text":"networks for metal.","category":"page"},{"location":"external/metalctl/docs/metalctl_network/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network/#","page":"-","title":"-","text":"  -h, --help   help for network","category":"page"},{"location":"external/metalctl/docs/metalctl_network/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network/#","page":"-","title":"-","text":"metalctl\t - a cli to manage metal devices.\nmetalctl network allocate\t - allocate a network\nmetalctl network apply\t - create/update a network\nmetalctl network create\t - create a network\nmetalctl network delete\t - delete a network\nmetalctl network free\t - free a network\nmetalctl network ip\t - manage IPs\nmetalctl network list\t - list all networks\nmetalctl network prefix\t - prefix management of a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_logs/#metalctl-machine-logs-1","page":"-","title":"metalctl machine logs","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_logs/#","page":"-","title":"-","text":"display machine provisioning logs","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_logs/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_logs/#","page":"-","title":"-","text":"display machine provisioning logs","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_logs/#","page":"-","title":"-","text":"metalctl machine logs <machine ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_logs/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_logs/#","page":"-","title":"-","text":"  -h, --help   help for logs","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_logs/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_logs/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_logs/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_logs/#","page":"-","title":"-","text":"metalctl machine\t - manage machines","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_logs/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"proposals/MEP4/README/#Multi-tenancy-for-the-metal-api-1","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"","category":"section"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"In the past we decided to treat the metal-api as a \"low-level API\", i.e. the API does not know anything about projects and tenants. A user with editor access can for example assign machines to every project he desires, he can see all the machines available and control them. Even though we always wanted to keep open the possibility to just offer bare metal machines to the end-user, the ultimate objective has always been to create an API for Kubernetes clusters. Hence, we tried to keep the metal-api code base as small as possible and we added resource scoping to a \"higher-level API\", the cloud-api, a component that is not open-source. From there, a user would be able to only see his own clusters and IP addresses.","category":"page"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"The implication is that the metal-api has no multi-tenancy without another layer on top of it that implements resource scoping. One can say that we treat clusters as first-class citizens. In regard of clusters we fulfill the objective that we had from the very beginning: provide a multi-tenant API for Kubernetes clusters to the end-users.","category":"page"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"However, as time passed by, things changed: The metal-stack is becoming an open-source product and we already have promising adopters of our product, who are willing to contribute to metal-stack. This is a serious chance of making our product better and more successful. It turns out that the decision we made was sufficient for us, but for others it is not.","category":"page"},{"location":"proposals/MEP4/README/#Why-adopters-need-multi-tenancy-in-the-metal-api-1","page":"Multi-tenancy for the metal-api","title":"Why adopters need multi-tenancy in the metal-api","text":"","category":"section"},{"location":"proposals/MEP4/README/#Not-every-adopter-will-be-interested-in-the-cloud-api-1","page":"Multi-tenancy for the metal-api","title":"Not every adopter will be interested in the cloud-api","text":"","category":"section"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"For example, users who want to combine the Metal Stack with Gardener, may not want to hide all of the Gardener's functionality behind the cloud-api in the way we do. They want to use the much more powerful Gardener Dashboard instead. The Gardener itself does not need the cloud-api either. It is a cluster-api by itself. It only needs to utilize our \"low-level API\" and actually expects this API to have multi-tenancy as otherwise every logged in user can create / destroy clusters in every existing project from the Gardener dashboard.","category":"page"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"This makes obvious that, with our decision, we placed an unnecessary obstacle in the way of our adopters: They now need to implement an own layer between the Gardener and the metal-api to provide multi-tenancy. From the Gardener-perspective we strongly differ from other cloud providers in this aspect and it is a matter of time when this will become an issue. When we encourage adopters to implement such interfaces on their own we also partly lose control of our product, we increase divergence.","category":"page"},{"location":"proposals/MEP4/README/#We-cannot-claim-that-Metal-Stack-is-a-multi-tenant-solution-on-our-website-1","page":"Multi-tenancy for the metal-api","title":"We cannot claim that Metal Stack is a multi-tenant solution on our website","text":"","category":"section"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"As the cloud-api is not part of the Metal Stack, the promise of multi-tenancy is only true for our network layer. Without the cloud-api to enable multi-tenancy, the network isolation is currently useless for end-users. Users of the Metal Stack can not self-manage machines, networks and ips without compromising the environment and thus, there is no self-service. We lose a valuable selling point when adopters can not immediately make use of our leading edge network isolation where we put so much effort to.","category":"page"},{"location":"proposals/MEP4/README/#Open-partitions-for-third-party-usage-1","page":"Multi-tenancy for the metal-api","title":"Open partitions for third-party usage","text":"","category":"section"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"If a third-party uses Gardener and our metal-api had multi-tenancy, we would be able to allow a third-party to create clusters with workers in our own partitions. At the moment, this is not possible because the Gardener needs to know the HMAC secrets to create worker nodes, which would compromise our environment. If a thirdy-party knows our HMAC we lose control over the machines of our own tenants.","category":"page"},{"location":"proposals/MEP4/README/#We-do-not-actually-want-to-open-source-the-cloud-api-1","page":"Multi-tenancy for the metal-api","title":"We do not actually want to open-source the cloud-api","text":"","category":"section"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"One could think about solving the multi-tenancy issue by adding machine endpoints to the cloud-api. Gardener would then not consume the metal-api anymore but only the cloud-api.","category":"page"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"This approach would not be ideal. We only want to offer a minimum viable product to adopters. The Gardener does not need a cluster-api as provided by the cloud-api. We want to treat additions on top of the basic stack as enterprise products.","category":"page"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"The cloud-api contains billing endpoints, which are a perfect example for an optional addition of the Metal Stack. For basic usage of the Metal Stack a user does not need billing. Still, billing functionality can be interesting for some enterprises, who are like us, selling the infrastructure to third-parties.","category":"page"},{"location":"proposals/MEP4/README/#Increased-security-for-provider-admins-1","page":"Multi-tenancy for the metal-api","title":"Increased security for provider admins","text":"","category":"section"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"Multi-tenancy in the metal-api also has the potential to limit the damage that a provider administrator can cause by mistake. If an administrator has to acquire project permissions on machine-level we can effectively reduce the damage he can make to this single project.","category":"page"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"Another example would be the automatic provisioning of a Gitlab CI runner used for integration testing (a use case that we have where we do not require the cloud-api). This can easily be done in automated manner with Ansible and the Metal dynamic inventory + modules. However, with Ansible, mistakes in the automation can be made very quickly and if Ansible would only see machines of a dedicated project, this would also reduce damage it can make.","category":"page"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"It is likely that there are more similar use-cases like that to come (maybe even for the storage solution?).","category":"page"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"Also the surface for our Gardener components (metal-ccm, gardener-extension-provider-metal, machine-controller-manager) would be reduced to project scopes.","category":"page"},{"location":"proposals/MEP4/README/#Conclusion-1","page":"Multi-tenancy for the metal-api","title":"Conclusion","text":"","category":"section"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"For these reasons the decision we made is very likely to have a negative impact on the adoption-rate of the Metal Stack and we should think about treating machines, networks and ips as first-class citizens as well. This makes us closer to the offer of hyperscalers. As mentioned in the beginning, all the time we tried to keep the possibility open to just offer bare metal machines. Let's continue with decision by adding multi-tenancy to the metal-api.","category":"page"},{"location":"proposals/MEP4/README/#Required-actions-1","page":"Multi-tenancy for the metal-api","title":"Required actions","text":"","category":"section"},{"location":"proposals/MEP4/README/#Resource-scoping-1","page":"Multi-tenancy for the metal-api","title":"Resource scoping","text":"","category":"section"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"Just as implemented by the cloud-api, resource scoping needs to be added to almost every endpoint of the metal-api:","category":"page"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"Machines / Firewalls\nA user should only be able to view machines / firewalls of the projects he has at least view access to\nA user should only be able to create and destroy machines / firewalls for projects he has at least editor access to Provider-tenants with at least view access can additionally view machines which have no project assignments Provider-tenants with at least editor access can additionally allocate / reserve machines which have no project assignments\nNetworks\nA user should only be able to view networks of the projects he has at least view access to\nA user should only be able to allocate networks of projects he has at least editor access to\nA user should only be able to free networks assigned to projects he has at least editor access to Provider-tenants with at least view access can additionally view networks which have no project assignments Provider-tenants with at least editor access can additionally edit networks which have no project assignments Provider-tenants with at least admin access can additionally create or remove networks which have no project assignments\nIPs\nA user should only be able to view ips of the projects he has at least view access to\nA user should only be able to allocate ips in networks of projects he has at least editor access to\nA user should only be able to free ips assigned to projects he has at least editor access to\nProjects\nA logged in user is able to create projects when he has the permission to create projects\nA user should only be able to view projects where he has at least view access to\nA user should only be able to delete projects where he has admin access to\nPartitions / Images\nOnly provider-admin users can add, delete, update\nAll logged in users can view\nIPMI\nOnly provider-tenants can view machine IPMI data\nEndpoints for internal use\nShould only be accessible with HMAC auth and the HMAC secrets are only known by components of the Metal Stack (mainly for communication between partition and control plane), never for third-party usage","category":"page"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"For all of this we need enhance the database queries with a filter for projects that a user has access to. As we already use a client to the masterdata-api in the metal-api, we can extract project memberships of a logged in user from there.","category":"page"},{"location":"proposals/MEP4/README/#More-permissions-1","page":"Multi-tenancy for the metal-api","title":"More permissions","text":"","category":"section"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"We do not only need kaas-... permissions in the LDAP but also maas-. This way we can differentiate between permissions for the cloud-api and permissions for the metal-api.","category":"page"},{"location":"proposals/MEP4/README/#Service-account-tokens-/-technical-users-1","page":"Multi-tenancy for the metal-api","title":"Service account tokens / technical users","text":"","category":"section"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"We need to provide the possibility for users to obtain access tokens to use for technical purposes (CI, third-party tooling like Gardener, ...).","category":"page"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"We do not have this functionality yet, but it would also become a necessity for the cloud-api at some point in the future.","category":"page"},{"location":"proposals/MEP4/README/#Cloud-API-1","page":"Multi-tenancy for the metal-api","title":"Cloud API","text":"","category":"section"},{"location":"proposals/MEP4/README/#","page":"Multi-tenancy for the metal-api","title":"Multi-tenancy for the metal-api","text":"Project creation and deletion again have to be moved back into the metal-api, this also frees adopters from the need to write an own API in order to manage projects- The cloud-api will (again) only proxy project endpoints through to the metal-api\nDo not point the secret bindings to a the shared provider secret in a partition. Create an individual provider-secret for the logged in tenant. The Gardener needs to use this tenant-specific provider secret to talk to the metal-api, do not give the Gardener HMAC access anymore.\nThe provider secret partition mapping can be removed from the cloud-api config and from the deployment","category":"page"},{"location":"contributing/#Contributing-1","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"This document describes the way we want to contribute code to the projects of metal-stack, which are hosted on github.com/metal-stack.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"The document is meant to be understood as a general guideline for contributions, but not as burden to be placed on a developer. Use your best judgment when contributing code. Try to be as clean and precise as possible when writing code and try to make your code as maintainable and understandable as possible for other people.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Even if it should go without saying, we live an open culture of discussion, in which everybody is welcome to participate. We treat every contribution with respect and objectiveness with the general aim to write software of quality.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"If you want, feel free to propose changes to this document in a pull request.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Pages = [\"contributing.md\"]\nDepth = 5","category":"page"},{"location":"contributing/#How-Can-I-Contribute?-1","page":"Contributing","title":"How Can I Contribute?","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Open a Github issue in the project you would like to contribute. Within the issue, your idea can be discussed. It is also possible to directly create a pull request when the set of changes is relatively small.","category":"page"},{"location":"contributing/#Pull-Requests-1","page":"Contributing","title":"Pull Requests","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"The process described here has several goals:","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Maintain quality\nEnable a sustainable system to review contributions\nEnable documented and reproducible addition of contributions","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Create a meaningful issue describing the WHY? of your contribution\nCreate a repository fork within the context of that issue.\nCreate a Draft Pull Request to the master branch of the target repository.\nDevelop, document and test your contribution (try not to solve more than one issue in a single pull request)\nAsk for merging your contribution by removing the draft marker\nIf code owners are defined, try to assign the request to a code owner","category":"page"},{"location":"contributing/#General-Objectives-1","page":"Contributing","title":"General Objectives","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"This section contains language-agnostic topics that all metal-stack projects are trying to follow.","category":"page"},{"location":"contributing/#Code-Ownership-1","page":"Contributing","title":"Code Ownership","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"The code base is owned by the entire team and every member is allowed to contribute changes to any of the projects. This is considered as collective code ownership (see https://martinfowler.com/bliki/CodeOwnership.html).","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"As a matter of fact, there are persons in a project, which already have experience with the sources. These are defined directly in the repository's CODEOWNERS file. If you want to merge changes into the master branch, it is advisable to include code owners into the proecess of discussion and merging.","category":"page"},{"location":"contributing/#Microservices-1","page":"Contributing","title":"Microservices","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"One major ambition of metal-stack is to follow the idea of microservices. This way, we want to achieve that we can","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"adapt to changes faster than with monolithic architectures,\nbe free of restrictions due to certain choices of technology,\nleverage powerful traits of cloud infrastructures (e.g. high-scalability, high-availability, ...).","category":"page"},{"location":"contributing/#Programming-Languages-1","page":"Contributing","title":"Programming Languages","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"We are generally open to write code in any language that fits best to the function of the software. However, we encourage golang to be the main language of metal-stack as we think that it makes development faster when not establishing too many different languages in our architecture. Reason for this is that we are striving for consistent behavior of the microservices, similar to what has been described for the Twelve-Factor App (see https://12factor.net/). We help enforcing unified behavior by allowing a small layer of shared code for every programming language. We will refer to this shared code as \"libraries\" for the rest of this document.","category":"page"},{"location":"contributing/#Artifacts-1","page":"Contributing","title":"Artifacts","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Artifacts are always produced by a CI process (Github Actions).","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Docker images are published on Docker Hub using the metalstack user.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Binary artifacts or images are uploaded to GKE buckets.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"When building Docker images, please consider our build tool docker-make or the specific docker-make action respectively.","category":"page"},{"location":"contributing/#APIs-1","page":"Contributing","title":"APIs","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"We are currently making use of Swagger when we exposing traditional REST APIs for end-users. This helps us with being technology-agnostic as we can generate clients in almost any language using go-swagger. Swagger additionally simplifies the documentation of our APIs.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Most APIs though are not required to be user-facing but are of technical nature. These are preferred to be implemented using grpc.","category":"page"},{"location":"contributing/#Versioning-1","page":"Contributing","title":"Versioning","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Artifacts are versioned by tagging the respective repository with a tag starting with the letter v. After the letter, there stands a valid semantic version.","category":"page"},{"location":"contributing/#Documentation-1","page":"Contributing","title":"Documentation","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"In order to make it easier for others to understand a project, we document general information and usage instructions in a README.md in any project.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"In addition to that, we document a microservice in the docs repository. The documentation should contain the reasoning why this service exists and why it was being implemented the way it was being implemented. The aim of this procedure is to reduce the time for contributors to comprehend architectural decisions that were made during the process of writing the software and to clarify the general purpose of this service in the entire context of the software.","category":"page"},{"location":"contributing/#Guidelines-1","page":"Contributing","title":"Guidelines","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"This chapter describes general guidelines on how to develop and contribute code for a certain programming language.","category":"page"},{"location":"contributing/#Golang-1","page":"Contributing","title":"Golang","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Development follows the official guide to:","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Write clear, idiomatic Go code: https://golang.org/doc/effective_go.html\nLearn from mistakes that must not be repeated: https://github.com/golang/go/wiki/CodeReviewComments\nApply appropriate names to your artifacts:\nhttps://talks.golang.org/2014/names.slide#1\nhttps://blog.golang.org/package-names\nhttps://golang.org/doc/effective_go.html#names\nEnable others to understand the reasoning of non-trivial code sequences by applying a meaningful documentation.","category":"page"},{"location":"contributing/#Development-Decisions-1","page":"Contributing","title":"Development Decisions","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Dependency Management by using Go modules\nBuild and Test Automation by using GNU Make.\nEnd-user APIs should consider using go-swagger and Go-Restful Technical APIs should consider using grpc","category":"page"},{"location":"contributing/#Libraries-1","page":"Contributing","title":"Libraries","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"metal-stack maintains several libraries that you should utilize in your project in order unify common behavior. Some of these projects are:","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"metal-go\nmetal-lib","category":"page"},{"location":"contributing/#Error-Handling-with-Generated-Swagger-Clients-1","page":"Contributing","title":"Error Handling with Generated Swagger Clients","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"From the server-side you should ensure that you are returning the common error json struct in case of an error as defined in the metal-lib/httperrors. Ensure you are using go-restful >= v2.9.1 and go-restful-openapi >= v0.13.1 (allows default responses with error codes other than 200).","category":"page"},{"location":"contributing/#Documentation-2","page":"Contributing","title":"Documentation","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"We want to share knowledge and keep things simple. If things cannot kept simple we want enable everybody to understand them by:","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Document in short sentences (See https://github.com/golang/go/wiki/CodeReviewComments#comment-sentences).\nDo not explain the HOW (this is already documented by your code and documenting the obvious is considered a defect).\nExplain the WHY. Add a \"to\" in your documentation line to force yourself to explain the reasonning (e.g.  \"<THE WHAT> to <THE TO>\").","category":"page"},{"location":"contributing/#Python-1","page":"Contributing","title":"Python","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Development follows the official guide to:","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Style Guide for Python Code (PEP 8): https://www.python.org/dev/peps/pep-0008/\nThe use of an IDE like PyCharm helps to write compliant code easily\nConsider setuptools for packaging\nIf you want to add a Python microservice to the mix, consider pyinstaller on Alpine to achieve small image sizes","category":"page"},{"location":"apidocs/apidocs/#API-Documentation-1","page":"API Documentation","title":"API Documentation","text":"","category":"section"},{"location":"apidocs/apidocs/#","page":"API Documentation","title":"API Documentation","text":"In this section you will find links to the API documentation of metal-stack components.","category":"page"},{"location":"apidocs/apidocs/#","page":"API Documentation","title":"API Documentation","text":"using Docs\n\nmetal_api_image = releaseVector()[\"docker-images\"][\"metal-stack\"][\"control-plane\"][\"metal-api\"][\"tag\"]\ncontent = redocTemplate(\"metal-api\", string(\"https://raw.githubusercontent.com/metal-stack/metal-api/\", metal_api_image, \"/spec/metal-api.json\"))\n\nf = open(string(@__DIR__, \"/metal-api/index.html\"), \"w\")\nwrite(f, content)\nclose(f);\n\nnothing","category":"page"},{"location":"apidocs/apidocs/#","page":"API Documentation","title":"API Documentation","text":"metal-api","category":"page"},{"location":"external/metalctl/docs/metalctl_image_apply/#metalctl-image-apply-1","page":"-","title":"metalctl image apply","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_apply/#","page":"-","title":"-","text":"create/update a image","category":"page"},{"location":"external/metalctl/docs/metalctl_image_apply/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_apply/#","page":"-","title":"-","text":"create/update a image","category":"page"},{"location":"external/metalctl/docs/metalctl_image_apply/#","page":"-","title":"-","text":"metalctl image apply [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_image_apply/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_apply/#","page":"-","title":"-","text":"  -h, --help   help for apply","category":"page"},{"location":"external/metalctl/docs/metalctl_image_apply/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_apply/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_image_apply/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_apply/#","page":"-","title":"-","text":"metalctl image\t - manage images","category":"page"},{"location":"external/metalctl/docs/metalctl_image_apply/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_list/#metalctl-network-list-1","page":"-","title":"metalctl network list","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_list/#","page":"-","title":"-","text":"list all networks","category":"page"},{"location":"external/metalctl/docs/metalctl_network_list/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_list/#","page":"-","title":"-","text":"list all networks","category":"page"},{"location":"external/metalctl/docs/metalctl_network_list/#","page":"-","title":"-","text":"metalctl network list [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_list/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_list/#","page":"-","title":"-","text":"      --destination-prefixes strings   destination prefixes to filter, use it like: --destination-prefixes prefix1,prefix2.\n  -h, --help                           help for list\n      --id string                      ID to filter [optional]\n      --name string                    name to filter [optional]\n      --nat                            nat to filter [optional]\n      --parent string                  parent network to filter [optional]\n      --partition string               partition to filter [optional]\n      --prefixes strings               prefixes to filter, use it like: --prefixes prefix1,prefix2.\n      --privatesuper                   privatesuper to filter [optional]\n      --project string                 project to filter [optional]\n      --underlay                       underlay to filter [optional]\n      --vrf int                        vrf to filter [optional]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_list/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_list/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_list/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_list/#","page":"-","title":"-","text":"metalctl network\t - manage networks","category":"page"},{"location":"external/metalctl/docs/metalctl_network_list/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_delete/#metalctl-network-delete-1","page":"-","title":"metalctl network delete","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_delete/#","page":"-","title":"-","text":"delete a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_delete/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_delete/#","page":"-","title":"-","text":"delete a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_delete/#","page":"-","title":"-","text":"metalctl network delete <networkID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_delete/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_delete/#","page":"-","title":"-","text":"  -h, --help   help for delete","category":"page"},{"location":"external/metalctl/docs/metalctl_network_delete/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_delete/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_delete/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_delete/#","page":"-","title":"-","text":"metalctl network\t - manage networks","category":"page"},{"location":"external/metalctl/docs/metalctl_network_delete/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image/#metalctl-image-1","page":"-","title":"metalctl image","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image/#","page":"-","title":"-","text":"manage images","category":"page"},{"location":"external/metalctl/docs/metalctl_image/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image/#","page":"-","title":"-","text":"os images available to be installed on machines.","category":"page"},{"location":"external/metalctl/docs/metalctl_image/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image/#","page":"-","title":"-","text":"  -h, --help   help for image","category":"page"},{"location":"external/metalctl/docs/metalctl_image/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_image/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image/#","page":"-","title":"-","text":"metalctl\t - a cli to manage metal devices.\nmetalctl image apply\t - create/update a image\nmetalctl image create\t - create a image\nmetalctl image delete\t - delete a image\nmetalctl image describe\t - describe a image\nmetalctl image edit\t - edit a image\nmetalctl image list\t - list all images\nmetalctl image update\t - update a image","category":"page"},{"location":"external/metalctl/docs/metalctl_image/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_console/#metalctl-machine-console-1","page":"-","title":"metalctl machine console","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_console/#","page":"-","title":"-","text":"console access to a machine, machine must be created with a ssh public key, authentication is done with your private key. In case the machine did not register properly a direct ipmi console access is available via the –ipmi flag. This is only for administrative access.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_console/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_console/#","page":"-","title":"-","text":"console access to a machine, machine must be created with a ssh public key, authentication is done with your private key. In case the machine did not register properly a direct ipmi console access is available via the –ipmi flag. This is only for administrative access.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_console/#","page":"-","title":"-","text":"metalctl machine console <machine ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_console/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_console/#","page":"-","title":"-","text":"  -h, --help                  help for console\n      --ipmi                  use ipmitool with direct network access (admin only).\n      --ipmipassword string   overwrite ipmi password (admin only).\n      --ipmiuser string       overwrite ipmi user (admin only).\n  -p, --sshidentity string    SSH key file, if not given the default ssh key will be used if present [optional].","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_console/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_console/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_console/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_console/#","page":"-","title":"-","text":"metalctl machine\t - manage machines","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_console/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project/#metalctl-project-1","page":"-","title":"metalctl project","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project/#","page":"-","title":"-","text":"manage projects","category":"page"},{"location":"external/metalctl/docs/metalctl_project/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project/#","page":"-","title":"-","text":"a project groups multiple networks for a tenant","category":"page"},{"location":"external/metalctl/docs/metalctl_project/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project/#","page":"-","title":"-","text":"  -h, --help   help for project","category":"page"},{"location":"external/metalctl/docs/metalctl_project/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_project/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_project/#","page":"-","title":"-","text":"metalctl\t - a cli to manage metal devices.\nmetalctl project describe\t - describe a project\nmetalctl project list\t - list all projects","category":"page"},{"location":"external/metalctl/docs/metalctl_project/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_delete/#metalctl-size-delete-1","page":"-","title":"metalctl size delete","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_delete/#","page":"-","title":"-","text":"delete a size","category":"page"},{"location":"external/metalctl/docs/metalctl_size_delete/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_delete/#","page":"-","title":"-","text":"delete a size","category":"page"},{"location":"external/metalctl/docs/metalctl_size_delete/#","page":"-","title":"-","text":"metalctl size delete <sizeID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_size_delete/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_delete/#","page":"-","title":"-","text":"  -h, --help   help for delete","category":"page"},{"location":"external/metalctl/docs/metalctl_size_delete/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_delete/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_size_delete/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_delete/#","page":"-","title":"-","text":"metalctl size\t - manage sizes","category":"page"},{"location":"external/metalctl/docs/metalctl_size_delete/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#Dev-Instructions-1","page":"Dev Instructions","title":"Dev Instructions","text":"","category":"section"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#","page":"Dev Instructions","title":"Dev Instructions","text":"To simplify developing changes for the metal-api, metal-hammer and metal-core, it is possible to use development artifacts from within the mini-lab.","category":"page"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#","page":"Dev Instructions","title":"Dev Instructions","text":"Also start the mini-lab with a kind cluster, a metal-api instance as well as some vagrant VMs with two leaf switches and two machine skeletons. Additionally a Caddy and a Docker registry container is started. The former serves a prebuilt metal-hammer-initrd image, the latter holds prebuilt metalstack/metal-api and metalstack/metal-core images, which will be used as replacements for the official ones.","category":"page"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#","page":"Dev Instructions","title":"Dev Instructions","text":"Thus you have to clone the following metal-stack repositories:","category":"page"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#Prerequisites:-1","page":"Dev Instructions","title":"Prerequisites:","text":"","category":"section"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#","page":"Dev Instructions","title":"Dev Instructions","text":"git clone https://github.com/metal-stack/metal-hammer ../metal-hammer\ngit clone https://github.com/metal-stack/metal-api ../metal-api\ngit clone https://github.com/metal-stack/metal-core ../metal-core","category":"page"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#Start/Stop:-1","page":"Dev Instructions","title":"Start/Stop:","text":"","category":"section"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#","page":"Dev Instructions","title":"Dev Instructions","text":"Build metal-hammer-initrd, metalstack/metal-api and metalstack/metal-core images and (re)start a minimal metal-stack system as well as a Caddy container that servers the former one and a Docker registry that holds the latter ones:","category":"page"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#","page":"Dev Instructions","title":"Dev Instructions","text":"make dev","category":"page"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#","page":"Dev Instructions","title":"Dev Instructions","text":"Stop and cleanup a potentially running metal-stack development system as well as the local Caddy and Docker registry containers:","category":"page"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#","page":"Dev Instructions","title":"Dev Instructions","text":"make down","category":"page"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#Exchange-images-at-run-time:-1","page":"Dev Instructions","title":"Exchange images at run-time:","text":"","category":"section"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#","page":"Dev Instructions","title":"Dev Instructions","text":"Reload metal-hammer-initrd:","category":"page"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#","page":"Dev Instructions","title":"Dev Instructions","text":"make bulid-hammer-initrd","category":"page"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#","page":"Dev Instructions","title":"Dev Instructions","text":"Reload metal-api:","category":"page"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#","page":"Dev Instructions","title":"Dev Instructions","text":"make reload-api","category":"page"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#","page":"Dev Instructions","title":"Dev Instructions","text":"Reload metal-core:","category":"page"},{"location":"external/mini-lab/DEV_INSTRUCTIONS/#","page":"Dev Instructions","title":"Dev Instructions","text":"make reload-core","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_list/#metalctl-machine-list-1","page":"-","title":"metalctl machine list","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_list/#","page":"-","title":"-","text":"list all machines","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_list/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_list/#","page":"-","title":"-","text":"list all machines with almost all properties in tabular form.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_list/#","page":"-","title":"-","text":"metalctl machine list [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_list/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_list/#","page":"-","title":"-","text":"  -h, --help               help for list\n      --hostname string    allocation hostname to filter [optional]\n      --id string          ID to filter [optional]\n      --image string       allocation image to filter [optional]\n      --mac string         mac to filter [optional]\n      --name string        allocation name to filter [optional]\n      --partition string   partition to filter [optional]\n      --project string     allocation project to filter [optional]\n      --size string        size to filter [optional]\n      --tags strings       tags to filter, use it like: --tags \"tag1,tag2\" or --tags \"tag3\".","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_list/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_list/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_list/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_list/#","page":"-","title":"-","text":"metalctl machine\t - manage machines","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_list/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_list/#metalctl-image-list-1","page":"-","title":"metalctl image list","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_list/#","page":"-","title":"-","text":"list all images","category":"page"},{"location":"external/metalctl/docs/metalctl_image_list/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_list/#","page":"-","title":"-","text":"list all images","category":"page"},{"location":"external/metalctl/docs/metalctl_image_list/#","page":"-","title":"-","text":"metalctl image list [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_image_list/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_list/#","page":"-","title":"-","text":"  -h, --help   help for list","category":"page"},{"location":"external/metalctl/docs/metalctl_image_list/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_list/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_image_list/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_list/#","page":"-","title":"-","text":"metalctl image\t - manage images","category":"page"},{"location":"external/metalctl/docs/metalctl_image_list/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_update/#metalctl-partition-update-1","page":"-","title":"metalctl partition update","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_update/#","page":"-","title":"-","text":"update a partition","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_update/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_update/#","page":"-","title":"-","text":"update a partition","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_update/#","page":"-","title":"-","text":"metalctl partition update [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_update/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_update/#","page":"-","title":"-","text":"  -h, --help   help for update","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_update/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_update/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_update/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_update/#","page":"-","title":"-","text":"metalctl partition\t - manage partitions","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_update/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_ipmi/#metalctl-machine-ipmi-1","page":"-","title":"metalctl machine ipmi","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_ipmi/#","page":"-","title":"-","text":"display ipmi details of the machine, if no machine ID is given all ipmi addresses are returned.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_ipmi/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_ipmi/#","page":"-","title":"-","text":"display ipmi details of the machine, if no machine ID is given all ipmi addresses are returned.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_ipmi/#","page":"-","title":"-","text":"metalctl machine ipmi [<machine ID>] [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_ipmi/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_ipmi/#","page":"-","title":"-","text":"  -h, --help               help for ipmi\n      --hostname string    allocation hostname to filter [optional]\n      --id string          ID to filter [optional]\n      --image string       allocation image to filter [optional]\n      --mac string         mac to filter [optional]\n      --name string        allocation name to filter [optional]\n      --partition string   partition to filter [optional]\n      --project string     allocation project to filter [optional]\n      --size string        size to filter [optional]\n      --tags strings       tags to filter, use it like: --tags \"tag1,tag2\" or --tags \"tag3\".","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_ipmi/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_ipmi/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_ipmi/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_ipmi/#","page":"-","title":"-","text":"metalctl machine\t - manage machines","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_ipmi/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_whoami/#metalctl-whoami-1","page":"-","title":"metalctl whoami","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_whoami/#","page":"-","title":"-","text":"shows current user","category":"page"},{"location":"external/metalctl/docs/metalctl_whoami/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_whoami/#","page":"-","title":"-","text":"shows the current user, that will be used to authenticate commands.","category":"page"},{"location":"external/metalctl/docs/metalctl_whoami/#","page":"-","title":"-","text":"metalctl whoami [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_whoami/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_whoami/#","page":"-","title":"-","text":"  -h, --help   help for whoami","category":"page"},{"location":"external/metalctl/docs/metalctl_whoami/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_whoami/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_whoami/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_whoami/#","page":"-","title":"-","text":"metalctl\t - a cli to manage metal devices.","category":"page"},{"location":"external/metalctl/docs/metalctl_whoami/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/csi-lvm/README/#CSI-LVM-Provisioner-1","page":"csi-lvm","title":"CSI LVM Provisioner","text":"","category":"section"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"(Image: Go Report Card)","category":"page"},{"location":"external/csi-lvm/README/#Overview-1","page":"csi-lvm","title":"Overview","text":"","category":"section"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"CSI LVM Provisioner utilizes local storage of Kubernetes nodes to provide persistent storage for pods.","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"It automatically creates hostPath based persistent volumes on the nodes and makes use of the Local Persistent Volume feature introduced by Kubernetes 1.10 but it's simpler to use than the built-in local volume feature in Kubernetes.","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"Underneath it creates a LVM logical volume on the local disks. A grok pattern, which disks to use can be specified.","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"This Provisioner is derived from the Local Path Provisioner.","category":"page"},{"location":"external/csi-lvm/README/#Compare-to-Local-Path-Provisioner-1","page":"csi-lvm","title":"Compare to Local Path Provisioner","text":"","category":"section"},{"location":"external/csi-lvm/README/#Pros-1","page":"csi-lvm","title":"Pros","text":"","category":"section"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"Dynamic provisioning the volume using host path.","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"Currently the Kubernetes Local Volume provisioner cannot do dynamic provisioning for the host path volumes.\nSupport for volume capacity limit.\nPerformance speedup if more than one local disk is available because it can create lv´s which are stripe across all physical volumes.","category":"page"},{"location":"external/csi-lvm/README/#Requirement-1","page":"csi-lvm","title":"Requirement","text":"","category":"section"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"Kubernetes v1.12+.","category":"page"},{"location":"external/csi-lvm/README/#Deployment-1","page":"csi-lvm","title":"Deployment","text":"","category":"section"},{"location":"external/csi-lvm/README/#Installation-1","page":"csi-lvm","title":"Installation","text":"","category":"section"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"The deployments consists of two parts:","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"A controller deployment, which is registerd as storage controller and schedules the creation and deletion of volumes\nA reviver daemonset, which is responsible for re-creating the mount-structure after a reboot","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"In this setup, the directory /tmp/csi-lvm/<name of the pv> will be used across all the nodes as the path for provisioning (a.k.a, store the persistent volume data). The provisioner will be installed in csi-lvm namespace by default.","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"The default grok pattern for disks to use is /dev/nvme[0-9]n*, please check if this matches your setup, otherwise, copy controller.yaml to your local machine and modify the value of CSI_LVM_DEVICE_PATTERN accordingly.","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"- name: CSI_LVM_DEVICE_PATTERN\n  value: /dev/nvme[0-9]n*\"","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"If this is set you can install the csi-lvm with:","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"kubectl apply -f https://raw.githubusercontent.com/metal-stack/csi-lvm/master/deploy/controller.yaml\nkubectl apply -f https://raw.githubusercontent.com/metal-stack/csi-lvm/master/deploy/reviver.yaml\n","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"After installation, you should see something like the following:","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"$ kubectl -n csi-lvm get pod\nNAME                                     READY     STATUS    RESTARTS   AGE\ncsi-lvm-controller-d744ccf98-xfcbk       1/1       Running   0          7m\ncsi-lvm-reviver-ndh46                    1/1       Running   0          7m","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"Check and follow the provisioner log using:","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"$ kubectl -n csi-lvm logs -f csi-lvm-controller-d744ccf98-xfcbk\nI1021 14:09:31.108535       1 main.go:132] Provisioner started\nI1021 14:09:31.108830       1 leaderelection.go:235] attempting to acquire leader lease  csi-lvm/metal-stack.io-csi-lvm...\nI1021 14:09:31.121305       1 leaderelection.go:245] successfully acquired lease csi-lvm/metal-stack.io-csi-lvm\nI1021 14:09:31.124339       1 controller.go:770] Starting provisioner controller metal-stack.io/csi-lvm_csi-lvm-controller-7f94749d78-t5nh8_17d2f7ef-1375-4e36-aa71-82e237430881!\nI1021 14:09:31.126248       1 event.go:258] Event(v1.ObjectReference{Kind:\"Endpoints\", Namespace:\"csi-lvm\", Name:\"metal-stack.io-csi-lvm\", UID:\"04da008c-36ec-4966-a4f6-c2028e69cdd5\", APIVersion:\"v1\", ResourceVersion:\"589\", FieldPath:\"\"}): type: 'Normal' reason: 'LeaderElection' csi-lvm-controller-7f94749d78-t5nh8_17d2f7ef-1375-4e36-aa71-82e237430881 became leader\nI1021 14:09:31.225917       1 controller.go:819] Started provisioner controller metal-stack.io/csi-lvm_csi-lvm-controller-7f94749d78-t5nh8_17d2f7ef-1375-4e36-aa71-82e237430881!","category":"page"},{"location":"external/csi-lvm/README/#Usage-1","page":"csi-lvm","title":"Usage","text":"","category":"section"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"Create a hostPath backed Persistent Volume and a pod uses it:","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"kubectl create -f https://raw.githubusercontent.com/metal-stack/csi-lvm/master/example/pvc.yaml\nkubectl create -f https://raw.githubusercontent.com/metal-stack/csi-lvm/master/example/pod.yaml","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"You should see the PV has been created:","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"$ kubectl get pv\nNAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS    CLAIM                    STORAGECLASS   REASON    AGE\npvc-bc3117d9-c6d3-11e8-b36d-7a42907dda78   50Mi       RWO            Delete           Bound     default/lvm-pvc          csi-lvm                  4s","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"The PVC has been bound:","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"$ kubectl get pvc\nNAME             STATUS    VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE\nlvm-pvc          Bound     pvc-bc3117d9-c6d3-11e8-b36d-7a42907dda78   50Mi       RWO            csi-lvm        16s","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"And the Pod started running:","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"$ kubectl get pod\nNAME          READY     STATUS    RESTARTS   AGE\nvolume-test   1/1       Running   0          3s","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"Write something into the pod","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"kubectl exec volume-test -- sh -c \"echo lvm-test > /data/test\"","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"Now delete the pod using","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"kubectl delete -f https://raw.githubusercontent.com/metal-stack/csi-lvm/master/example/pod.yaml","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"After confirm that the pod is gone, recreated the pod using","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"kubectl create -f https://raw.githubusercontent.com/metal-stack/csi-lvm/master/example/pod.yaml","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"Check the volume content:","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"$ kubectl exec volume-test cat /data/test\nlvm-test","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"Delete the pod and pvc","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"kubectl delete -f https://raw.githubusercontent.com/metal-stack/csi-lvm/master/example/pvc.yaml\nkubectl delete -f https://raw.githubusercontent.com/metal-stack/csi-lvm/master/example/pod.yaml","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"The volume content stored on the node will be automatically cleaned up. You can check the log of csi-lvm-controller-xxx for details.","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"Now you've verified that the provisioner works as expected.","category":"page"},{"location":"external/csi-lvm/README/#Configuration-1","page":"csi-lvm","title":"Configuration","text":"","category":"section"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"The configuration of the csi-lvm-controller is done via Environment variables:","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: csi-lvm-controller\n  namespace: csi-lvm\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: csi-lvm-controller\n  template:\n    metadata:\n      labels:\n        app: csi-lvm-controller\n    spec:\n      serviceAccountName: csi-lvm-controller\n      containers:\n      - name: csi-lvm-controller\n        image: metalstack/csi-lvm-controller:v0.6.1\n        imagePullPolicy: IfNotPresent\n        command:\n        - /csi-lvm-controller\n        args:\n        - start\n        env:\n        - name: CSI_LVM_PROVISIONER_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: CSI_LVM_PROVISIONER_IMAGE\n          value: \"metalstack/csi-lvm-provisioner:v0.6.1\"\n        - name: CSI_LVM_DEVICE_PATTERN\n          value: \"/dev/loop[0,1]\"\n---\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: csi-lvm-reviver\n  namespace: csi-lvm\nspec:\n  selector:\n    matchLabels:\n      app: csi-lvm-reviver\n  template:\n    metadata:\n      labels:\n        app: csi-lvm-reviver\n    spec:\n      serviceAccountName: csi-lvm-reviver\n      containers:\n      - name: csi-lvm-reviver\n        image: metalstack/csi-lvm-provisioner:v0.6.1\n        imagePullPolicy: IfNotPresent\n        securityContext:\n          privileged: true\n        env:\n          - name: CSI_LVM_MOUNTPOINT\n            value: \"/tmp/csi-lvm\"\n        command:\n        - /csi-lvm-provisioner\n        args:\n        - revivelvs\n        volumeMounts:\n          - mountPath: /tmp/csi-lvm\n            name: data\n            mountPropagation: Bidirectional\n          - mountPath: /dev\n            name: devices\n          - mountPath: /lib/modules\n            name: modules\n      volumes:\n        - hostPath:\n            path: /tmp/csi-lvm\n            type: DirectoryOrCreate\n          name: data\n        - hostPath:\n            path: /dev\n            type: DirectoryOrCreate\n          name: devices\n        - hostPath:\n            path: /lib/modules\n            type: DirectoryOrCreate\n          name: modules\n","category":"page"},{"location":"external/csi-lvm/README/#Definition-1","page":"csi-lvm","title":"Definition","text":"","category":"section"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"CSI_LVM_DEVICE_PATTERN is a grok pattern to specify which block devices to use for lvm devices on the node. This can be for example /dev/sd[bcde] if you want to use only /dev/sdb - /dev/sde. ***IMPORTANT***: no wildcard (*) allowed currently.","category":"page"},{"location":"external/csi-lvm/README/#PVC-Striped,-Mirrored-1","page":"csi-lvm","title":"PVC Striped, Mirrored","text":"","category":"section"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"By default the LV´s are created in linear mode on the devices specified by the grok pattern, beginning on the first found device. If this is full, the next LV will be created on the next device and so forth.","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"If more than 1 device was found with the given pattern, two more options for the created lvs are available:","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"mirror: all block will be mirrored with one additional copy to a additional disk found if more than one disk is present.\nstriped: the pvc will be a stripe across all found block devices specified by the above grok pattern. If for example 4 disk where found, all blocks written are spread across 4 devices in chunks. This gives ~4 times the read/write performance for the volume, but also a 4 times higher risk of data loss in case a single disk fails.","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: lvm-pvc\n  namespace: default\nspec:\n  accessModes:\n    - ReadWriteOnce\n  storageClassName: csi-lvm\n  resources:\n    requests:\n      storage: 50Mi","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: lvm-pvc-striped\n  namespace: default\n  annotations:\n    csi-lvm.metal-stack.io/type: \"striped\"\nspec:\n  accessModes:\n    - ReadWriteOnce\n  storageClassName: csi-lvm\n  resources:\n    requests:\n      storage: 50Mi","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: lvm-pvc-mirrored\n  namespace: default\n  annotations:\n    csi-lvm.metal-stack.io/type: \"mirror\"\nspec:\n  accessModes:\n    - ReadWriteOnce\n  storageClassName: csi-lvm\n  resources:\n    requests:\n      storage: 50Mi","category":"page"},{"location":"external/csi-lvm/README/#Uninstall-1","page":"csi-lvm","title":"Uninstall","text":"","category":"section"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"Before un-installation, make sure the PVs created by the provisioner have already been deleted. Use kubectl get pv and make sure no PV with StorageClass csi-lvm.","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"To uninstall, execute:","category":"page"},{"location":"external/csi-lvm/README/#","page":"csi-lvm","title":"csi-lvm","text":"kubectl delete -f https://raw.githubusercontent.com/metal-stack/csi-lvm/master/deploy/controller.yaml\nkubectl delete -f https://raw.githubusercontent.com/metal-stack/csi-lvm/master/deploy/reviver.yaml","category":"page"},{"location":"installation/troubleshoot/#Troubleshoot-1","page":"Troubleshoot","title":"Troubleshoot","text":"","category":"section"},{"location":"installation/troubleshoot/#","page":"Troubleshoot","title":"Troubleshoot","text":"This document summarizes help when something goes wrong and provides advice on debugging the metal-stack in certain situations.","category":"page"},{"location":"installation/troubleshoot/#","page":"Troubleshoot","title":"Troubleshoot","text":"Of course, it is also advisable to check out the issues on the Github projects for help.","category":"page"},{"location":"installation/troubleshoot/#","page":"Troubleshoot","title":"Troubleshoot","text":"If you still can't find a solution to your problem, please reach out to us and our community. We have a public Slack Channel to discuss problems, but you can also reach us via mail. Check out metal-stack.io for contact information.","category":"page"},{"location":"installation/troubleshoot/#","page":"Troubleshoot","title":"Troubleshoot","text":"Pages = [\"troubleshoot.md\"]\nDepth = 5","category":"page"},{"location":"installation/troubleshoot/#Deployment-1","page":"Troubleshoot","title":"Deployment","text":"","category":"section"},{"location":"installation/troubleshoot/#Ansible-fails-when-the-metal-control-plane-helm-chart-gets-applied-1","page":"Troubleshoot","title":"Ansible fails when the metal control plane helm chart gets applied","text":"","category":"section"},{"location":"installation/troubleshoot/#","page":"Troubleshoot","title":"Troubleshoot","text":"There can be many reasons for this. Since you are deploying the metal control plane into a Kubernetes cluster, the first step should be to install kubectl and check the pods in your cluster. Depending on the metal-stack version and Kubernetes cluster, your control-plane should look something like this after the deployment (this is in a Kind cluster):","category":"page"},{"location":"installation/troubleshoot/#","page":"Troubleshoot","title":"Troubleshoot","text":"kubectl get pod -A\nNAMESPACE             NAME                                         READY   STATUS      RESTARTS   AGE\ningress-nginx         nginx-ingress-controller-56966f7dc7-khfp9    1/1     Running     0          2m34s\nkube-system           coredns-66bff467f8-grn7q                     1/1     Running     0          2m34s\nkube-system           coredns-66bff467f8-n7n77                     1/1     Running     0          2m34s\nkube-system           etcd-kind-control-plane                      1/1     Running     0          2m42s\nkube-system           kindnet-4dv7m                                1/1     Running     0          2m34s\nkube-system           kube-apiserver-kind-control-plane            1/1     Running     0          2m42s\nkube-system           kube-controller-manager-kind-control-plane   1/1     Running     0          2m42s\nkube-system           kube-proxy-jz7kp                             1/1     Running     0          2m34s\nkube-system           kube-scheduler-kind-control-plane            1/1     Running     0          2m42s\nlocal-path-storage    local-path-provisioner-bd4bb6b75-cwfb7       1/1     Running     0          2m34s\nmetal-control-plane   ipam-db-0                                    2/2     Running     0          2m31s\nmetal-control-plane   masterdata-api-6dd4b54db5-rwk45              1/1     Running     0          33s\nmetal-control-plane   masterdata-db-0                              2/2     Running     0          2m29s\nmetal-control-plane   metal-api-998cb46c4-jj2tt                    1/1     Running     0          33s\nmetal-control-plane   metal-api-initdb-r9sc6                       0/1     Completed   0          2m24s\nmetal-control-plane   metal-api-liveliness-1590479940-brhc7        0/1     Completed   0          6s\nmetal-control-plane   metal-console-7955cbb7d7-p6hxp               1/1     Running     0          33s\nmetal-control-plane   metal-db-0                                   2/2     Running     0          2m34s\nmetal-control-plane   nsq-lookupd-5b4ccbfb64-n6prg                 1/1     Running     0          2m34s\nmetal-control-plane   nsqd-6cd87f69c4-vtn9k                        2/2     Running     0          2m33s","category":"page"},{"location":"installation/troubleshoot/#","page":"Troubleshoot","title":"Troubleshoot","text":"If there are any failing pods, investigate those and look into container logs. This information should point you to the place where the deployment goes wrong.","category":"page"},{"location":"installation/troubleshoot/#","page":"Troubleshoot","title":"Troubleshoot","text":"info: Info\nSometimes, you see a helm errors like \"no deployed releases\" or something like this. When a helm chart fails after the first deployment it could be that you have a chart installation still pending. Also, the control plane helm chart uses pre- and post-hooks, which creates jobs that helm expects to be completed before attempting another deployment. Delete the helm chart (use Helm 3) with helm delete -n metal-control-plane metal-control-plane and delete the jobs in the metal-control-plane namespace before retrying the deployment.","category":"page"},{"location":"installation/troubleshoot/#In-the-mini-lab-I-can't-SSH-into-the-leaf-switches-anymore-1","page":"Troubleshoot","title":"In the mini-lab I can't SSH into the leaf switches anymore","text":"","category":"section"},{"location":"installation/troubleshoot/#","page":"Troubleshoot","title":"Troubleshoot","text":"The vagrant ssh leaf01 command returns an error like this:","category":"page"},{"location":"installation/troubleshoot/#","page":"Troubleshoot","title":"Troubleshoot","text":"The provider for this Vagrant-managed machine is reporting that it\nis not yet ready for SSH. Depending on your provider this can carry\ndifferent meanings. Make sure your machine is created and running and\ntry again. Additionally, check the output of `vagrant status` to verify\nthat the machine is in the state that you expect. If you continue to\nget this error message, please view the documentation for the provider\nyou're using.","category":"page"},{"location":"installation/troubleshoot/#","page":"Troubleshoot","title":"Troubleshoot","text":"This is actually expected behavior. As soon as the metal-core reconfigures the switch interfaces, the eth0 interface will be reconfigured from DHCP to static. This causes Vagrant not to be able to figure out the IP address of the VM through dnsmasq anymore (which is how Vagrant gets to know the IP address of the VM for libvirt). The IP address of the switch is still the same though. You can still access the VM using SSH with the vagrant user. ","category":"page"},{"location":"installation/troubleshoot/#","page":"Troubleshoot","title":"Troubleshoot","text":"There are a couple of ways to get to know the IP address of the switch:","category":"page"},{"location":"installation/troubleshoot/#","page":"Troubleshoot","title":"Troubleshoot","text":"You can look it up in the switch interface configuration using the VM console\nIt is cached by the Ansible Vagrant dynamic inventory","category":"page"},{"location":"installation/troubleshoot/#","page":"Troubleshoot","title":"Troubleshoot","text":"The following way describes how to access leaf01 using the information from the dynamic inventory:","category":"page"},{"location":"installation/troubleshoot/#","page":"Troubleshoot","title":"Troubleshoot","text":"$ python3 -c 'import pickle; print(pickle.load(open(\".ansible_vagrant_cache\", \"rb\"))[\"meta_vars\"][\"leaf01\"][\"ansible_host\"])'\n192.168.121.25\n$ ssh vagrant@192.168.121.25 # password is vagrant","category":"page"},{"location":"external/metalctl/docs/metalctl_switch_detail/#metalctl-switch-detail-1","page":"-","title":"metalctl switch detail","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch_detail/#","page":"-","title":"-","text":"switch details","category":"page"},{"location":"external/metalctl/docs/metalctl_switch_detail/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch_detail/#","page":"-","title":"-","text":"switch details","category":"page"},{"location":"external/metalctl/docs/metalctl_switch_detail/#","page":"-","title":"-","text":"metalctl switch detail [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_switch_detail/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch_detail/#","page":"-","title":"-","text":"  -F, --filter string   filter for site, rack, ID\n  -h, --help            help for detail","category":"page"},{"location":"external/metalctl/docs/metalctl_switch_detail/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch_detail/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_switch_detail/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_switch_detail/#","page":"-","title":"-","text":"metalctl switch\t - manage switches","category":"page"},{"location":"external/metalctl/docs/metalctl_switch_detail/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_destroy/#metalctl-firewall-destroy-1","page":"-","title":"metalctl firewall destroy","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_destroy/#","page":"-","title":"-","text":"destroy a firewall","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_destroy/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_destroy/#","page":"-","title":"-","text":"destroy a firewall and destroy all data stored on the local disks. Once destroyed it is back for usage by other projects. A destroyed firewall can not restored anymore","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_destroy/#","page":"-","title":"-","text":"metalctl firewall destroy <firewall ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_destroy/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_destroy/#","page":"-","title":"-","text":"  -h, --help   help for destroy","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_destroy/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_destroy/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_destroy/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_destroy/#","page":"-","title":"-","text":"metalctl firewall\t - manage firewalls","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_destroy/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_update/#metalctl-image-update-1","page":"-","title":"metalctl image update","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_update/#","page":"-","title":"-","text":"update a image","category":"page"},{"location":"external/metalctl/docs/metalctl_image_update/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_update/#","page":"-","title":"-","text":"update a image","category":"page"},{"location":"external/metalctl/docs/metalctl_image_update/#","page":"-","title":"-","text":"metalctl image update [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_image_update/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_update/#","page":"-","title":"-","text":"  -h, --help   help for update","category":"page"},{"location":"external/metalctl/docs/metalctl_image_update/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_update/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_image_update/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_update/#","page":"-","title":"-","text":"metalctl image\t - manage images","category":"page"},{"location":"external/metalctl/docs/metalctl_image_update/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power/#metalctl-machine-power-1","page":"-","title":"metalctl machine power","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power/#","page":"-","title":"-","text":"manage machine power","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power/#","page":"-","title":"-","text":"manage machine power","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power/#","page":"-","title":"-","text":"  -h, --help   help for power","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power/#","page":"-","title":"-","text":"metalctl machine\t - manage machines\nmetalctl machine power bios\t - boot a machine into BIOS\nmetalctl machine power off\t - power off a machine\nmetalctl machine power on\t - power on a machine\nmetalctl machine power reset\t - power reset a machine","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"proposals/MEP2/README/#Two-Factor-Authentication-1","page":"Two Factor Authentication","title":"Two Factor Authentication","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_delete/#metalctl-image-delete-1","page":"-","title":"metalctl image delete","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_delete/#","page":"-","title":"-","text":"delete a image","category":"page"},{"location":"external/metalctl/docs/metalctl_image_delete/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_delete/#","page":"-","title":"-","text":"delete a image","category":"page"},{"location":"external/metalctl/docs/metalctl_image_delete/#","page":"-","title":"-","text":"metalctl image delete <imageID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_image_delete/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_delete/#","page":"-","title":"-","text":"  -h, --help   help for delete","category":"page"},{"location":"external/metalctl/docs/metalctl_image_delete/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_delete/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_image_delete/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_image_delete/#","page":"-","title":"-","text":"metalctl image\t - manage images","category":"page"},{"location":"external/metalctl/docs/metalctl_image_delete/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update/#metalctl-update-1","page":"-","title":"metalctl update","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update/#","page":"-","title":"-","text":"update the program","category":"page"},{"location":"external/metalctl/docs/metalctl_update/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update/#","page":"-","title":"-","text":"update the program","category":"page"},{"location":"external/metalctl/docs/metalctl_update/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update/#","page":"-","title":"-","text":"  -h, --help   help for update","category":"page"},{"location":"external/metalctl/docs/metalctl_update/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_update/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update/#","page":"-","title":"-","text":"metalctl\t - a cli to manage metal devices.\nmetalctl update check\t - check for update of the program\nmetalctl update do\t - do the update of the program\nmetalctl update dump\t - dump the version update file","category":"page"},{"location":"external/metalctl/docs/metalctl_update/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_login/#metalctl-login-1","page":"-","title":"metalctl login","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_login/#","page":"-","title":"-","text":"login user and receive token","category":"page"},{"location":"external/metalctl/docs/metalctl_login/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_login/#","page":"-","title":"-","text":"login and receive token that will be used to authenticate commands.","category":"page"},{"location":"external/metalctl/docs/metalctl_login/#","page":"-","title":"-","text":"metalctl login [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_login/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_login/#","page":"-","title":"-","text":"  -h, --help        help for login\n      --printOnly   If true, the token is printed to stdout","category":"page"},{"location":"external/metalctl/docs/metalctl_login/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_login/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_login/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_login/#","page":"-","title":"-","text":"metalctl\t - a cli to manage metal devices.","category":"page"},{"location":"external/metalctl/docs/metalctl_login/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_markdown/#metalctl-markdown-1","page":"-","title":"metalctl markdown","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_markdown/#","page":"-","title":"-","text":"create markdown documentation","category":"page"},{"location":"external/metalctl/docs/metalctl_markdown/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_markdown/#","page":"-","title":"-","text":"create markdown documentation","category":"page"},{"location":"external/metalctl/docs/metalctl_markdown/#","page":"-","title":"-","text":"metalctl markdown [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_markdown/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_markdown/#","page":"-","title":"-","text":"  -h, --help   help for markdown","category":"page"},{"location":"external/metalctl/docs/metalctl_markdown/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_markdown/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_markdown/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_markdown/#","page":"-","title":"-","text":"metalctl\t - a cli to manage metal devices.","category":"page"},{"location":"external/metalctl/docs/metalctl_markdown/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/mini-lab/README/#mini-lab-1","page":"mini-lab","title":"mini-lab","text":"","category":"section"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"The mini-lab is a small, virtual setup to locally run the metal-stack. It deploys the metal control plane and a partition with two simulated leaf switches. The lab can be used for trying out metal-stack, demonstration purposes or development.","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"(Image: overview components)","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"This project can also be used as a template for writing your own metal-stack deployments.","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"<!– TOC depthFrom:2 depthTo:6 withLinks:1 updateOnSave:1 orderedList:0 –>","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"mini-lab\nRequirements\nKnown Limitations\nTry it out\nReinstall machine\nRemove machine\nDevelopment of metal-api, metal-hammer and metal-core","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"<!– /TOC –>","category":"page"},{"location":"external/mini-lab/README/#Requirements-1","page":"mini-lab","title":"Requirements","text":"","category":"section"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"Linux\nVagrant == 2.2.9 with vagrant-libvirt plugin >= 0.1.2 (for running the switch and machine VMs)\nkvm as hypervisor for the VMs\ndocker >= 18.09 (for using kind and our deployment base image)\ndocker-compose >= 1.25.4 (for ease of use and for parallelizing control plane and partition deployment)\nkind == v0.8.1 (for hosting the metal control plane on a kubernetes cluster v1.18.2)\novmf to have a uefi firmware for virtual machines\nthe lab creates a virtual network 192.168.121.0/24 on your host machine, this hopefully does not overlap with other networks you have\n(recommended) haveged to have enough random entropy (only needed if the PXE process does not work)","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"Here is some code that should help you setting up most of the requirements:","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"# Install Docker\ncurl -fsSL https://get.docker.com | sh\n# if you want to be on the safe side, follow the original installation\n# instructions at https://docs.docker.com/engine/install/ubuntu/\n\n# Install vagrant and other stuff\nwget https://releases.hashicorp.com/vagrant/2.2.9/vagrant_2.2.9_x86_64.deb\nsudo apt-get install ./vagrant_2.2.9_x86_64.deb qemu-kvm virt-manager ovmf net-tools libvirt-dev haveged\n\n# Ensure that your user is member of the group \"libvirt\"\n# possibly you need to login again in order to make this change take effect\nsudo usermod -G libvirt -a ${USER}\n\n# Install libvirt plugin for vagrant\nvagrant plugin install vagrant-libvirt\n\n# Install kind from https://github.com/kubernetes-sigs/kind/releases","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"The following ports are getting used statically:","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"Port Bind Address Description\n8443 0.0.0.0 kube-apiserver of the kind cluster\n4443 0.0.0.0 HTTPS ingress\n4150 0.0.0.0 nsqd\n4161 0.0.0.0 nsq-lookupd\n5222 0.0.0.0 metal-console\n8080 0.0.0.0 HTTP ingress","category":"page"},{"location":"external/mini-lab/README/#Known-Limitations-1","page":"mini-lab","title":"Known Limitations","text":"","category":"section"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"to keep the demo small there is no EVPN\nmachine restart and destroy does not work because we cannot change the boot order via IPMI in the lab easily (virtual-bmc could, but it's buggy)\nlogin to the machines is only possible with virsh console","category":"page"},{"location":"external/mini-lab/README/#Try-it-out-1","page":"mini-lab","title":"Try it out","text":"","category":"section"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"Start the mini-lab with a kind cluster, a metal-api instance as well as some vagrant VMs with two leaf switches and two machine skeletons.","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"make","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"Two machines in status PXE booting are visible with metalctl machine ls","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"docker-compose run metalctl machine ls\n\nID                                          LAST EVENT   WHEN     AGE  HOSTNAME  PROJECT  SIZE          IMAGE  PARTITION\ne0ab02d2-27cd-5a5e-8efc-080ba80cf258        PXE Booting  3s\n2294c949-88f6-5390-8154-fa53d93a3313        PXE Booting  5s","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"Wait until the machines reach the waiting state","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"docker-compose run metalctl machine ls\n\nID                                          LAST EVENT   WHEN     AGE  HOSTNAME  PROJECT  SIZE          IMAGE  PARTITION\ne0ab02d2-27cd-5a5e-8efc-080ba80cf258        Waiting      8s                               v1-small-x86         vagrant\n2294c949-88f6-5390-8154-fa53d93a3313        Waiting      8s                               v1-small-x86         vagrant","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"Create a machine with","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"make machine","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"or as alternative the hard way with","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"docker-compose run metalctl network allocate \\\n        --partition vagrant \\\n        --project 00000000-0000-0000-0000-000000000000 \\\n        --name vagrant\n\n# Lookup the network ID and run\ndocker-compose run metalctl machine create \\\n        --description test \\\n        --name machine \\\n        --hostname machine \\\n        --project 00000000-0000-0000-0000-000000000000 \\\n        --partition vagrant \\\n        --image ubuntu-19.10 \\\n        --size v1-small-x86 \\\n        --networks <network-ID>","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"See the installation process in action","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"virsh console metalmachine01/02\n...\nUbuntu 19.10 machine ttyS0\n\nmachine login:","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"One machine is now installed and has status \"Phoned Home\"","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"docker-compose run metalctl machine ls\nID                                          LAST EVENT   WHEN   AGE     HOSTNAME  PROJECT                               SIZE          IMAGE         PARTITION\ne0ab02d2-27cd-5a5e-8efc-080ba80cf258        Phoned Home  2s     21s     machine   00000000-0000-0000-0000-000000000000  v1-small-x86  Ubuntu 19.10  vagrant\n2294c949-88f6-5390-8154-fa53d93a3313        Waiting      8s                                                             v1-small-x86                vagrant","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"Login with user name metal and the console password from","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"docker-compose run metalctl machine describe e0ab02d2-27cd-5a5e-8efc-080ba80cf258 | grep password\n\nconsolepassword: ...","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"To remove the kind cluster and the vagrant boxes, run","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"make cleanup","category":"page"},{"location":"external/mini-lab/README/#Reinstall-machine-1","page":"mini-lab","title":"Reinstall machine","text":"","category":"section"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"Reinstall a machine with","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"docker-compose run metalctl machine reinstall \\\n        --image ubuntu-19.10 \\\n        e0ab02d2-27cd-5a5e-8efc-080ba80cf258","category":"page"},{"location":"external/mini-lab/README/#Remove-machine-1","page":"mini-lab","title":"Remove machine","text":"","category":"section"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"Remove a machine with","category":"page"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"docker-compose run metalctl machine rm e0ab02d2-27cd-5a5e-8efc-080ba80cf258","category":"page"},{"location":"external/mini-lab/README/#Development-of-metal-api,-metal-hammer-and-metal-core-1","page":"mini-lab","title":"Development of metal-api, metal-hammer and metal-core","text":"","category":"section"},{"location":"external/mini-lab/README/#","page":"mini-lab","title":"mini-lab","text":"To simplify developing changes for the metal-api, metal-hammer and metal-core, it is possible to use development artifacts from within the mini-lab. See the dev instructions for more details.","category":"page"},{"location":"overview/kubernetes/#Kubernetes-Integration-1","page":"Kubernetes Integration","title":"Kubernetes Integration","text":"","category":"section"},{"location":"overview/kubernetes/#","page":"Kubernetes Integration","title":"Kubernetes Integration","text":"With the help of the Gardener project, metal-stack can be used for spinning up Kubernetes clusters quickly and reliably on bare metal machines.","category":"page"},{"location":"overview/kubernetes/#","page":"Kubernetes Integration","title":"Kubernetes Integration","text":"To make this happen, we implemented a couple of components, which are described here.","category":"page"},{"location":"overview/kubernetes/#","page":"Kubernetes Integration","title":"Kubernetes Integration","text":"Pages = [\"kubernetes.md\"]\nDepth = 5","category":"page"},{"location":"overview/kubernetes/#metal-ccm-1","page":"Kubernetes Integration","title":"metal-ccm","text":"","category":"section"},{"location":"overview/kubernetes/#","page":"Kubernetes Integration","title":"Kubernetes Integration","text":"CCM stands for cloud-controller-manager and is the bridge between Kubernetes and a cloud-provider.","category":"page"},{"location":"overview/kubernetes/#","page":"Kubernetes Integration","title":"Kubernetes Integration","text":"We implemented the cloud provider interface in the metal-ccm repository. With the help of the cloud-controller-controller we provide metal-stack-specific properties for Kubernetes clusters, e.g. load balancer configuration through MetalLB or node properties.","category":"page"},{"location":"overview/kubernetes/#csi-lvm-1","page":"Kubernetes Integration","title":"csi-lvm","text":"","category":"section"},{"location":"overview/kubernetes/#","page":"Kubernetes Integration","title":"Kubernetes Integration","text":"When dealing with local storage, it can be pretty useful not to write directly on to the host system using hostpath. Instead, we wrote a storage plugin that enables your pods to write to logical volumes. A definition of a PVC can look like this:","category":"page"},{"location":"overview/kubernetes/#","page":"Kubernetes Integration","title":"Kubernetes Integration","text":"apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: lvm-pvc\n  namespace: default\nspec:\n  accessModes:\n    - ReadWriteOnce\n  storageClassName: csi-lvm\n  resources:\n    requests:\n      storage: 50Mi","category":"page"},{"location":"overview/kubernetes/#","page":"Kubernetes Integration","title":"Kubernetes Integration","text":"Checkout the csi-lvm repository here for more details or follow the guide.","category":"page"},{"location":"overview/kubernetes/#firewall-controller-1","page":"Kubernetes Integration","title":"firewall-controller","text":"","category":"section"},{"location":"overview/kubernetes/#","page":"Kubernetes Integration","title":"Kubernetes Integration","text":"To make the firewalls created with metal-stack easily configurable through Kubernetes resources, we add our firewall-controller to the firewall image. The controller watches special CRDs, enabling users to manage:","category":"page"},{"location":"overview/kubernetes/#","page":"Kubernetes Integration","title":"Kubernetes Integration","text":"nftables rules\nIntrusion-detection with suricata\nnetwork metric collection","category":"page"},{"location":"overview/kubernetes/#","page":"Kubernetes Integration","title":"Kubernetes Integration","text":"Please check out the guide on how to use it.","category":"page"},{"location":"overview/kubernetes/#Gardener-components-1","page":"Kubernetes Integration","title":"Gardener components","text":"","category":"section"},{"location":"overview/kubernetes/#","page":"Kubernetes Integration","title":"Kubernetes Integration","text":"There are some Gardener resources that need be reconciled when you act as a cloud provider for the Gardener. This section briefly describes the controllers implemented for deploying Kubernetes clusters through Gardener. ","category":"page"},{"location":"overview/kubernetes/#","page":"Kubernetes Integration","title":"Kubernetes Integration","text":"If you want to learn how to deploy metal-stack with Gardener, please check out the installation section.","category":"page"},{"location":"overview/kubernetes/#gardener-extension-provider-metal-1","page":"Kubernetes Integration","title":"gardener-extension-provider-metal","text":"","category":"section"},{"location":"overview/kubernetes/#","page":"Kubernetes Integration","title":"Kubernetes Integration","text":"The gardener-extension-provider-metal contains of a set of webhooks and controllers for reconciling or mutating Gardener-specific resources.","category":"page"},{"location":"overview/kubernetes/#","page":"Kubernetes Integration","title":"Kubernetes Integration","text":"The project also contains a validator for metal-type Gardener resources, which you should also deploy in case you want to use metal-stack in combination with Gardener.","category":"page"},{"location":"overview/kubernetes/#os-metal-extension-1","page":"Kubernetes Integration","title":"os-metal-extension","text":"","category":"section"},{"location":"overview/kubernetes/#","page":"Kubernetes Integration","title":"Kubernetes Integration","text":"Due to the reason we use ignition in our operating system images for userdata, we had to provide an own extension controller for metal-stack, which you can find at Github in the os-metal-extension repository.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_lock/#metalctl-machine-lock-1","page":"-","title":"metalctl machine lock","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_lock/#","page":"-","title":"-","text":"lock a machine","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_lock/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_lock/#","page":"-","title":"-","text":"when a machine is locked, it can not be destroyed, to destroy a machine you must first remove the lock from that machine with –remove","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_lock/#","page":"-","title":"-","text":"metalctl machine lock <machine ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_lock/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_lock/#","page":"-","title":"-","text":"  -d, --description string   description of the reason for the lock.\n  -h, --help                 help for lock\n  -r, --remove               remove the lock.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_lock/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_lock/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_lock/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_lock/#","page":"-","title":"-","text":"metalctl machine\t - manage machines","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_lock/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_apply/#metalctl-network-apply-1","page":"-","title":"metalctl network apply","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_apply/#","page":"-","title":"-","text":"create/update a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_apply/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_apply/#","page":"-","title":"-","text":"create/update a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_apply/#","page":"-","title":"-","text":"metalctl network apply [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_apply/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_apply/#","page":"-","title":"-","text":"  -h, --help   help for apply","category":"page"},{"location":"external/metalctl/docs/metalctl_network_apply/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_apply/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_apply/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_apply/#","page":"-","title":"-","text":"metalctl network\t - manage networks","category":"page"},{"location":"external/metalctl/docs/metalctl_network_apply/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix_add/#metalctl-network-prefix-add-1","page":"-","title":"metalctl network prefix add","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix_add/#","page":"-","title":"-","text":"add a prefix to a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix_add/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix_add/#","page":"-","title":"-","text":"add a prefix to a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix_add/#","page":"-","title":"-","text":"metalctl network prefix add <networkid> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix_add/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix_add/#","page":"-","title":"-","text":"  -h, --help            help for add\n      --prefix string   prefix to add.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix_add/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix_add/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix_add/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_network_prefix_add/#","page":"-","title":"-","text":"metalctl network prefix\t - prefix management of a network","category":"page"},{"location":"external/metalctl/docs/metalctl_network_prefix_add/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_context/#metalctl-context-1","page":"-","title":"metalctl context","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_context/#","page":"-","title":"-","text":"manage metalctl context","category":"page"},{"location":"external/metalctl/docs/metalctl_context/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_context/#","page":"-","title":"-","text":"context defines the backend to which metalctl talks to.","category":"page"},{"location":"external/metalctl/docs/metalctl_context/#","page":"-","title":"-","text":"metalctl context <name> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_context/#Examples-1","page":"-","title":"Examples","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_context/#","page":"-","title":"-","text":"\n~/.metalctl/config.yaml\n---\ncurrent: prod\ncontexts:\n  prod:\n    url: https://api.metal-stack.io/metal\n    issuer_url: https://dex.metal-stack.io/dex\n    client_id: metal_client\n    client_secret: 456\n  dev:\n    url: https://api.metal-stack.dev/metal\n    issuer_url: https://dex.metal-stack.dev/dex\n    client_id: metal_client\n    client_secret: 123\n...\n","category":"page"},{"location":"external/metalctl/docs/metalctl_context/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_context/#","page":"-","title":"-","text":"  -h, --help   help for context","category":"page"},{"location":"external/metalctl/docs/metalctl_context/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_context/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_context/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_context/#","page":"-","title":"-","text":"metalctl\t - a cli to manage metal devices.","category":"page"},{"location":"external/metalctl/docs/metalctl_context/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_create/#metalctl-size-create-1","page":"-","title":"metalctl size create","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_create/#","page":"-","title":"-","text":"create a size","category":"page"},{"location":"external/metalctl/docs/metalctl_size_create/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_create/#","page":"-","title":"-","text":"create a size","category":"page"},{"location":"external/metalctl/docs/metalctl_size_create/#","page":"-","title":"-","text":"metalctl size create [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_size_create/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_create/#","page":"-","title":"-","text":"  -d, --description string   Description of the size. [required]\n  -h, --help                 help for create\n      --id string            ID of the size. [required]\n      --max int              min value of given size constraint type. [required]\n      --min int              min value of given size constraint type. [required]\n  -n, --name string          Name of the size. [optional]\n      --type string          type of constraints. [required]","category":"page"},{"location":"external/metalctl/docs/metalctl_size_create/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_create/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_size_create/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_create/#","page":"-","title":"-","text":"metalctl size\t - manage sizes","category":"page"},{"location":"external/metalctl/docs/metalctl_size_create/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"overview/hardware/#Hardware-Support-1","page":"Hardware Support","title":"Hardware Support","text":"","category":"section"},{"location":"overview/hardware/#","page":"Hardware Support","title":"Hardware Support","text":"In order to keep the automation and maintenance overhead small, we strongly advise against building highly heterogeneous environments with metal-stack. Having a lot of different vendors and server models in your partitions will heavily increase the time and effort for introducing metal-stack in your infrastructure. From experience we can tell that the interfaces for automating hardware provisioning are usually inconsistent between vendors and even between server models of the same vendor. Therefore, we encourage adopters to start off with only a small amount of machine types. If you want to be on the safe side, you should consider buying the hardware that we officially support.","category":"page"},{"location":"overview/hardware/#","page":"Hardware Support","title":"Hardware Support","text":"We came up with a repository called go-hal, which includes the interface required for metal-stack to support a machine vendor. If you plan to implement support for new vendors, please check out this repository and contribute back your efforts in order to make the community benefit from extended vendor support as well.","category":"page"},{"location":"overview/hardware/#Servers-1","page":"Hardware Support","title":"Servers","text":"","category":"section"},{"location":"overview/hardware/#","page":"Hardware Support","title":"Hardware Support","text":"At the moment we support the following server types:","category":"page"},{"location":"overview/hardware/#","page":"Hardware Support","title":"Hardware Support","text":"Vendor Series Model\nSupermicro Big-Twin SYS-2029BT-HNR\nSupermicro SuperServer SSG-5019D8-TR12P","category":"page"},{"location":"overview/hardware/#Switches-1","page":"Hardware Support","title":"Switches","text":"","category":"section"},{"location":"overview/hardware/#","page":"Hardware Support","title":"Hardware Support","text":"At the moment we support the following switch types:","category":"page"},{"location":"overview/hardware/#","page":"Hardware Support","title":"Hardware Support","text":"Vendor Series Model\nEdge-Core AS7700 Series AS7712-32X","category":"page"},{"location":"overview/hardware/#","page":"Hardware Support","title":"Hardware Support","text":"warning: Warning\nOn our switches we run Cumulus Linux. The metal-core writes network configuration specifically implemented for this operating system. Please also consider running Cumulus Linux on your switches if you do not want to run into any issues with networking.Of course, contributions for supporting other switch vendors and operating systems are highly appreciated.","category":"page"},{"location":"external/csi-lvm/MANUAL_RECOVERY/#Manual-Recovery-1","page":"Manual Recovery","title":"Manual Recovery","text":"","category":"section"},{"location":"external/csi-lvm/MANUAL_RECOVERY/#","page":"Manual Recovery","title":"Manual Recovery","text":"In case, a machine with not the most recent version ( < v0.5.0 ) of csi-lvm was installed but rebooted, the mountpoints can be recovered manually with the following procedure: Log into the machine and do the following steps:","category":"page"},{"location":"external/csi-lvm/MANUAL_RECOVERY/#","page":"Manual Recovery","title":"Manual Recovery","text":"Re-enable all logical volumes","category":"page"},{"location":"external/csi-lvm/MANUAL_RECOVERY/#","page":"Manual Recovery","title":"Manual Recovery","text":"docker run -it --rm -v /dev:/dev -v /lib/modules:/lib/modules --entrypoint /bin/sh metalstack/csi-lvm-provisioner:latest\n# scan all disks for volume groups\nvgscan\n# activate all volume groups and their logical volumes\nvgchange -ay\n# display all logical volumes\nlvs\n  LV                                       VG      Attr       LSize  Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert\n  pvc-12cec25c-325e-4a89-9cad-15360f870235 csi-lvm Rwi-aor--- 10.00g                                    100.00\n  pvc-189851cc-c94f-4d26-8da0-490b0e511fec csi-lvm Rwi-aor--- 10.00g                                    100.00\n  pvc-194547f4-8e46-4d31-94f1-654d0ca03378 csi-lvm Rwi-aor--- 10.00g                                    100.00\n...\n# leave this container\nexit","category":"page"},{"location":"external/csi-lvm/MANUAL_RECOVERY/#","page":"Manual Recovery","title":"Manual Recovery","text":"Mount these logical volumes, --mount-shared is required that the kubelet and the pod can access the volume.","category":"page"},{"location":"external/csi-lvm/MANUAL_RECOVERY/#","page":"Manual Recovery","title":"Manual Recovery","text":"cd /dev/csi-lvm\nls | while read line; do mkdir -p /tmp/csi-lvm/$line || true ; mount --make-shared -t ext4 /dev/csi-lvm/$line /tmp/csi-lvm/$line; done","category":"page"},{"location":"external/csi-lvm/MANUAL_RECOVERY/#","page":"Manual Recovery","title":"Manual Recovery","text":"Now all former pv´s should be mounted at the original place, please ensure to restart all pods which have these pv´s mounted before.","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_describe/#metalctl-firewall-describe-1","page":"-","title":"metalctl firewall describe","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_describe/#","page":"-","title":"-","text":"describe a firewall","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_describe/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_describe/#","page":"-","title":"-","text":"describe a firewall in a very detailed form with all properties.","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_describe/#","page":"-","title":"-","text":"metalctl firewall describe <firewall ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_describe/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_describe/#","page":"-","title":"-","text":"  -h, --help   help for describe","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_describe/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_describe/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_describe/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall_describe/#","page":"-","title":"-","text":"metalctl firewall\t - manage firewalls","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall_describe/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/firewall-controller/DEVELOP/#Develop-Setup-1","page":"Develop Setup","title":"Develop Setup","text":"","category":"section"},{"location":"external/firewall-controller/DEVELOP/#","page":"Develop Setup","title":"Develop Setup","text":"download kubebuilder\ndownload kustomize from kustomize\ninit project and run kubebuilder","category":"page"},{"location":"external/firewall-controller/DEVELOP/#","page":"Develop Setup","title":"Develop Setup","text":"kubebuilder init --domain metal-stack.io\nkubebuilder create api --group firewall --version v1 --kind Network","category":"page"},{"location":"external/firewall-controller/DEVELOP/#","page":"Develop Setup","title":"Develop Setup","text":"run test","category":"page"},{"location":"external/firewall-controller/DEVELOP/#","page":"Develop Setup","title":"Develop Setup","text":"export KUBEBUILDER_ASSETS=~/dev/kubebuilder_2.3.1_linux_amd64/bin\nmake test","category":"page"},{"location":"external/firewall-controller/DEVELOP/#Testing-locally-1","page":"Develop Setup","title":"Testing locally","text":"","category":"section"},{"location":"external/firewall-controller/DEVELOP/#","page":"Develop Setup","title":"Develop Setup","text":"# start kind cluster\nkind create cluster\n\n# deploy manifests\nk apply -f deploy\n\n# start the controller\nbin/firewall-controller --hosts-file ./hosts\n\n# watch results\nk describe -n firewall firewall\ncat nftables.v4\ncat hosts","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall/#metalctl-firewall-1","page":"-","title":"metalctl firewall","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall/#","page":"-","title":"-","text":"manage firewalls","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall/#","page":"-","title":"-","text":"metal firewalls are bare metal firewalls.","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall/#","page":"-","title":"-","text":"  -h, --help   help for firewall","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_firewall/#","page":"-","title":"-","text":"metalctl\t - a cli to manage metal devices.\nmetalctl firewall create\t - create a firewall\nmetalctl firewall describe\t - describe a firewall\nmetalctl firewall destroy\t - destroy a firewall\nmetalctl firewall list\t - list all firewalls\nmetalctl firewall reserve\t - reserve a firewall","category":"page"},{"location":"external/metalctl/docs/metalctl_firewall/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_edit/#metalctl-partition-edit-1","page":"-","title":"metalctl partition edit","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_edit/#","page":"-","title":"-","text":"edit a partition","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_edit/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_edit/#","page":"-","title":"-","text":"edit a partition","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_edit/#","page":"-","title":"-","text":"metalctl partition edit <partitionID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_edit/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_edit/#","page":"-","title":"-","text":"  -h, --help   help for edit","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_edit/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_edit/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_edit/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_edit/#","page":"-","title":"-","text":"metalctl partition\t - manage partitions","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_edit/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_do/#metalctl-update-do-1","page":"-","title":"metalctl update do","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_do/#","page":"-","title":"-","text":"do the update of the program","category":"page"},{"location":"external/metalctl/docs/metalctl_update_do/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_do/#","page":"-","title":"-","text":"do the update of the program","category":"page"},{"location":"external/metalctl/docs/metalctl_update_do/#","page":"-","title":"-","text":"metalctl update do [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_update_do/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_do/#","page":"-","title":"-","text":"  -h, --help   help for do","category":"page"},{"location":"external/metalctl/docs/metalctl_update_do/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_do/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_update_do/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_update_do/#","page":"-","title":"-","text":"metalctl update\t - update the program","category":"page"},{"location":"external/metalctl/docs/metalctl_update_do/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"quickstart/#Getting-Started-1","page":"Quickstart","title":"Getting Started","text":"","category":"section"},{"location":"quickstart/#","page":"Quickstart","title":"Quickstart","text":"Before starting to buy any hardware, you should try out the metal-stack on your notebook and familiarize with the software.","category":"page"},{"location":"quickstart/#","page":"Quickstart","title":"Quickstart","text":"For this, we made the mini-lab.","category":"page"},{"location":"quickstart/#","page":"Quickstart","title":"Quickstart","text":"The mini-lab is a fully virtual setup of metal-stack and is supposed to be run locally on a single machine. For this reason, the setup was slightly simplified in comparison to full-blown setups on real hardware. However, the lab should help to understand all ideas behind the metal-stack.","category":"page"},{"location":"quickstart/#","page":"Quickstart","title":"Quickstart","text":"Get your hands dirty and follow the guide on how to get on with the mini-lab here.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify_off/#metalctl-machine-identify-off-1","page":"-","title":"metalctl machine identify off","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify_off/#","page":"-","title":"-","text":"power off the machine chassis identify LED","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify_off/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify_off/#","page":"-","title":"-","text":"set the machine chassis identify LED to off state","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify_off/#","page":"-","title":"-","text":"metalctl machine identify off <machine ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify_off/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify_off/#","page":"-","title":"-","text":"  -d, --description string   description of the reason for chassis identify LED turn-off. (default \"Triggered by metalctl\")\n  -h, --help                 help for off","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify_off/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify_off/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify_off/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_identify_off/#","page":"-","title":"-","text":"metalctl machine identify\t - manage machine chassis identify LED power","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_identify_off/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_reset/#metalctl-machine-power-reset-1","page":"-","title":"metalctl machine power reset","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_reset/#","page":"-","title":"-","text":"power reset a machine","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_reset/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_reset/#","page":"-","title":"-","text":"reset the machine power. This will ensure a power cycle.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_reset/#","page":"-","title":"-","text":"metalctl machine power reset <machine ID> [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_reset/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_reset/#","page":"-","title":"-","text":"  -h, --help   help for reset","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_reset/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_reset/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_reset/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_power_reset/#","page":"-","title":"-","text":"metalctl machine power\t - manage machine power","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_power_reset/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_capacity/#metalctl-partition-capacity-1","page":"-","title":"metalctl partition capacity","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_capacity/#","page":"-","title":"-","text":"show partition capacity","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_capacity/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_capacity/#","page":"-","title":"-","text":"show partition capacity","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_capacity/#","page":"-","title":"-","text":"metalctl partition capacity [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_capacity/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_capacity/#","page":"-","title":"-","text":"  -h, --help   help for capacity","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_capacity/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_capacity/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_capacity/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_partition_capacity/#","page":"-","title":"-","text":"metalctl partition\t - manage partitions","category":"page"},{"location":"external/metalctl/docs/metalctl_partition_capacity/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_try/#metalctl-size-try-1","page":"-","title":"metalctl size try","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_try/#","page":"-","title":"-","text":"try a specific hardware spec and give the chosen size back","category":"page"},{"location":"external/metalctl/docs/metalctl_size_try/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_try/#","page":"-","title":"-","text":"try a specific hardware spec and give the chosen size back","category":"page"},{"location":"external/metalctl/docs/metalctl_size_try/#","page":"-","title":"-","text":"metalctl size try [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_size_try/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_try/#","page":"-","title":"-","text":"  -C, --cores int32          Cores of the hardware to try (default 1)\n  -h, --help                 help for try\n  -M, --memory string        Memory of the hardware to try, can be given in bytes or any human readable size spec\n  -S, --storagesize string   Total storagesize of the hardware to try, can be given in bytes or any human readable size spec","category":"page"},{"location":"external/metalctl/docs/metalctl_size_try/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_try/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_size_try/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_size_try/#","page":"-","title":"-","text":"metalctl size\t - manage sizes","category":"page"},{"location":"external/metalctl/docs/metalctl_size_try/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"},{"location":"overview/networking/#Networking-1","page":"Networking","title":"Networking","text":"","category":"section"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"We spent a lot of time on trying to provide state-of-the-art networking in the data center. This document describes the requirements, ideas and implementation details of the network topology that hosts the metal-stack.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"The document is separated into three main sections describing the constraints, theoretical ideas and implementation details.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Pages = [\"networking.md\"]\nDepth = 5","category":"page"},{"location":"overview/networking/#Requirements-1","page":"Networking","title":"Requirements","text":"","category":"section"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Finding the requirements for this greenfield project was kicked off with a handful of design parameters that included:","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Investigation of the idea of a layer-3 based infrastructure to overcome the drawbacks of traditional layer-2 architectures.\nApplication of a routing technology that involves a single stand-alone protocol BGP for operational simplicity.\nUtilization of the overlay virtual network technology EVPN to support cost-effective scaling, efficient network information exchange and a manageable amount of administration effort.\nApplying the routing topology on top of a completely new physical infrastructure that is designed as a CLOS network topology.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Evaluation of those parameters led to more specific requirements:","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Physical Wiring:\nThe data center is made of a leaf-spine CLOS topology containing:\nleaf switches\nspine switches\nexit switches\nmanagement server\nmanagement switch\ntenant servers\ntenant firewalls.\nBare metal servers are dual-attached to leaf switches. The bare metal servers either become tenant servers or firewalls for a group of tenant servers.\nAll network switches are connected to a management switch. A management server provides access to this management network.\nNetwork Operation Characteristics:\nIPv4 based network.\nNo IPv6 deployment.\nUtilization of external BGP.\nNumbered BGP only for peerings at exit switches with third parties (Internet Service Provider).\nOverall BGP unnumbered.\n4-byte private ASN instead of default 2-byte ASN for BGP.\nNetwork operation relies on Cumulus Linux.\nBleeding edge Routing-to-the-Host/EVPN-to-the-Host with ordinary Linux distributions.\nLayer-3 routing using BGP and VXLAN/EVPN.\nEvery VTEP acts as a layer-3 gateway and does routing. Routing is done on both the ingress and the egress VTEP (aka distributed symmetric routing).\nTenant isolation is realized with VRF.\nInternet Access is implemented with route leak on the firewall servers and during the PXE-Process with route leak on the exit switches.\nMTU 9216 is used for VXLAN-facing interfaces, otherwise MTU 9000 is used.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Furthermore, requirements such as operational simplicity and network stability that a small group of people can effectively support have been identified being a primary focus for building metal-stack.","category":"page"},{"location":"overview/networking/#Concept-1","page":"Networking","title":"Concept","text":"","category":"section"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"The theoretical concept targets the aforementioned requirements. New technologies have been evaluated to apply the best solutions. The process was heavily inspired by the work of Dinesh G. Dutt regarding BGP (bgp-ebook) and EVPN (evpn-ebook).","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"External BGP together with network overlay concepts as EVPN can address the essential demands. These revolutionary concepts are part of the next evolutionary step in data center design. It overcomes common issues of traditional layer 2 architectures (e.g. VLAN limitations, network visibility for operations, firewall requirements) by introducing a layer 3 based network topology.","category":"page"},{"location":"overview/networking/#CLOS-1","page":"Networking","title":"CLOS","text":"","category":"section"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"A CLOS topology is named after the pioneer Charles Clos (short: CLOS) who first formalized this approach. CLOS defines a multistage network topology that is used today to improve performance and resilience while enabling a cost effective scalability. A CLOS topology comprises network switches aggregated into spine and leaf layers. Each leaf switch (short: leaf) is connected to all spine switches (short: spine) but there is no direct leaf-to-leaf or spine-to-spine connection (See: picture 1).","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"(Image: 2 Layer CLOS Topology)","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Picture 1: Fragment of CLOS to show leaf-spine layer.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"This data center network architecture, based on a leaf-spine architecture, is also know as \"two-tier\" CLOS topology.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"(Image: 3 Layer CLOS Topology)","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Picture 2: Fragment to show a 3-stage, 2-layer CLOS topology.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Tenant servers are dual-attached to the leaf layer in order to have redundancy and load balancing capability (Picture 2). The set of leaves, spine switches and tenant servers define stages. From top down each server is reachable with 3 hops (spine -> leaf -> server). This is why that CLOS design is called a 3-stage CLOS. Consistent latency throughout the data center are an outcome of this design.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"It is not only important to have a scalable and resilient infrastructure but also to support planning and operation teams. Visibility within the network is of significant meaning for them. Consequently layer-3 routing in favor of layer-2 bridging provides this kind of tooling.","category":"page"},{"location":"overview/networking/#BGP-1","page":"Networking","title":"BGP","text":"","category":"section"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"For routing the Border Gateway Protocol (BGP), more specific: External BGP was selected. Extensive testing and operational experiences have shown that External BGP is well suited as a stand-alone routing protocol (see: RFC7938).","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Not all tenant servers are connected to the same leaf. Instead they can be distributed among any of the leaves of the data center. To not let this detail restrict the intra-tenant communication it is required to interconnect those layer-2 domains. In the context of BGP there is a concept of overlay networking with VXLAN/ EVPN that was evaluated to satisfy the needs of the metal-stack.","category":"page"},{"location":"overview/networking/#BGP-Unnumbered-1","page":"Networking","title":"BGP Unnumbered","text":"","category":"section"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"In BGP traditionally each BGP peer-facing interface requires a separate IPv4 address. This consumes a lot of IP addresses. RFC 5549 defines the BGP unnumbered standard. It allows to use interface's IPv6 link local address (LLA) to set up a BGP session with a peer. With BGP unnumbered the IPv6 LLA of the remote is automatically discovered via Router Advertisement (RA) protocol. Important: This does not (!) mean that IPv6 must be deployed in the network. BGP uses RFC 5549 to encode IPv4 routes as reachable over IPv6 next-hop using the LLA. Having unnumbered interfaces does not mean no IPv4 address may be in place. It is a good practice to configure an IP address to the never failing and always present local loopback interface (lo). This lo address is reachable over BGP from other peers because the RFC 5549 standard provides an encoding scheme to allow a router to advertise IPv4 routes with an IPv6 next-hop. BGP unnumbered also has an advantage from security perspective. It removes IPv4 and global IPv6 addresses from router interfaces, thus reducing the attack vector.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"To sum it up:","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"BGP unnumbered uses IPv6 next-hops to announce IPv4 routes.\nThere is no IPv6 deployment in the network required.\nIPv6 just has to be enabled on the BGP peers to provide LLA and RA.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"In BGP, ASN is how BGP peers know each other.","category":"page"},{"location":"overview/networking/#ASN-Numbering-1","page":"Networking","title":"ASN Numbering","text":"","category":"section"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Within the data center each BGP router is identified by a private autonomous system number (ASN). This ASN is used for internal communication. The default is to have 2-byte ASN. To avoid having to find workarounds in case the ASN address space is exhausted, a 4-byte ASN that supports up to 95 million ASNs (4200000000–4294967294) is used from the beginning.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"ASN numbering in a CLOS topology should follow a model to avoid routing problems (path hunting) due to it's redundant nature. Within a CLOS topology the following ANS numbering model is suggested to solve path hunting problems:","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Leaves have unique ASN\nSpines share an ASN\nExit switches share an ASN","category":"page"},{"location":"overview/networking/#Address-Families-1","page":"Networking","title":"Address-Families","text":"","category":"section"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"As stated, BGP is a multi-protocol routing protocol. Since it is planned to use IPv4 and overlay networks using EVPN/VXLAN several address-families have to be activated for the BGP sessions to use:","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"IPv4 unicast address-family\nL2 EVPN address-family","category":"page"},{"location":"overview/networking/#EVPN-1","page":"Networking","title":"EVPN","text":"","category":"section"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Ethernet VPN (EVPN) is an overlay virtual network that connects layer-2 segments over layer-3 infrastructure. EVPN is an answer to common problems of entire layer-2 data centers.","category":"page"},{"location":"overview/networking/#Why-do-we-need-EVPN-1","page":"Networking","title":"Why do we need EVPN","text":"","category":"section"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Challenges such as large failure domains, spanning tree complexities, difficult troubleshooting and scaling issues are addressed by EVPN:","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"administration: less routers are involved in configuration (with VLAN every switch on routing-paths needs VLAN awareness). The configuration is less error prone due to the nature of EVPN and the good support in FRR.\nscaling: EVPN overcomes scaling issues with traditional VLANs (max. 4094 VLANs).\ncost-effectiveness: EVPN is an overlay virtual network. Not every switch on the routing path needs EVPN awareness. This enables the use of standard routers (in contrast to traditional VLAN); e.g.: spine switches act only as evpn information replicator and do not need to have knowledge of specific virtual networks.\nefficiency: EVPN information is exclusively exchanged via BGP (Multiprotocol BGP). Only a single eBGP session is needed to advertise layer-2 reachability. No other protocols beneath BGP are involved and flood traffic is reduced to a minimum (no \"flood-and-learn\", no BUM traffic).","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Virtual routing permits multiple network paths without the need of multiple switches. Hence the servers are logically isolated by assigning their networks to dedicated virtual routers using virtual routing and forwarding (short: VRF).","category":"page"},{"location":"overview/networking/#How-do-we-use-EVPN-1","page":"Networking","title":"How do we use EVPN","text":"","category":"section"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"EVPN (technology) is based on BGP as control plane protocol (underlay) and VXLAN as data plane protocol (overlay).","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"As EVPN is an overlay network, only the VXLAN Tunnel End Points (VTEPs) must be configured. In the case of two-tier CLOS networks leaf switches are tunnel endpoints.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"In EVPN routing is assumed to occur in the context of a VRF. VRF enables true multitenancy. Therewith, VRF is the first step for EVPN configuration and there is a 1:1 relationship between tenant and VRF.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"To enable layer-2 connectivity, we need a special interface to route between layer-2 networks. This interface is called Switched VLAN Interface (SVI). The SVI is realized with a VLAN. It is part of a VRF (layer-3).","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"The VTEP configuration requires the setup of a VXLAN interface. A VLAN aware bridge interconnects the VXLAN interface and the SVI.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Required Interfaces to establish the EVPN control plane:","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"VRF: because routing happens in the context of this interface.\nSVI: because remote host routes for symmetric routing are installed over this interface.\nVLAN-aware bridge: because router MAC addresses of remote VTEPs are installed over this interface.\nVXLAN Interface / VXLAN Tunnel Endpoint: because the VRF to layer-3 VNI mapping has to be consistent across all VTEPs)","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"(Image: EVPN VTEP)","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Picture 3: Required interfaces on the switch to wire up the vrf to swp 1 connectivity with a given vxlan","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Integrated routing and bridging (IRB) is the most complex part of EVPN. You could choose between centralized or distributed routing, and between asymmetrical (routing on ingress) or symmetrical (routing on ingress and egress) routing. We expect a lot of traffic within the data center itself which implies the need to avoid zigzag routing. This is why we go with distributed routing model. Further it is recommended to use the symmetric model since it makes the cut in most cases and has advantages in scalability (see \"EVPN in the Data Center\", Dinesh G. Dutt).","category":"page"},{"location":"overview/networking/#MTU-1","page":"Networking","title":"MTU","text":"","category":"section"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"In a layer-3 network it is important to associate each interface with a proper Maximum Transmission Unit (MTU) to avoid fragmentation of IP packets. Typical modern networks do not fragment IP packets and the introduction of VXLAN adds another additional header to the packets that must not exceed the MTU. If the MTU is exceeded, VXLAN might just fail without error as Cumulus consultants stated. This already represents a difficult-to-diagnose connectivity issue that has to be avoided.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"It is common practice to set the MTU for VXLAN facing interfaces (e.g. inter-switch links) to a value of 9216 to compensate the additional VXLAN overhead and an MTU of 9000 as a default to other interfaces (e.g. server facing ports). The common MTU of 1500 is not sufficient for traffic inside a data center!","category":"page"},{"location":"overview/networking/#VRF-1","page":"Networking","title":"VRF","text":"","category":"section"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Routing is needed for communication between VXLAN tunnels or between a VXLAN tunnel and an external networks. VXLAN routing supports layer-3 multi-tenancy. All routing occurs in the context of a VRF. There is a 1:1 relation of a VRF to a tenant. Picture 3 illustrates this. Servers A and B belong to the same vrf VRF1. Server C is enslaved into VRF2. There is no communication possible between members of VRF1 and those of VRF2.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"(Image: Two routing tables)","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Picture 4: Illustration of two distinct routing tables of VRF1 (enslaved: servers A and B) and VRF2 (enslaved: server C)","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"To leaverage the potential and power of BGP, VRF, EVPN/VXLAN without a vendor lock-in the implementation relies on hardware that is supported by open network operating system: Cumulus Linux.","category":"page"},{"location":"overview/networking/#Implementation-1","page":"Networking","title":"Implementation","text":"","category":"section"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Implementation of the network operation requires the data center infrastructure to be in place. To implement a functional meaning for the parts of the CLOS network, all members must be wired accordingly.","category":"page"},{"location":"overview/networking/#Physical-Wiring-1","page":"Networking","title":"Physical Wiring","text":"","category":"section"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Reference: See the CLOS overview picture in ./README.md.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Name Wiring\nTenant server (aka Machine) Bare metal server that is associated to a tenant. Dual-connected to leafs.\nTenant firewall Bare metal server that is associated to a tenant. Dual-connected to leafs.\nLeaf Network Switch that interconnects tenant servers and firewalls. Connected to spines.\nSpine Network switch that interconnects leafs and exit switches.\nExit Network switch that connects to spines and interconnects to external networks.\nManagement Server Jump-host to access all network switches within the CLOS topology for administrative purpose.\nManagement Switch Connected to the management port of each of the network switches.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Tenant servers are organized into a layer called projects. In case those tenant servers require access to or from external networks, a new tenant server to function as a firewall is created. Leaf and spine switches form the fundament of the CLOS network to facilitate redundancy, resilience and scalability. Exit switches establish connectivity to or from external networks. Management Switch and Management Server are mandatory parts that build a management network to access the network switches for administration.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"To operate the CLOS topology, software defined configuration to enable BGP, VRF, EVPN and VXLAN must be set up.","category":"page"},{"location":"overview/networking/#Network-Operating-Systems-1","page":"Networking","title":"Network Operating Systems","text":"","category":"section"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Cumulus Linux as the network operating system will be installed on all network switches (leaves, spines, exit switches) within the CLOS topology. Cumulus Linux cannot be installed on bare metal servers that require BGP/EVPN but does not have a switching silicon.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Components without a switching silicon are:","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"tenant servers\ntenant firewalls\nmanagement server","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"There exist two paradigms to use BGP and/or VXLAN/EVPN on non switching bare metal servers: BGP-to-the-host and EVPN-to-the-host. Both describe a setup of Free Range Routing Framework (see frrouting.org) and its configuration. FRR seamlessly integrates with the native Linux IP networking stacks.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Starting with an explanation of the tenant server's BGP-to-the-Host helps to get an insight into the setup of the CLOS network from a bottom-up perspective.","category":"page"},{"location":"overview/networking/#Tenant-Servers:-BGP-to-the-Host-1","page":"Networking","title":"Tenant Servers: BGP-to-the-Host","text":"","category":"section"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Tenant servers are dual-connected to leaf switches. To communicate with other servers or reach out to external networks they must join a BGP session with each of the leaf switches. Thus, it is required to bring BGP to those hosts (aka BGP-to-the-Host). Each tenant server becomes a BGP router (aka BGP speaker).","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"BGP-to-the-Host is established by installing and configuring FRR. The required FRR configuration for tenant servers is limited to a basic setup to peer with BGP next-hops:","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"# /etc/network/interfaces\n\nauto lo\niface lo inet static\n  address 10.0.0.1/32\n\nauto lan0\niface lan0 inet6 auto\n  mtu 9000\n\nauto lan1\niface lan1 inet6 auto\n  mtu 9000","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Listing 1: Network interfaces of a tenant server.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Listing 1 shows the local interfaces configuration. lan0 and lan1 connect to the leaves. As described, there is no IPv4 address assigned to them (BGP unnumbered). The local loopback has an IPv4 address assigned that is announced by BGP.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"The required BGP configuration:","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"# /etc/frr/frr.conf\n\nfrr version 7.0\nfrr defaults datacenter\nlog syslog debugging\nservice integrated-vtysh-config\n!\ninterface lan0\n  ipv6 nd ra-interval 6\n  no ipv6 nd suppress-ra\n!\ninterface lan1\n  ipv6 nd ra-interval 6\n  no ipv6 nd suppress-ra\n!\nrouter bgp 4200000001\n  bgp router-id 10.0.0.1\n  bgp bestpath as-path multipath-relax\n  neighbor TOR peer-group\n  neighbor TOR remote-as external\n  neighbor TOR timers 1 3\n  neighbor lan0 interface peer-group TOR\n  neighbor lan1 interface peer-group TOR\n  neighbor LOCAL peer-group\n  neighbor LOCAL remote-as internal\n  neighbor LOCAL timers 1 3\n  neighbor LOCAL route-map local-in in\n  bgp listen range 10.244.0.0/16 peer-group LOCAL\n  address-family ipv4 unicast\n    redistribute connected\n    neighbor TOR route-map only-self-out out\n  exit-address-family\n!\nbgp as-path access-list SELF permit ^$\n!\nroute-map local-in permit 10\n  set weight 32768\n!\nroute-map only-self-out permit 10\n match as-path SELF\n!\nroute-map only-self-out deny 99\n!","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Listing 2: FRR configuration of a tenant server.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"The frr configuration in Listing 2 starts with frr defaults datacenter. This is a marker that enables compile-time provided settings that e.g. set specific values for BGP session timers. This is followed by a directive to state that instead of several configuration files for different purposes a single frr.conf file is used: service integrated-vtysh-config. The two interface specific blocks starting with interface ... enable the RA mechanism that is required for BGP unnumbered peer discovery. There is a global BGP instance configuration router bgp 4200000001 that sets the private ASN. The BGP router configuration contains a setup that identifies the BGP speaker bgp router-id 10.0.0.1. This router id should be unique. It is a good practice to assign the local loopback IPv4 as router-id. To apply the same configuration to several interfaces a peer group named TOR is defined via neighbor TOR peer-group. remote-as external activates external BGP for this peer group. To have a fast convergence, limits of default timers are reduced by timer 1 3 section. The two BGP-peer-facing interfaces are enslaved into the peer-group to inherit the peer-group's setup. Activation of IPv4 unicast protocol is completed with address-family ipv4 unicast. To prevent a tenant server from announcing other paths than lo interface a route-map only-self-out is defined. This route map is activated within the ipv4 address family: neighbor TOR route-map only-self-out out.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Application of the route map only-self-out enables to announce only local ip(s). This is to avoid that a tenant server announces paths to other servers (prevents unwanted traffic). To achieve this:","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"the route-map named only-self-out permits only matches against an access list named SELF\naccess list SELF permits only empty path announcements\nthe path of the tenant server itself has no ASN. It is always empty (see line *> 10.0.0.2/32 0.0.0.0 0 32768 ?):\nroot@machine:~# vtysh -c 'show bgp ipv4 unicast'\nBGP table version is 7, local router ID is 10.0.0.2, vrf id 0\nDefault local pref 100, local AS 4200000002\nStatus codes:  s suppressed, d damped, h history, * valid, > best, = multipath,\n              i internal, r RIB-failure, S Stale, R Removed\nNexthop codes: @NNN nexthop's vrf id, < announce-nh-self\nOrigin codes:  i - IGP, e - EGP, ? - incomplete\n\n  Network          Next Hop            Metric LocPrf Weight Path\n*= 0.0.0.0/0        lan1                                   0 4200000012 4200000040 i\n*>                  lan0                                   0 4200000011 4200000040 i\n*= 10.0.0.1/32      lan1                                   0 4200000012 4200000001 ?\n*>                  lan0                                   0 4200000011 4200000001 ?\n*> 10.0.0.2/32      0.0.0.0                  0         32768 ?\n*= 10.0.0.78/32     lan1                                   0 4200000012 4200000001 ?\n*>                  lan0                                   0 4200000011 4200000001 ?\n\nDisplayed  4 routes and 7 total paths\nThat is why only the self ip (looback ip) is announced.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"To allow for peering between FRR and other routing daemons on a tenant server a listen range is specified to accept iBGP sessions on the network 10.244.0.0/16. Therewith it gets possible that pods / containers like metal-lb with IPs of this range may peer with FRR.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"This is the only place where we use iBGP in our topology. For local peering this has the advantage, that we don't need an additional ASN that has to be handled / pruned in the AS-path of routes. Routes coming from other routing daemons look as if they are configured on the tenant server's lo interface from the viewpoint of the leaves. iBGP routes are differently handled than eBGP routes in BGPs best path algorithm. Generally BGP has the rule to prefer eBGP routes over iBGP routes (s. 'eBGP over iBGP' https://datapath.io/resources/blog/how-bgp-best-path-selection-works/). BGP adds automatically an weight based on the route type. To overcome this issue, we set the weight of iBGP routes to the same weight that eBGP routes have, namely 32768 (set weight 32768). Without this configuration we will only get a single route to the IPs announced via iBGP. So this setting is essential for HA/failover!","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Statistics of the established BGP session can be viewed locally from the tenant server via: sudo vtysh -c 'show bgp ipv4 unicast'","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"To establish this BGP session a BGP setup is required on the leaves as well.","category":"page"},{"location":"overview/networking/#Leaf-Setup-1","page":"Networking","title":"Leaf Setup","text":"","category":"section"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Every leaf switch is connected to every spine switch. Tenant servers can be distributed within the data center and thus be connected to different leaves. Routing for tenant servers is isolated in unique VRFs. These constraints imply several configuration requirements for the leaf and spine switches:","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"leaves define tenant VRFs\nleaves terminate VXLAN tunnels (aka \"VXLAN tunnel endpoint\" = VTEP)","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"The leaf setup requires the definition of a tenant VRF that enslaves the tenant server facing interfaces:","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"# /etc/network/interfaces\n\n# [...]\n\niface vrf3981\n    vrf-table auto\n\niface swp1\n    mtu 9000\n    post-up sysctl -w net.ipv6.conf.swp1.disable_ipv6=0\n    vrf vrf3981\n\n# [...]","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Listing 3: Fragment that shows swp1 being member of vrf vrf3981.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"There is a VRF defintion iface vrf3981 to create a distinct routing table and a section vrf vrf3981 that enslaves swp1 (connects the tenant server) into the VRF. Those host facing ports are also called edge ports.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Unfortunately, due to a kernel bug, IPv6 is not reliably enabled, so it is enforced explicitly via post-up sysctl -w net.ipv6.conf.swp1.disable_ipv6=0. If this post-up trigger is missing the LLA of the interface might be absent.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Additional to the VRF definition the leaf must be configured to provide and connect a VXLAN interface to establish a VXLAN tunnel. This network virtualization begins at the leaves. Therefore, the leaves are also called Network Virtualization Edges (NVEs). The leaves encapsulate and decapsulate VXLAN packets.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"# /etc/network/interfaces\n\n# [...]\n\niface bridge\n    bridge-ports vni3981\n    bridge-vids 1001\n    bridge-vlan-aware yes\n\niface vlan1001\n    mtu 9000\n    vlan-id 1001\n    vlan-raw-device bridge\n    vrf vrf3981\n\niface vni3981\n    mtu 9000\n    bridge-access 1001\n    bridge-arp-nd-suppress on\n    bridge-learning off\n    mstpctl-bpduguard yes\n    mstpctl-portbpdufilter yes\n    vxlan-id 3981\n    vxlan-local-tunnelip 10.0.0.11\n\n# [...]","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Listing 4: Fragment that shows VXLAN setup for vrf vrf3981.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"All routing happens in the context of the tenant VRF. To send and receive packets of a VRF, several interface are in place.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"A bridge is used to attach VXLAN interface bridge-ports vni3981 and map its local VLAN to a VNI. Router MAC addresses of remote VTEPs are installed over this interface.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"The Routed VLAN Interface or Switched Virtual Interface (SVI) iface vlan1001 is configured corresponding to the per-tenant VXLAN interface. It is attached to the tenant VRF. Remote host routes are installed over this SVI. The vlan-raw-device bridge is used to associate the SVI with the VLAN aware bridge. For a packet received from a locally attached host the SVI interface corresponding to the VLAN determines the VRF vrf vrf3981.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"The VXLAN interface iface vni3981 defines a tunnel address that is used for the VXLAN tunnel header vlxan-local-tunnelip 10.0.0.11. This VTEP IP address is typically the loopback device address of the switch. When EVPN is provisioned, data plane MAC learning for VXLAN interfaces must be disabled because the purpose of EVPN is to exchange MACs between VTEPs in the control plane: bridge-learning off. EVPN is responsible for installing remote MACs. bridge-arp-nd-suppress suppresses ARP flooding over VXLAN tunnels.  Instead, a local proxy handles ARP requests received from locally attached hosts for remote hosts. ARP suppression is the implementation for IPv4; ND suppression is the implementation for IPv6. It is recommended by Cumulus to enable ARP suppression on all VXLAN interfaces. Bridge Protocol Data Unit (BPDU) are not transmitted over VXLAN interfaces. So as a good practice bpduguard and pbdufilter are enabled with mstpctl-bpduguard yes and mstpctl-portbpdufilter yes. These settings filter BPDU and guard the spanning tree topology from unauthorized switches affecting the forwarding path. vxlan-id 3981 specifies the VXLAN Network Identifier (VNI). The type of VNI can either be layer-2 (L2) or layer-3 (L3). This is an implicit thing. A VNI is a L3 VNI (L3VNI) when a mapping exists that maps the VNI to a VRF (configured in /etc/frr/frr.conf) otherwise it is a L2 VNI (L2VNI).","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"# /etc/frr/frr.conf\n# [...]\nvrf vrf3981\n vni 3981\n exit-vrf\n#[...]\nrouter bgp 4200000011\n# [...]\n address-family ipv4 unicast\n  redistribute connected route-map LOOPBACKS\n # [...]\n address-family l2vpn evpn\n  neighbor FABRIC activate\n  advertise-all-vni\n exit-address-family\n# [...]\nrouter bgp 4200000011 vrf vrf3981\n # [...]\n address-family ipv4 unicast\n  redistribute connected\n  neighbor MACHINE maximum-prefix 100\n exit-address-family\n !\n address-family l2vpn evpn\n  advertise ipv4 unicast\n exit-address-family\n\n# [...]\nroute-map LOOPBACKS permit 10\n match interface lo\n# [...]","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Listing 5: Leaf FRR configuration.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Listing 5 shows the required FRR configuration of the BGP control plane. Only content not discussed so far is explained. The section vrf vrf3981 contains the mapping from layer-3 VNI to VRF. This is required to be able to install EVPN IP prefix routes (type-5 routes) into the routing table. Further the file contains a global BGP instance router bgp 4200000011 definition. A new setting redistribute connected route-map LOOPBACKS is in place to filter the redistribution of routes that are not matching the local loopback interface. The route-map is defined with route-map LOOPBACKS permit 10. With the configuration line  address-family l2vpn evpn, the EVPN address family is enabled between BGP neighbours. advertise-all-vni makes the switch a VTEP configures it in such a way, that all locally configured VNIs should be advertised by the BGP control plane.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"The second BGP instance configuration is specific to the tenant VRF router bgp 4200000011 vrf vrf3981. This VRF BGP instance configures the l2vpn evpn address family with advertise ipv4 unicast to announce IP prefixes in BGP's routing information base (RIB). This is required to apply learned routes to the routing tables of connected hosts. The Maximum-Prefix feature is useful to avoid that a router recieves more routes than the router memory can take. The maximum number of prefixes a tenant server is allowed to announce is limited to 100 with: neighbor MACHINE maximum-prefix 100.","category":"page"},{"location":"overview/networking/#Spine-setup-1","page":"Networking","title":"Spine setup","text":"","category":"section"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"On the spine switches the setup is quite simple. /etc/network/interfaces contains the loopback interface definition to support BGP unnumbered and listings for connected switch ports to provide proper MTUs (Listing 6). I.e. swp1 is configured with an MTU of 9216 as it is a VXLAN-facing interface.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"# /etc/network/interfaces\n# [...]\niface swp1\n    mtu 9216","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Listing 6: Fragment of spine interface configuration.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"The spines are important to forward EVPN routes and transport VXLAN packets between the VTEPs. They are not configured as VTEPs. The FRR configuration only contains the already known global BGP instance configuration router bgp 4200000020 plus the activation of the l2vpn evpn address family address-family l2vpn evpn to enable EVPN type-5 route forwarding (Listing 7).","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"frr version 4.0+cl3u9\nfrr defaults datacenter\nhostname spine01\nusername cumulus nopassword\n!\n# [...]\ninterface swp1\n ipv6 nd ra-interval 6\n no ipv6 nd suppress-ra\n!\n# [...]\n!\nrouter bgp 4200000020\n # [...]\n!\n address-family l2vpn evpn\n  neighbor FABRIC activate\n exit-address-family\n!\n# [...]","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Listing 7: Fragment of spine FRR configuration to show the activated L2VPN EVPN address-family.","category":"page"},{"location":"overview/networking/#Tenant-Firewalls:-EVPN-to-the-Host-1","page":"Networking","title":"Tenant Firewalls: EVPN-to-the-Host","text":"","category":"section"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"In case a tenant server needs to reach out to external networks as the Internet, a tenant firewall is provisioned. The firewall is a bare metal server without a switching silicon. Thus, there is no installation of Cumulus Linux. Instead a standard Linux OS with a special configuration is used (FRR from branch dev/frr-7.1, iproute2 and a more recent Linux Kernel >= 5.0) to provide the BGP/ EVPN functionality known as EVPN-to-the-host. The firewall is configured as a VTEP and applies dynamic route-leaking to install routes of an foreign VRF. The set of routes that are leaked are restricted with route-maps.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"As Listing 8 shows, the firewall is configured with VXLAN interfaces as known from the leaf setup. Additionally, a VXLAN setup for VRF vrfInternet is added to provide Internet access. vrfInternet contains a route to the Internet that will be leaked into the tenant VRF.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Traffic that originates from the tenant network 10.0.0.0/22 will be masqueraded before leaving the inferface vlanInternet towards the internet.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"# /etc/network/interfaces\n# [...]\niface bridge\n# [...]\niface vlan1001\n# [...]\niface vni3981\n# [...]\niface vrf3981\n# [...]\niface vlanInternet\n    mtu 9000\n    vlan-id 4009\n    vlan-raw-device bridge\n    vrf vrfInternet\n    address 185.1.2.3\n    post-up iptables -t nat -A POSTROUTING -s 10.0.0.0/22 -o vlanInternet -j MASQUERADE\n    pre-down iptables -t nat -D POSTROUTING -s 10.0.0.0/22 -o vlanInternet -j MASQUERADE\n\niface vniInternet\n    mtu 9000\n    bridge-access 4009\n    mstpctl-bpduguard yes\n    mstpctl-portbpdufilter yes\n    vxlan-id 104009\n    vxlan-local-tunnelip 10.0.0.40\n\niface vrfInternet\n    mtu 9000\n    vrf-table auto","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Listing 8: Interfaces configuration of firewall to show the VTEP interface configuration.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"To install a default route into the routing table of tenant VRF vrf3981 a dynamic route leak is established for it (import vrf vrfInternet). With the help of a route-map import vrf route-map vrf3981-import-map only the default route will be leaked:","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"root@firewall01:~# vtysh -c 'show ip route vrf vrf3981'\n# [...]\nVRF vrf3981:\nS>* 0.0.0.0/0 [1/0] is directly connected, vrfInternet(vrf vrfInternet), 03:19:26\nB>* 10.0.0.1/32 [20/0] via 10.0.0.12, vlan1001 onlink, 02:34:48\n  *                    via 10.0.0.11, vlan1001 onlink, 02:34:48\nB>* 10.0.0.2/32 [20/0] via 10.0.0.12, vlan1001 onlink, 02:34:49\n  *                    via 10.0.0.11, vlan1001 onlink, 02:34:49","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"To receive responses from vrfInternet in vrf3981 a route is leaked into vrfInternet as well (import vrf vrf3981) restricted with the route-map vrfInternet-import-map that allows leaking of the tenant routes as well as internet prefixes used on worker nodes of the tenant. To limit the prefixes that are announced from the firewall within the global BGP instance a route-map only-self-out is defined and applied within the ipv4 and l2vpn evpn address family. Together with the definition of an as path access list bgp as-path access-list it avoids the announcement of prefixes to non VRF BGP peers.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"# /etc/frr/frr.conf\n!\nvrf vrf3981\n vni 3981\n!\nvrf vrfInternet\n vni 104009\n!\n# [...]\n!\nrouter bgp 4200000040\n # [...]\n !\n address-family ipv4 unicast\n  # [...]\n  neighbor FABRIC route-map only-self-out out\n exit-address-family\n !\n!\nrouter bgp 4200000040 vrf vrf3981\n # [...]\n address-family ipv4 unicast\n  redistribute connected\n  import vrf vrfInternet\n  import vrf route-map vrf3981-import-map\n # [...]\n addrress-family l2vpn evpn\n  advertise ipv4 unicast\n # [...]\nrouter bgp 4200000040 vrf vrfInternet\n # [...]\n address-family ipv4 unicast\n  redistribute connected\n  import vrf vrf3981\n  import vrf route-map vrfInternet-import-map\n # [...]\n addrress-family l2vpn evpn\n  advertise ipv4 unicast\n # [...]\n bgp as-path access-list SELF permit ^$\n!\nroute-map only-self-out permit 10\n match as-path SELF\n!\nroute-map only-self-out deny 99\n!\nroute-map LOOPBACKS permit 10\n match interface lo\n!\nip prefix-list vrf3981-import-prefixes seq 100 permit 0.0.0.0/0\n!\nroute-map vrf3981-import-map permit 10\n match ip address prefix-list vrf3981-import-prefixes\n!\nroute-map vrf3981-import-map deny 99\n!\nip prefix-list vrfInternet-import-prefixes seq 100 permit 10.0.0.0/22 le 32\nip prefix-list vrfInternet-import-prefixes seq 101 permit 185.1.2.0/24 le 32\nip prefix-list vrfInternet-import-prefixes seq 102 permit 185.27.0.0/27 le 32\n!\nroute-map vrfInternet-import-map permit 10\n match ip address prefix-list vrfInternet-import-prefixes\n!\nroute-map vrfInternet-import-map deny 99\n!\nline vty\n!","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Listing 9: FRR configuration of a tenant firewall to show route leak and prefix announcement filtering.","category":"page"},{"location":"overview/networking/#Exit-Switch-1","page":"Networking","title":"Exit Switch","text":"","category":"section"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Traffic to external networks is routed via the firewalls to the exit switch. The exit switch, as an exception, connects to the Internet Service Provider using numbered BGP. Numbered BGP implies to assign IPv4 addresses to network interfaces (See Listing 10, swp1). Interface swp1 is enslaved into vrf vrfInternet to include the port that is connected to the ISP within the VRF that is expected to contain a way into the Internet. The exit switch is configured to be a VTEP to terminate traffic coming from the firewall VRF vrfInternet.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"# /etc/network/interfaces\n# [...]\niface swp1\n    mtu 9000\n    vrf vrfInternet\n    address 172.100.0.2/30\n# [...]\niface vlan4000\n    mtu 9000\n    address 10.0.0.71/24\n    vlan-id 4000\n    vlan-raw-device bridge\n# [...]\niface vlanInternet\n# [...]\niface vniInternet\n# [...]\niface vrfInternet\n# [...]","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Listing 10: Fragment of interfaces configuration of exit switch.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"The configuration of FRR is equivalent to the previously discussed ones. It contains a global BGP instance configuration that enables IPv4 unicast and l2vpn evpn address families. The vrfInternet BGP instance defines neighbor 172.100.0.1 peer-group INTERNET to use \"old style BGP\" transit network.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"# [..]\nvrf vrfInternet\n vni 104009\n!\n# [...]\nrouter bgp 4200000031\n bgp router-id 10.0.0.31\n neighbor FABRIC peer-group\n neighbor FABRIC remote-as external\n neighbor FABRIC timers 1 3\n # [...]\n !\n address-family ipv4 unicast\n  neighbor FABRIC activate\n  redistribute connected route-map LOOPBACKS\n exit-address-family\n !\n address-family l2vpn evpn\n  neighbor FABRIC activate\n  advertise-all-vni\n exit-address-family\n!\nrouter bgp 4200000031 vrf vrfInternet\n bgp router-id 10.0.0.31\n bgp bestpath as-path multipath-relax\n neighbor INTERNET peer-group\n neighbor INTERNET remote-as external\n neighbor INTERNET timers 1 3\n neighbor 172.100.0.1 peer-group INTERNET\n !\n address-family ipv4 unicast\n  neighbor INTERNET route-map PREPEND-PATH-TO-DISFAVOR-IN in\n  neighbor INTERNET route-map PREPEND-PATH-TO-DISFAVOR-OUT out\n exit-address-family\n\n !\n address-family l2vpn evpn\n  advertise ipv4 unicast\n exit-address-family\n!\nroute-map LOOPBACKS permit 10\n match interface lo\n!\nroute-map PREPEND-PATH-TO-DISFAVOR-IN permit 10\n set as-path prepend last-as 2\n!\nroute-map PREPEND-PATH-TO-DISFAVOR-OUT permit 10\n set as-path prepend last-as 2\n!\nvrf mgmt\n ip route 10.0.0.0/24 10.0.0.71 nexthop-vrf default\n exit-vrf\n!\nip route 0.0.0.0/0 192.168.0.254 nexthop-vrf mgmt\n!\nline vty\n!","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Listing 11: Fragment of FRR configuration on exit switch to give an example for numbered BGP and route leak.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"In addition to the standard BGP setup the exit switches have configured static route leak to support internet access during PXE. There is one route leak from default VRF into the mgmt VRF defined with: ip route 0.0.0.0/0 192.168.0.254 nexthop-vrf mgmt and another one from mgmt VRF into the default VRF: ip route 10.0.0.0/24 10.0.0.71 nexthop-vrf default. The first one adds a default route into the default VRF and the second one routes traffic destined to the PXE network back from mgmt VRF into the default VRF.  ","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"To reach out into external networks each of the exit nodes joins a BGP session with a distinct external router. There is a different latency to each of these routers. To favor routes of exit nodes connected with lower latency over exit nodes with higher latency two route maps PREPEND-PATH-TO-DISFAVOR-IN and PREPEND-PATH-TO-DISFAVOR-OUT are added to high latency exit nodes. These route maps apply actions to prolong the path of the incoming and outgoing routes. Because of this path extension BGP will calculate a lower weight for these paths and favors paths via other exit nodes. It is important to know that within an address family only one route map (the last) will be applied. To apply more than one actions within a route-map the required entries can be applied to a single route-map.","category":"page"},{"location":"overview/networking/#Operationalizing-Cumulus-Linux-1","page":"Networking","title":"Operationalizing Cumulus Linux","text":"","category":"section"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"With Cumulus Linux as the basic network operating system there are two possibilities on how to get configuration into the target devices:","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"editing flat files and reloading required services\nutilizing Network Command Line Utility (NCLU)","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"The NCLU has two wrappers:","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"CLI (net command)\nAnsible Module nclu","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"As Cumulus states, the NCLU tool is intended for people who do not understand Linux. Besides the fact, that we understand that editing flat files has advantages, we found the following reasons to stick with this approach:","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"full control on what is going on and when it is going on\nno suffer from bugs that are present in NCLU net command\ndecoupling from additional layers (NCLU)\navoid hybrid solutions since NCLU is not capable of solving all use cases completely (e.g. DHCP configuration)\nin the past we made good experiences with rendering plain configuration files","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Of course this decision comes with the challenge to render all required files correctly and reload the appropriate services accordingly.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Reference: Operationalizing Cumulus Linux","category":"page"},{"location":"overview/networking/#PXE-Boot-Mode-1","page":"Networking","title":"PXE Boot Mode","text":"","category":"section"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Before a bare metal server can act as tenant server or tenant firewall, it has to be provisioned. Within the Metal domain, this provisioning mode is called \"PXE Mode\" since it is based on Preboot eXecution Environment (PXE). PXE uses protocols like DHCP. This requires all bare metal servers that need provisioning to be located in a layer-2 domain where DHCP is available. This domain is a VLAN vlan4000. A DHCP server for PXE Mode is installed on the exit switches to work in this specific VLAN.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"# /etc/default/isc-dhcp-server\nINTERFACES=\"vlan4000\"","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Listing 13: DHCP server configration of exit switches.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"As shown in listing 13, the PXE DHCP server is located on the exit switches and enforced to bind to interface vlan4000. This represents a layer-2 separation that allows only DHCP clients in the same VLAN to request IP addresses. Only unprovisionned bare metal servers are configured to be member of this VLAN. Thus unwanted or accidential provisionning is impossible.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"To provide vlan4000 on the leaves (that face the bare metal servers) the exit and leaf switches are configured as VTEPs and share an interface configuration that contains the required interfaces (Listing 13). Since no EVPN routing is in place vni104000 is configured as an L2 VNI (there is no mapping for this VNI in /etc/frr/frr.conf).","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"# /etc/network/interfaces\n# [...]\niface bridge\n    bridge-ports vni104000 [...]\n    bridge-vids 4000 [...]\n    bridge-vlan-aware yes\n\niface vlan4000\n# [...]\n\niface vni104000\n# [...]","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Listing 13: Interfaces configuration on exit and leaf switches to show DHCP/PXE related fragments.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"On the leaf switches the bare metal server facing ports are configured as VLAN access ports to carry the traffic for only the PXE VLAN vlan4000 (listing 14)to separate unprovisioned from other bare metal servers.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"# /etc/network/interfaces\n# [...]\nauto swp1\niface swp1\n    mtu 9000\n    bridge-access 4000\n# [...]","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Listing 14: VLAN access setup for bare metal server facing ports on leaves.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"Once a bare metal server is provisioned it is deconfigured from PXE VLAN vlan4000 to avoid accidential or unwanted provisioning.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"During provisioning bare metal servers get internet access via the management network of the exit switches. This is because the exit switches are announced as DHCP gateway to the DHCP clients.","category":"page"},{"location":"overview/networking/#Management-Network-1","page":"Networking","title":"Management Network","text":"","category":"section"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"To manage network switches beside the out-of-band system console access a further management access is required. For this purpose the concept of Management VRF is applied. The Management VRF is a subset of VRF. It provides a separation between out-of-band management network and the in-band data plane network by introducing another routing table mgmt. Cumulus Linux supports lan0 to be used as the management interface.","category":"page"},{"location":"overview/networking/#","page":"Networking","title":"Networking","text":"To enable and use the Management VRF all switches have to be connected via their lan0 interface to a management-switch. The management switch is connected to a management server. All access is established from within the managment server. Logins to the switch are set into the Management VRF context once the Managment VRF is enabled.","category":"page"},{"location":"proposals/MEP3/README/#Machine-Re-Installation-1","page":"Machine Re-Installation","title":"Machine Re-Installation","text":"","category":"section"},{"location":"proposals/MEP3/README/#","page":"Machine Re-Installation","title":"Machine Re-Installation","text":"In the current metal-api only machine installations are possible, performing a machine upgrade is only possible by creating a new machine and delete the old one. This has the drawback that in case a lot of data is stored on the local disks, a full restore of the original data must be performed.","category":"page"},{"location":"proposals/MEP3/README/#","page":"Machine Re-Installation","title":"Machine Re-Installation","text":"To prevent this, we will introduce a new metal-api endpoint to reinstall the machine with a new image, without actually deleting the data stored on the additional hard disks.","category":"page"},{"location":"proposals/MEP3/README/#","page":"Machine Re-Installation","title":"Machine Re-Installation","text":"Storage is a difficult task to get right and reliable. A short analysis of our different storage requirements lead to 3 different scenarios.","category":"page"},{"location":"proposals/MEP3/README/#","page":"Machine Re-Installation","title":"Machine Re-Installation","text":"Storage for the etcd pvs in the seed cluster of every partition.   This is the most important storage in our setup because these etcd pods serve as configuration backend for all customer kubernetes clusters. If they fail, the cluster is down. However gardener deploys a backup and restore sidecar into the etcd pod of every customer kubernetes control plane, and if this sidecar detects a corrupt or missing etcd database file(s) it starts automatic restore from the configured backup location. This will take some minutes. If for example a node dies, and gardener creates a new node instead, the csi-lvm created pv is not present on that node. Kubernetes will not schedule the missing etcd pod on this node because it has a local PV configured and is therefore tainted to run only on that node. To let kubernetes create that pod anyhow, someone has to either remove the taint, or delete the pod. If this is done, the pod starts and the restore of the etcd data can start as well. You can see this is a bit too complicated and will take the customer cluster down for a while (not measured yet but in the range of 5-10 minutes).\nStorage in customer clusters.   This was not promised in 2020. We have a intermediate solution with the provisioning of csi-lvm by default into all customer clusters. Albeit this is only local storage and will get deleted if a node dies.\nS3 Storage.   We have two possibilities to cope with storage:\nIn place update of the OS with a daemonset   This will be fast and simple, but might fail because the packages being installed are broken right now, or a filesystem gets full, or any other failure you can think of during a os update. Another drawback is that metal-api does not reflect the updated os image.\nmetal-api get a machine reinstall endpoint   With this approach we leverage from existing and already proven mechanisms. Reinstall must keep all data except the sata-dom. Gardener currently is not able to do an update with this approach because it can only do rolling updates. Therefore a additional osupdatestrategy has to be implemented for metal and other providers in gardener to be able to leverage the metal reinstall on the same machineID approach.","category":"page"},{"location":"proposals/MEP3/README/#","page":"Machine Re-Installation","title":"Machine Re-Installation","text":"If reinstall is implemented, we should focus on the same technology for all scenarios and put ceph via rook.io into the kubernetes clusters as additional StorageClass. It has to be checked whether to use the raw disk or a PV as the underlay block device where ceph stores its data.","category":"page"},{"location":"proposals/MEP3/README/#API-and-behavior-1","page":"Machine Re-Installation","title":"API and behavior","text":"","category":"section"},{"location":"proposals/MEP3/README/#","page":"Machine Re-Installation","title":"Machine Re-Installation","text":"The API will get an new endpoint \"reinstall\" this endpoint takes two arguments:","category":"page"},{"location":"proposals/MEP3/README/#","page":"Machine Re-Installation","title":"Machine Re-Installation","text":"machineID\nimage","category":"page"},{"location":"proposals/MEP3/README/#","page":"Machine Re-Installation","title":"Machine Re-Installation","text":"No other aspects of the machine can be modified during the re-installation. All data stored in the existing allocation will be preserved, only the image will be modified. Once this endpoint was called, the machine will get a reboot signal with the boot order set to PXE instead of HDD and the network interfaces on the leaf are set to PXE as well. Then the normal installation process starts:","category":"page"},{"location":"proposals/MEP3/README/#","page":"Machine Re-Installation","title":"Machine Re-Installation","text":"unchanged: PXE boot with metal-hammer\nchanged: metal-hammer first checks with the machineID in the metal-api (through metal-core) if there is already a allocation present\nchanged: if a allocation is present and the allocation has set reinstall: true, wipe disk is only executed for the root disk, all other disks are untouched.\nunchanged: the specified image is downloaded and burned, /install.sh is executed\nunchanged: successful installation is reported back, network is set the the vrf, boot order is set to HDD.\nunchanged: distribution kernel is booted via kexec","category":"page"},{"location":"proposals/MEP3/README/#","page":"Machine Re-Installation","title":"Machine Re-Installation","text":"We can see that the allocation requires one additional parameter: reinstall and metal-hammer must check for already existing allocation at an earlier stage.","category":"page"},{"location":"proposals/MEP3/README/#","page":"Machine Re-Installation","title":"Machine Re-Installation","text":"Components which requires modifications (first guess):","category":"page"},{"location":"proposals/MEP3/README/#","page":"Machine Re-Installation","title":"Machine Re-Installation","text":"metal-hammer:\ncheck for allocation present earlier\nevaluation of reinstall flag set\nwipe of disks depends on that flag\nBonus: move configuration of disk layout and primary disk detection algorithm (PDDA) from metal-hammer into metal-api.   metal-api MUST reject reinstallation if the disk found by PDDA does not have the /etc/metal directory!\nmetal-core:\nprobably nothing\nmetal-api:\nnew endpoint /machine/reinstall\nadd Reinstall bool to data model of allocation\nmake sure to reset Reinstall after reinstallation to prevent endless reinstallation loop\nmetalctl:\nimplement reinstall\nmetal-go:\nimplement reinstall\ngardener (longterm):\nadd the OSUpgradeStrategy reinstall","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_create/#metalctl-machine-create-1","page":"-","title":"metalctl machine create","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_create/#","page":"-","title":"-","text":"create a machine","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_create/#Synopsis-1","page":"-","title":"Synopsis","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_create/#","page":"-","title":"-","text":"create a new machine with the given operating system, the size and a project.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_create/#","page":"-","title":"-","text":"metalctl machine create [flags]","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_create/#Examples-1","page":"-","title":"Examples","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_create/#","page":"-","title":"-","text":"machine create can be done in two different ways:\n\n- default with automatic allocation:\n\nmetalctl machine create \\\n\t--hostname worker01 \\\n\t--name worker \\\n\t--image ubuntu-18.04 \\ # query available with: metalctl image list\n\t--size t1-small-x86 \\  # query available with: metalctl size list\n\t--partition test \\     # query available with: metalctl partition list\n\t--project cluster01 \\\n\t--sshpublickey \"@~/.ssh/id_rsa.pub\"\n\n- for metal administration with reserved machines:\n\nreserve a machine you want to allocate:\n\nmetalctl machine reserve 00000000-0000-0000-0000-0cc47ae54694 --description \"blocked for maintenance\"\n\nallocate this machine:\n\nmetalctl machine create \\\n\t--hostname worker01 \\\n\t--name worker \\\n\t--image ubuntu-18.04 \\ # query available with: metalctl image list\n\t--project cluster01 \\\n\t--sshpublickey \"@~/.ssh/id_rsa.pub\" \\\n\t--id 00000000-0000-0000-0000-0cc47ae54694\n\nafter you do not want to use this machine exclusive, remove the reservation:\n\nmetalctl machine reserve 00000000-0000-0000-0000-0cc47ae54694 --remove\n\nOnce created the machine installation can not be modified anymore.\n\n","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_create/#Options-1","page":"-","title":"Options","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_create/#","page":"-","title":"-","text":"  -d, --description string    Description of the machine to create. [optional]\n  -h, --help                  help for create\n  -H, --hostname string       Hostname of the machine. [required]\n  -I, --id string             ID of a specific machine to allocate, if given, size and partition are ignored. Need to be set to reserved (--reserve) state before.\n  -i, --image string          OS Image to install. [required]\n      --ips strings           Sets the machine's IP address. Usage: [--ips[=IPV4-ADDRESS[,IPV4-ADDRESS]...]]...\n                              IPV4-ADDRESS specifies the IPv4 address to add.\n                              It can only be used in conjunction with --networks.\n  -n, --name string           Name of the machine. [optional]\n      --networks strings      Adds a network. Usage: [--networks NETWORK[:MODE][,NETWORK[:MODE]]...]...\n                              NETWORK specifies the name or id of an existing network.\n                              MODE cane be omitted or one of:\n                              \tauto\tIP address is automatically acquired from the given network\n                              \tnoauto\tIP address for the given network must be provided via --ips\n  -S, --partition string      partition/datacenter where the machine is created. [required, except for reserved machines]\n  -P, --project string        Project where the machine should belong to. [required]\n  -s, --size string           Size of the machine. [required, except for reserved machines]\n  -p, --sshpublickey string   SSH public key for access via ssh and console. [optional]\n                              Can be either the public key as string, or pointing to the public key file to use e.g.: \"@~/.ssh/id_rsa.pub\".\n                              If ~/.ssh/id_rsa.pub is present it will be picked as default.\n      --tags strings          tags to add to the machine, use it like: --tags \"tag1,tag2\" or --tags \"tag3\".\n      --userdata string       cloud-init.io compatible userdata. [optional]\n                              Can be either the userdata as string, or pointing to the userdata file to use e.g.: \"@/tmp/userdata.cfg\".","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_create/#Options-inherited-from-parent-commands-1","page":"-","title":"Options inherited from parent commands","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_create/#","page":"-","title":"-","text":"      --apitoken string        api token to authenticate. Can be specified with METALCTL_APITOKEN environment variable.\n  -c, --config string          alternative config file path, (default is ~/.metalctl/config.yaml).\n                               Example config.yaml:\n                               \n                               ---\n                               apitoken: \"alongtoken\"\n                               ...\n                               \n                               \n      --debug                  debug output\n  -f, --file string            filename of the create or update request in yaml format, or - for stdin.\n                               Example image update:\n                               \n                               # metalctl image describe ubuntu-19.04 > ubuntu.yaml\n                               # vi ubuntu.yaml\n                               ## either via stdin\n                               # cat ubuntu.yaml | metalctl image update -f -\n                               ## or via file\n                               # metalctl image update -f ubuntu.yaml\n                               \n      --kubeconfig string      Path to the kube-config to use for authentication and authorization. Is updated by login.\n      --no-headers             do not print headers of table output format (default print headers)\n      --order string           order by (comma separated) column(s), possible values: size|id|status|event|when|partition|project\n  -o, --output-format string   output format (table|wide|markdown|json|yaml|template), wide is a table with more columns. (default \"table\")\n      --template string        output template for template output-format, go template format.\n                               For property names inspect the output of -o json or -o yaml for reference.\n                               Example for machines:\n                               \n                               metalctl machine list -o template --template \"{{ .id }}:{{ .size.id  }}\"\n                               \n                               \n  -u, --url string             api server address. Can be specified with METALCTL_URL environment variable.","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_create/#SEE-ALSO-1","page":"-","title":"SEE ALSO","text":"","category":"section"},{"location":"external/metalctl/docs/metalctl_machine_create/#","page":"-","title":"-","text":"metalctl machine\t - manage machines","category":"page"},{"location":"external/metalctl/docs/metalctl_machine_create/#Auto-generated-by-spf13/cobra-on-21-Apr-2020-1","page":"-","title":"Auto generated by spf13/cobra on 21-Apr-2020","text":"","category":"section"}]
}
